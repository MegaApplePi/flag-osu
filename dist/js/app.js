!function(e){var t={};function r(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)r.d(n,a,function(t){return e[t]}.bind(null,a));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}({"./node_modules/ansi-html/index.js":function(e,t,r){"use strict";e.exports=l;var n=/(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/,a={reset:["fff","000"],black:"000",red:"ff0000",green:"209805",yellow:"e8bf03",blue:"0000ff",magenta:"ff00ff",cyan:"00ffee",lightgrey:"f0f0f0",darkgrey:"888"},o={30:"black",31:"red",32:"green",33:"yellow",34:"blue",35:"magenta",36:"cyan",37:"lightgrey"},i={1:"font-weight:bold",2:"opacity:0.5",3:"<i>",4:"<u>",8:"display:none",9:"<del>"},s={23:"</i>",24:"</u>",29:"</del>"};function l(e){if(!n.test(e))return e;var t=[],r=e.replace(/\033\[(\d+)*m/g,(function(e,r){var n=i[r];if(n)return~t.indexOf(r)?(t.pop(),"</span>"):(t.push(r),"<"===n[0]?n:'<span style="'+n+';">');var a=s[r];return a?(t.pop(),a):""})),a=t.length;return a>0&&(r+=Array(a+1).join("</span>")),r}function u(e){for(var t in i[0]="font-weight:normal;opacity:1;color:#"+e.reset[0]+";background:#"+e.reset[1],i[7]="color:#"+e.reset[1]+";background:#"+e.reset[0],i[90]="color:#"+e.darkgrey,o){var r=e[o[t]]||"000";i[t]="color:#"+r,t=parseInt(t),i[(t+10).toString()]="background:#"+r}}[0,21,22,27,28,39,49].forEach((function(e){s[e]="</span>"})),l.setColors=function(e){if("object"!=typeof e)throw new Error("`colors` parameter must be an Object.");var t={};for(var r in a){var n=e.hasOwnProperty(r)?e[r]:null;if(n){if("reset"===r){if("string"==typeof n&&(n=[n]),!Array.isArray(n)||0===n.length||n.some((function(e){return"string"!=typeof e})))throw new Error("The value of `"+r+"` property must be an Array and each item could only be a hex string, e.g.: FF0000");var o=a[r];n[0]||(n[0]=o[0]),1!==n.length&&n[1]||(n=[n[0]]).push(o[1]),n=n.slice(0,2)}else if("string"!=typeof n)throw new Error("The value of `"+r+"` property must be a hex string, e.g.: FF0000");t[r]=n}else t[r]=a[r]}u(t)},l.reset=function(){u(a)},l.tags={},Object.defineProperty?(Object.defineProperty(l.tags,"open",{get:function(){return i}}),Object.defineProperty(l.tags,"close",{get:function(){return s}})):(l.tags.open=i,l.tags.close=s),l.reset()},"./node_modules/events/events.js":function(e,t,r){"use strict";var n,a="object"==typeof Reflect?Reflect:null,o=a&&"function"==typeof a.apply?a.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};n=a&&"function"==typeof a.ownKeys?a.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var i=Number.isNaN||function(e){return e!=e};function s(){s.init.call(this)}e.exports=s,e.exports.once=function(e,t){return new Promise((function(r,n){function a(){void 0!==o&&e.removeListener("error",o),r([].slice.call(arguments))}var o;"error"!==t&&(o=function(r){e.removeListener(t,a),n(r)},e.once("error",o)),e.once(t,a)}))},s.EventEmitter=s,s.prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var l=10;function u(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function c(e){return void 0===e._maxListeners?s.defaultMaxListeners:e._maxListeners}function d(e,t,r,n){var a,o,i,s;if(u(r),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),o=e._events),i=o[t]),void 0===i)i=o[t]=r,++e._eventsCount;else if("function"==typeof i?i=o[t]=n?[r,i]:[i,r]:n?i.unshift(r):i.push(r),(a=c(e))>0&&i.length>a&&!i.warned){i.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+i.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=i.length,s=l,console&&console.warn&&console.warn(s)}return e}function p(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function f(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},a=p.bind(n);return a.listener=r,n.wrapFn=a,a}function h(e,t,r){var n=e._events;if(void 0===n)return[];var a=n[t];return void 0===a?[]:"function"==typeof a?r?[a.listener||a]:[a]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(a):g(a,a.length)}function m(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function g(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}Object.defineProperty(s,"defaultMaxListeners",{enumerable:!0,get:function(){return l},set:function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");l=e}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},s.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},s.prototype.getMaxListeners=function(){return c(this)},s.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var n="error"===e,a=this._events;if(void 0!==a)n=n&&void 0===a.error;else if(!n)return!1;if(n){var i;if(t.length>0&&(i=t[0]),i instanceof Error)throw i;var s=new Error("Unhandled error."+(i?" ("+i.message+")":""));throw s.context=i,s}var l=a[e];if(void 0===l)return!1;if("function"==typeof l)o(l,this,t);else{var u=l.length,c=g(l,u);for(r=0;r<u;++r)o(c[r],this,t)}return!0},s.prototype.addListener=function(e,t){return d(this,e,t,!1)},s.prototype.on=s.prototype.addListener,s.prototype.prependListener=function(e,t){return d(this,e,t,!0)},s.prototype.once=function(e,t){return u(t),this.on(e,f(this,e,t)),this},s.prototype.prependOnceListener=function(e,t){return u(t),this.prependListener(e,f(this,e,t)),this},s.prototype.removeListener=function(e,t){var r,n,a,o,i;if(u(t),void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(a=-1,o=r.length-1;o>=0;o--)if(r[o]===t||r[o].listener===t){i=r[o].listener,a=o;break}if(a<0)return this;0===a?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,a),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,i||t)}return this},s.prototype.off=s.prototype.removeListener,s.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var a,o=Object.keys(r);for(n=0;n<o.length;++n)"removeListener"!==(a=o[n])&&this.removeAllListeners(a);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},s.prototype.listeners=function(e){return h(this,e,!0)},s.prototype.rawListeners=function(e){return h(this,e,!1)},s.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):m.call(e,t)},s.prototype.listenerCount=m,s.prototype.eventNames=function(){return this._eventsCount>0?n(this._events):[]}},"./node_modules/html-entities/lib/html4-entities.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=["apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","Aelig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","quot","amp","lt","gt","OElig","oelig","Scaron","scaron","Yuml","circ","tilde","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","permil","lsaquo","rsaquo","euro","fnof","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","bull","hellip","prime","Prime","oline","frasl","weierp","image","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","prop","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams"],a=[39,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,34,38,60,62,338,339,352,353,376,710,732,8194,8195,8201,8204,8205,8206,8207,8211,8212,8216,8217,8218,8220,8221,8222,8224,8225,8240,8249,8250,8364,402,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,977,978,982,8226,8230,8242,8243,8254,8260,8472,8465,8476,8482,8501,8592,8593,8594,8595,8596,8629,8656,8657,8658,8659,8660,8704,8706,8707,8709,8711,8712,8713,8715,8719,8721,8722,8727,8730,8733,8734,8736,8743,8744,8745,8746,8747,8756,8764,8773,8776,8800,8801,8804,8805,8834,8835,8836,8838,8839,8853,8855,8869,8901,8968,8969,8970,8971,9001,9002,9674,9824,9827,9829,9830],o={},i={};!function(){for(var e=0,t=n.length;e<t;){var r=n[e],s=a[e];o[r]=String.fromCharCode(s),i[s]=r,e++}}();var s=function(){function e(){}return e.prototype.decode=function(e){return e&&e.length?e.replace(/&(#?[\w\d]+);?/g,(function(e,t){var r;if("#"===t.charAt(0)){var n="x"===t.charAt(1).toLowerCase()?parseInt(t.substr(2),16):parseInt(t.substr(1));isNaN(n)||n<-32768||n>65535||(r=String.fromCharCode(n))}else r=o[t];return r||e})):""},e.decode=function(t){return(new e).decode(t)},e.prototype.encode=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var a=i[e.charCodeAt(n)];r+=a?"&"+a+";":e.charAt(n),n++}return r},e.encode=function(t){return(new e).encode(t)},e.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var a=e.charCodeAt(n),o=i[a];r+=o?"&"+o+";":a<32||a>126?"&#"+a+";":e.charAt(n),n++}return r},e.encodeNonUTF=function(t){return(new e).encodeNonUTF(t)},e.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var a=e.charCodeAt(n);a<=255?r+=e[n++]:(r+="&#"+a+";",n++)}return r},e.encodeNonASCII=function(t){return(new e).encodeNonASCII(t)},e}();t.Html4Entities=s},"./node_modules/html-entities/lib/html5-entities.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=[["Aacute",[193]],["aacute",[225]],["Abreve",[258]],["abreve",[259]],["ac",[8766]],["acd",[8767]],["acE",[8766,819]],["Acirc",[194]],["acirc",[226]],["acute",[180]],["Acy",[1040]],["acy",[1072]],["AElig",[198]],["aelig",[230]],["af",[8289]],["Afr",[120068]],["afr",[120094]],["Agrave",[192]],["agrave",[224]],["alefsym",[8501]],["aleph",[8501]],["Alpha",[913]],["alpha",[945]],["Amacr",[256]],["amacr",[257]],["amalg",[10815]],["amp",[38]],["AMP",[38]],["andand",[10837]],["And",[10835]],["and",[8743]],["andd",[10844]],["andslope",[10840]],["andv",[10842]],["ang",[8736]],["ange",[10660]],["angle",[8736]],["angmsdaa",[10664]],["angmsdab",[10665]],["angmsdac",[10666]],["angmsdad",[10667]],["angmsdae",[10668]],["angmsdaf",[10669]],["angmsdag",[10670]],["angmsdah",[10671]],["angmsd",[8737]],["angrt",[8735]],["angrtvb",[8894]],["angrtvbd",[10653]],["angsph",[8738]],["angst",[197]],["angzarr",[9084]],["Aogon",[260]],["aogon",[261]],["Aopf",[120120]],["aopf",[120146]],["apacir",[10863]],["ap",[8776]],["apE",[10864]],["ape",[8778]],["apid",[8779]],["apos",[39]],["ApplyFunction",[8289]],["approx",[8776]],["approxeq",[8778]],["Aring",[197]],["aring",[229]],["Ascr",[119964]],["ascr",[119990]],["Assign",[8788]],["ast",[42]],["asymp",[8776]],["asympeq",[8781]],["Atilde",[195]],["atilde",[227]],["Auml",[196]],["auml",[228]],["awconint",[8755]],["awint",[10769]],["backcong",[8780]],["backepsilon",[1014]],["backprime",[8245]],["backsim",[8765]],["backsimeq",[8909]],["Backslash",[8726]],["Barv",[10983]],["barvee",[8893]],["barwed",[8965]],["Barwed",[8966]],["barwedge",[8965]],["bbrk",[9141]],["bbrktbrk",[9142]],["bcong",[8780]],["Bcy",[1041]],["bcy",[1073]],["bdquo",[8222]],["becaus",[8757]],["because",[8757]],["Because",[8757]],["bemptyv",[10672]],["bepsi",[1014]],["bernou",[8492]],["Bernoullis",[8492]],["Beta",[914]],["beta",[946]],["beth",[8502]],["between",[8812]],["Bfr",[120069]],["bfr",[120095]],["bigcap",[8898]],["bigcirc",[9711]],["bigcup",[8899]],["bigodot",[10752]],["bigoplus",[10753]],["bigotimes",[10754]],["bigsqcup",[10758]],["bigstar",[9733]],["bigtriangledown",[9661]],["bigtriangleup",[9651]],["biguplus",[10756]],["bigvee",[8897]],["bigwedge",[8896]],["bkarow",[10509]],["blacklozenge",[10731]],["blacksquare",[9642]],["blacktriangle",[9652]],["blacktriangledown",[9662]],["blacktriangleleft",[9666]],["blacktriangleright",[9656]],["blank",[9251]],["blk12",[9618]],["blk14",[9617]],["blk34",[9619]],["block",[9608]],["bne",[61,8421]],["bnequiv",[8801,8421]],["bNot",[10989]],["bnot",[8976]],["Bopf",[120121]],["bopf",[120147]],["bot",[8869]],["bottom",[8869]],["bowtie",[8904]],["boxbox",[10697]],["boxdl",[9488]],["boxdL",[9557]],["boxDl",[9558]],["boxDL",[9559]],["boxdr",[9484]],["boxdR",[9554]],["boxDr",[9555]],["boxDR",[9556]],["boxh",[9472]],["boxH",[9552]],["boxhd",[9516]],["boxHd",[9572]],["boxhD",[9573]],["boxHD",[9574]],["boxhu",[9524]],["boxHu",[9575]],["boxhU",[9576]],["boxHU",[9577]],["boxminus",[8863]],["boxplus",[8862]],["boxtimes",[8864]],["boxul",[9496]],["boxuL",[9563]],["boxUl",[9564]],["boxUL",[9565]],["boxur",[9492]],["boxuR",[9560]],["boxUr",[9561]],["boxUR",[9562]],["boxv",[9474]],["boxV",[9553]],["boxvh",[9532]],["boxvH",[9578]],["boxVh",[9579]],["boxVH",[9580]],["boxvl",[9508]],["boxvL",[9569]],["boxVl",[9570]],["boxVL",[9571]],["boxvr",[9500]],["boxvR",[9566]],["boxVr",[9567]],["boxVR",[9568]],["bprime",[8245]],["breve",[728]],["Breve",[728]],["brvbar",[166]],["bscr",[119991]],["Bscr",[8492]],["bsemi",[8271]],["bsim",[8765]],["bsime",[8909]],["bsolb",[10693]],["bsol",[92]],["bsolhsub",[10184]],["bull",[8226]],["bullet",[8226]],["bump",[8782]],["bumpE",[10926]],["bumpe",[8783]],["Bumpeq",[8782]],["bumpeq",[8783]],["Cacute",[262]],["cacute",[263]],["capand",[10820]],["capbrcup",[10825]],["capcap",[10827]],["cap",[8745]],["Cap",[8914]],["capcup",[10823]],["capdot",[10816]],["CapitalDifferentialD",[8517]],["caps",[8745,65024]],["caret",[8257]],["caron",[711]],["Cayleys",[8493]],["ccaps",[10829]],["Ccaron",[268]],["ccaron",[269]],["Ccedil",[199]],["ccedil",[231]],["Ccirc",[264]],["ccirc",[265]],["Cconint",[8752]],["ccups",[10828]],["ccupssm",[10832]],["Cdot",[266]],["cdot",[267]],["cedil",[184]],["Cedilla",[184]],["cemptyv",[10674]],["cent",[162]],["centerdot",[183]],["CenterDot",[183]],["cfr",[120096]],["Cfr",[8493]],["CHcy",[1063]],["chcy",[1095]],["check",[10003]],["checkmark",[10003]],["Chi",[935]],["chi",[967]],["circ",[710]],["circeq",[8791]],["circlearrowleft",[8634]],["circlearrowright",[8635]],["circledast",[8859]],["circledcirc",[8858]],["circleddash",[8861]],["CircleDot",[8857]],["circledR",[174]],["circledS",[9416]],["CircleMinus",[8854]],["CirclePlus",[8853]],["CircleTimes",[8855]],["cir",[9675]],["cirE",[10691]],["cire",[8791]],["cirfnint",[10768]],["cirmid",[10991]],["cirscir",[10690]],["ClockwiseContourIntegral",[8754]],["clubs",[9827]],["clubsuit",[9827]],["colon",[58]],["Colon",[8759]],["Colone",[10868]],["colone",[8788]],["coloneq",[8788]],["comma",[44]],["commat",[64]],["comp",[8705]],["compfn",[8728]],["complement",[8705]],["complexes",[8450]],["cong",[8773]],["congdot",[10861]],["Congruent",[8801]],["conint",[8750]],["Conint",[8751]],["ContourIntegral",[8750]],["copf",[120148]],["Copf",[8450]],["coprod",[8720]],["Coproduct",[8720]],["copy",[169]],["COPY",[169]],["copysr",[8471]],["CounterClockwiseContourIntegral",[8755]],["crarr",[8629]],["cross",[10007]],["Cross",[10799]],["Cscr",[119966]],["cscr",[119992]],["csub",[10959]],["csube",[10961]],["csup",[10960]],["csupe",[10962]],["ctdot",[8943]],["cudarrl",[10552]],["cudarrr",[10549]],["cuepr",[8926]],["cuesc",[8927]],["cularr",[8630]],["cularrp",[10557]],["cupbrcap",[10824]],["cupcap",[10822]],["CupCap",[8781]],["cup",[8746]],["Cup",[8915]],["cupcup",[10826]],["cupdot",[8845]],["cupor",[10821]],["cups",[8746,65024]],["curarr",[8631]],["curarrm",[10556]],["curlyeqprec",[8926]],["curlyeqsucc",[8927]],["curlyvee",[8910]],["curlywedge",[8911]],["curren",[164]],["curvearrowleft",[8630]],["curvearrowright",[8631]],["cuvee",[8910]],["cuwed",[8911]],["cwconint",[8754]],["cwint",[8753]],["cylcty",[9005]],["dagger",[8224]],["Dagger",[8225]],["daleth",[8504]],["darr",[8595]],["Darr",[8609]],["dArr",[8659]],["dash",[8208]],["Dashv",[10980]],["dashv",[8867]],["dbkarow",[10511]],["dblac",[733]],["Dcaron",[270]],["dcaron",[271]],["Dcy",[1044]],["dcy",[1076]],["ddagger",[8225]],["ddarr",[8650]],["DD",[8517]],["dd",[8518]],["DDotrahd",[10513]],["ddotseq",[10871]],["deg",[176]],["Del",[8711]],["Delta",[916]],["delta",[948]],["demptyv",[10673]],["dfisht",[10623]],["Dfr",[120071]],["dfr",[120097]],["dHar",[10597]],["dharl",[8643]],["dharr",[8642]],["DiacriticalAcute",[180]],["DiacriticalDot",[729]],["DiacriticalDoubleAcute",[733]],["DiacriticalGrave",[96]],["DiacriticalTilde",[732]],["diam",[8900]],["diamond",[8900]],["Diamond",[8900]],["diamondsuit",[9830]],["diams",[9830]],["die",[168]],["DifferentialD",[8518]],["digamma",[989]],["disin",[8946]],["div",[247]],["divide",[247]],["divideontimes",[8903]],["divonx",[8903]],["DJcy",[1026]],["djcy",[1106]],["dlcorn",[8990]],["dlcrop",[8973]],["dollar",[36]],["Dopf",[120123]],["dopf",[120149]],["Dot",[168]],["dot",[729]],["DotDot",[8412]],["doteq",[8784]],["doteqdot",[8785]],["DotEqual",[8784]],["dotminus",[8760]],["dotplus",[8724]],["dotsquare",[8865]],["doublebarwedge",[8966]],["DoubleContourIntegral",[8751]],["DoubleDot",[168]],["DoubleDownArrow",[8659]],["DoubleLeftArrow",[8656]],["DoubleLeftRightArrow",[8660]],["DoubleLeftTee",[10980]],["DoubleLongLeftArrow",[10232]],["DoubleLongLeftRightArrow",[10234]],["DoubleLongRightArrow",[10233]],["DoubleRightArrow",[8658]],["DoubleRightTee",[8872]],["DoubleUpArrow",[8657]],["DoubleUpDownArrow",[8661]],["DoubleVerticalBar",[8741]],["DownArrowBar",[10515]],["downarrow",[8595]],["DownArrow",[8595]],["Downarrow",[8659]],["DownArrowUpArrow",[8693]],["DownBreve",[785]],["downdownarrows",[8650]],["downharpoonleft",[8643]],["downharpoonright",[8642]],["DownLeftRightVector",[10576]],["DownLeftTeeVector",[10590]],["DownLeftVectorBar",[10582]],["DownLeftVector",[8637]],["DownRightTeeVector",[10591]],["DownRightVectorBar",[10583]],["DownRightVector",[8641]],["DownTeeArrow",[8615]],["DownTee",[8868]],["drbkarow",[10512]],["drcorn",[8991]],["drcrop",[8972]],["Dscr",[119967]],["dscr",[119993]],["DScy",[1029]],["dscy",[1109]],["dsol",[10742]],["Dstrok",[272]],["dstrok",[273]],["dtdot",[8945]],["dtri",[9663]],["dtrif",[9662]],["duarr",[8693]],["duhar",[10607]],["dwangle",[10662]],["DZcy",[1039]],["dzcy",[1119]],["dzigrarr",[10239]],["Eacute",[201]],["eacute",[233]],["easter",[10862]],["Ecaron",[282]],["ecaron",[283]],["Ecirc",[202]],["ecirc",[234]],["ecir",[8790]],["ecolon",[8789]],["Ecy",[1069]],["ecy",[1101]],["eDDot",[10871]],["Edot",[278]],["edot",[279]],["eDot",[8785]],["ee",[8519]],["efDot",[8786]],["Efr",[120072]],["efr",[120098]],["eg",[10906]],["Egrave",[200]],["egrave",[232]],["egs",[10902]],["egsdot",[10904]],["el",[10905]],["Element",[8712]],["elinters",[9191]],["ell",[8467]],["els",[10901]],["elsdot",[10903]],["Emacr",[274]],["emacr",[275]],["empty",[8709]],["emptyset",[8709]],["EmptySmallSquare",[9723]],["emptyv",[8709]],["EmptyVerySmallSquare",[9643]],["emsp13",[8196]],["emsp14",[8197]],["emsp",[8195]],["ENG",[330]],["eng",[331]],["ensp",[8194]],["Eogon",[280]],["eogon",[281]],["Eopf",[120124]],["eopf",[120150]],["epar",[8917]],["eparsl",[10723]],["eplus",[10865]],["epsi",[949]],["Epsilon",[917]],["epsilon",[949]],["epsiv",[1013]],["eqcirc",[8790]],["eqcolon",[8789]],["eqsim",[8770]],["eqslantgtr",[10902]],["eqslantless",[10901]],["Equal",[10869]],["equals",[61]],["EqualTilde",[8770]],["equest",[8799]],["Equilibrium",[8652]],["equiv",[8801]],["equivDD",[10872]],["eqvparsl",[10725]],["erarr",[10609]],["erDot",[8787]],["escr",[8495]],["Escr",[8496]],["esdot",[8784]],["Esim",[10867]],["esim",[8770]],["Eta",[919]],["eta",[951]],["ETH",[208]],["eth",[240]],["Euml",[203]],["euml",[235]],["euro",[8364]],["excl",[33]],["exist",[8707]],["Exists",[8707]],["expectation",[8496]],["exponentiale",[8519]],["ExponentialE",[8519]],["fallingdotseq",[8786]],["Fcy",[1060]],["fcy",[1092]],["female",[9792]],["ffilig",[64259]],["fflig",[64256]],["ffllig",[64260]],["Ffr",[120073]],["ffr",[120099]],["filig",[64257]],["FilledSmallSquare",[9724]],["FilledVerySmallSquare",[9642]],["fjlig",[102,106]],["flat",[9837]],["fllig",[64258]],["fltns",[9649]],["fnof",[402]],["Fopf",[120125]],["fopf",[120151]],["forall",[8704]],["ForAll",[8704]],["fork",[8916]],["forkv",[10969]],["Fouriertrf",[8497]],["fpartint",[10765]],["frac12",[189]],["frac13",[8531]],["frac14",[188]],["frac15",[8533]],["frac16",[8537]],["frac18",[8539]],["frac23",[8532]],["frac25",[8534]],["frac34",[190]],["frac35",[8535]],["frac38",[8540]],["frac45",[8536]],["frac56",[8538]],["frac58",[8541]],["frac78",[8542]],["frasl",[8260]],["frown",[8994]],["fscr",[119995]],["Fscr",[8497]],["gacute",[501]],["Gamma",[915]],["gamma",[947]],["Gammad",[988]],["gammad",[989]],["gap",[10886]],["Gbreve",[286]],["gbreve",[287]],["Gcedil",[290]],["Gcirc",[284]],["gcirc",[285]],["Gcy",[1043]],["gcy",[1075]],["Gdot",[288]],["gdot",[289]],["ge",[8805]],["gE",[8807]],["gEl",[10892]],["gel",[8923]],["geq",[8805]],["geqq",[8807]],["geqslant",[10878]],["gescc",[10921]],["ges",[10878]],["gesdot",[10880]],["gesdoto",[10882]],["gesdotol",[10884]],["gesl",[8923,65024]],["gesles",[10900]],["Gfr",[120074]],["gfr",[120100]],["gg",[8811]],["Gg",[8921]],["ggg",[8921]],["gimel",[8503]],["GJcy",[1027]],["gjcy",[1107]],["gla",[10917]],["gl",[8823]],["glE",[10898]],["glj",[10916]],["gnap",[10890]],["gnapprox",[10890]],["gne",[10888]],["gnE",[8809]],["gneq",[10888]],["gneqq",[8809]],["gnsim",[8935]],["Gopf",[120126]],["gopf",[120152]],["grave",[96]],["GreaterEqual",[8805]],["GreaterEqualLess",[8923]],["GreaterFullEqual",[8807]],["GreaterGreater",[10914]],["GreaterLess",[8823]],["GreaterSlantEqual",[10878]],["GreaterTilde",[8819]],["Gscr",[119970]],["gscr",[8458]],["gsim",[8819]],["gsime",[10894]],["gsiml",[10896]],["gtcc",[10919]],["gtcir",[10874]],["gt",[62]],["GT",[62]],["Gt",[8811]],["gtdot",[8919]],["gtlPar",[10645]],["gtquest",[10876]],["gtrapprox",[10886]],["gtrarr",[10616]],["gtrdot",[8919]],["gtreqless",[8923]],["gtreqqless",[10892]],["gtrless",[8823]],["gtrsim",[8819]],["gvertneqq",[8809,65024]],["gvnE",[8809,65024]],["Hacek",[711]],["hairsp",[8202]],["half",[189]],["hamilt",[8459]],["HARDcy",[1066]],["hardcy",[1098]],["harrcir",[10568]],["harr",[8596]],["hArr",[8660]],["harrw",[8621]],["Hat",[94]],["hbar",[8463]],["Hcirc",[292]],["hcirc",[293]],["hearts",[9829]],["heartsuit",[9829]],["hellip",[8230]],["hercon",[8889]],["hfr",[120101]],["Hfr",[8460]],["HilbertSpace",[8459]],["hksearow",[10533]],["hkswarow",[10534]],["hoarr",[8703]],["homtht",[8763]],["hookleftarrow",[8617]],["hookrightarrow",[8618]],["hopf",[120153]],["Hopf",[8461]],["horbar",[8213]],["HorizontalLine",[9472]],["hscr",[119997]],["Hscr",[8459]],["hslash",[8463]],["Hstrok",[294]],["hstrok",[295]],["HumpDownHump",[8782]],["HumpEqual",[8783]],["hybull",[8259]],["hyphen",[8208]],["Iacute",[205]],["iacute",[237]],["ic",[8291]],["Icirc",[206]],["icirc",[238]],["Icy",[1048]],["icy",[1080]],["Idot",[304]],["IEcy",[1045]],["iecy",[1077]],["iexcl",[161]],["iff",[8660]],["ifr",[120102]],["Ifr",[8465]],["Igrave",[204]],["igrave",[236]],["ii",[8520]],["iiiint",[10764]],["iiint",[8749]],["iinfin",[10716]],["iiota",[8489]],["IJlig",[306]],["ijlig",[307]],["Imacr",[298]],["imacr",[299]],["image",[8465]],["ImaginaryI",[8520]],["imagline",[8464]],["imagpart",[8465]],["imath",[305]],["Im",[8465]],["imof",[8887]],["imped",[437]],["Implies",[8658]],["incare",[8453]],["in",[8712]],["infin",[8734]],["infintie",[10717]],["inodot",[305]],["intcal",[8890]],["int",[8747]],["Int",[8748]],["integers",[8484]],["Integral",[8747]],["intercal",[8890]],["Intersection",[8898]],["intlarhk",[10775]],["intprod",[10812]],["InvisibleComma",[8291]],["InvisibleTimes",[8290]],["IOcy",[1025]],["iocy",[1105]],["Iogon",[302]],["iogon",[303]],["Iopf",[120128]],["iopf",[120154]],["Iota",[921]],["iota",[953]],["iprod",[10812]],["iquest",[191]],["iscr",[119998]],["Iscr",[8464]],["isin",[8712]],["isindot",[8949]],["isinE",[8953]],["isins",[8948]],["isinsv",[8947]],["isinv",[8712]],["it",[8290]],["Itilde",[296]],["itilde",[297]],["Iukcy",[1030]],["iukcy",[1110]],["Iuml",[207]],["iuml",[239]],["Jcirc",[308]],["jcirc",[309]],["Jcy",[1049]],["jcy",[1081]],["Jfr",[120077]],["jfr",[120103]],["jmath",[567]],["Jopf",[120129]],["jopf",[120155]],["Jscr",[119973]],["jscr",[119999]],["Jsercy",[1032]],["jsercy",[1112]],["Jukcy",[1028]],["jukcy",[1108]],["Kappa",[922]],["kappa",[954]],["kappav",[1008]],["Kcedil",[310]],["kcedil",[311]],["Kcy",[1050]],["kcy",[1082]],["Kfr",[120078]],["kfr",[120104]],["kgreen",[312]],["KHcy",[1061]],["khcy",[1093]],["KJcy",[1036]],["kjcy",[1116]],["Kopf",[120130]],["kopf",[120156]],["Kscr",[119974]],["kscr",[12e4]],["lAarr",[8666]],["Lacute",[313]],["lacute",[314]],["laemptyv",[10676]],["lagran",[8466]],["Lambda",[923]],["lambda",[955]],["lang",[10216]],["Lang",[10218]],["langd",[10641]],["langle",[10216]],["lap",[10885]],["Laplacetrf",[8466]],["laquo",[171]],["larrb",[8676]],["larrbfs",[10527]],["larr",[8592]],["Larr",[8606]],["lArr",[8656]],["larrfs",[10525]],["larrhk",[8617]],["larrlp",[8619]],["larrpl",[10553]],["larrsim",[10611]],["larrtl",[8610]],["latail",[10521]],["lAtail",[10523]],["lat",[10923]],["late",[10925]],["lates",[10925,65024]],["lbarr",[10508]],["lBarr",[10510]],["lbbrk",[10098]],["lbrace",[123]],["lbrack",[91]],["lbrke",[10635]],["lbrksld",[10639]],["lbrkslu",[10637]],["Lcaron",[317]],["lcaron",[318]],["Lcedil",[315]],["lcedil",[316]],["lceil",[8968]],["lcub",[123]],["Lcy",[1051]],["lcy",[1083]],["ldca",[10550]],["ldquo",[8220]],["ldquor",[8222]],["ldrdhar",[10599]],["ldrushar",[10571]],["ldsh",[8626]],["le",[8804]],["lE",[8806]],["LeftAngleBracket",[10216]],["LeftArrowBar",[8676]],["leftarrow",[8592]],["LeftArrow",[8592]],["Leftarrow",[8656]],["LeftArrowRightArrow",[8646]],["leftarrowtail",[8610]],["LeftCeiling",[8968]],["LeftDoubleBracket",[10214]],["LeftDownTeeVector",[10593]],["LeftDownVectorBar",[10585]],["LeftDownVector",[8643]],["LeftFloor",[8970]],["leftharpoondown",[8637]],["leftharpoonup",[8636]],["leftleftarrows",[8647]],["leftrightarrow",[8596]],["LeftRightArrow",[8596]],["Leftrightarrow",[8660]],["leftrightarrows",[8646]],["leftrightharpoons",[8651]],["leftrightsquigarrow",[8621]],["LeftRightVector",[10574]],["LeftTeeArrow",[8612]],["LeftTee",[8867]],["LeftTeeVector",[10586]],["leftthreetimes",[8907]],["LeftTriangleBar",[10703]],["LeftTriangle",[8882]],["LeftTriangleEqual",[8884]],["LeftUpDownVector",[10577]],["LeftUpTeeVector",[10592]],["LeftUpVectorBar",[10584]],["LeftUpVector",[8639]],["LeftVectorBar",[10578]],["LeftVector",[8636]],["lEg",[10891]],["leg",[8922]],["leq",[8804]],["leqq",[8806]],["leqslant",[10877]],["lescc",[10920]],["les",[10877]],["lesdot",[10879]],["lesdoto",[10881]],["lesdotor",[10883]],["lesg",[8922,65024]],["lesges",[10899]],["lessapprox",[10885]],["lessdot",[8918]],["lesseqgtr",[8922]],["lesseqqgtr",[10891]],["LessEqualGreater",[8922]],["LessFullEqual",[8806]],["LessGreater",[8822]],["lessgtr",[8822]],["LessLess",[10913]],["lesssim",[8818]],["LessSlantEqual",[10877]],["LessTilde",[8818]],["lfisht",[10620]],["lfloor",[8970]],["Lfr",[120079]],["lfr",[120105]],["lg",[8822]],["lgE",[10897]],["lHar",[10594]],["lhard",[8637]],["lharu",[8636]],["lharul",[10602]],["lhblk",[9604]],["LJcy",[1033]],["ljcy",[1113]],["llarr",[8647]],["ll",[8810]],["Ll",[8920]],["llcorner",[8990]],["Lleftarrow",[8666]],["llhard",[10603]],["lltri",[9722]],["Lmidot",[319]],["lmidot",[320]],["lmoustache",[9136]],["lmoust",[9136]],["lnap",[10889]],["lnapprox",[10889]],["lne",[10887]],["lnE",[8808]],["lneq",[10887]],["lneqq",[8808]],["lnsim",[8934]],["loang",[10220]],["loarr",[8701]],["lobrk",[10214]],["longleftarrow",[10229]],["LongLeftArrow",[10229]],["Longleftarrow",[10232]],["longleftrightarrow",[10231]],["LongLeftRightArrow",[10231]],["Longleftrightarrow",[10234]],["longmapsto",[10236]],["longrightarrow",[10230]],["LongRightArrow",[10230]],["Longrightarrow",[10233]],["looparrowleft",[8619]],["looparrowright",[8620]],["lopar",[10629]],["Lopf",[120131]],["lopf",[120157]],["loplus",[10797]],["lotimes",[10804]],["lowast",[8727]],["lowbar",[95]],["LowerLeftArrow",[8601]],["LowerRightArrow",[8600]],["loz",[9674]],["lozenge",[9674]],["lozf",[10731]],["lpar",[40]],["lparlt",[10643]],["lrarr",[8646]],["lrcorner",[8991]],["lrhar",[8651]],["lrhard",[10605]],["lrm",[8206]],["lrtri",[8895]],["lsaquo",[8249]],["lscr",[120001]],["Lscr",[8466]],["lsh",[8624]],["Lsh",[8624]],["lsim",[8818]],["lsime",[10893]],["lsimg",[10895]],["lsqb",[91]],["lsquo",[8216]],["lsquor",[8218]],["Lstrok",[321]],["lstrok",[322]],["ltcc",[10918]],["ltcir",[10873]],["lt",[60]],["LT",[60]],["Lt",[8810]],["ltdot",[8918]],["lthree",[8907]],["ltimes",[8905]],["ltlarr",[10614]],["ltquest",[10875]],["ltri",[9667]],["ltrie",[8884]],["ltrif",[9666]],["ltrPar",[10646]],["lurdshar",[10570]],["luruhar",[10598]],["lvertneqq",[8808,65024]],["lvnE",[8808,65024]],["macr",[175]],["male",[9794]],["malt",[10016]],["maltese",[10016]],["Map",[10501]],["map",[8614]],["mapsto",[8614]],["mapstodown",[8615]],["mapstoleft",[8612]],["mapstoup",[8613]],["marker",[9646]],["mcomma",[10793]],["Mcy",[1052]],["mcy",[1084]],["mdash",[8212]],["mDDot",[8762]],["measuredangle",[8737]],["MediumSpace",[8287]],["Mellintrf",[8499]],["Mfr",[120080]],["mfr",[120106]],["mho",[8487]],["micro",[181]],["midast",[42]],["midcir",[10992]],["mid",[8739]],["middot",[183]],["minusb",[8863]],["minus",[8722]],["minusd",[8760]],["minusdu",[10794]],["MinusPlus",[8723]],["mlcp",[10971]],["mldr",[8230]],["mnplus",[8723]],["models",[8871]],["Mopf",[120132]],["mopf",[120158]],["mp",[8723]],["mscr",[120002]],["Mscr",[8499]],["mstpos",[8766]],["Mu",[924]],["mu",[956]],["multimap",[8888]],["mumap",[8888]],["nabla",[8711]],["Nacute",[323]],["nacute",[324]],["nang",[8736,8402]],["nap",[8777]],["napE",[10864,824]],["napid",[8779,824]],["napos",[329]],["napprox",[8777]],["natural",[9838]],["naturals",[8469]],["natur",[9838]],["nbsp",[160]],["nbump",[8782,824]],["nbumpe",[8783,824]],["ncap",[10819]],["Ncaron",[327]],["ncaron",[328]],["Ncedil",[325]],["ncedil",[326]],["ncong",[8775]],["ncongdot",[10861,824]],["ncup",[10818]],["Ncy",[1053]],["ncy",[1085]],["ndash",[8211]],["nearhk",[10532]],["nearr",[8599]],["neArr",[8663]],["nearrow",[8599]],["ne",[8800]],["nedot",[8784,824]],["NegativeMediumSpace",[8203]],["NegativeThickSpace",[8203]],["NegativeThinSpace",[8203]],["NegativeVeryThinSpace",[8203]],["nequiv",[8802]],["nesear",[10536]],["nesim",[8770,824]],["NestedGreaterGreater",[8811]],["NestedLessLess",[8810]],["nexist",[8708]],["nexists",[8708]],["Nfr",[120081]],["nfr",[120107]],["ngE",[8807,824]],["nge",[8817]],["ngeq",[8817]],["ngeqq",[8807,824]],["ngeqslant",[10878,824]],["nges",[10878,824]],["nGg",[8921,824]],["ngsim",[8821]],["nGt",[8811,8402]],["ngt",[8815]],["ngtr",[8815]],["nGtv",[8811,824]],["nharr",[8622]],["nhArr",[8654]],["nhpar",[10994]],["ni",[8715]],["nis",[8956]],["nisd",[8954]],["niv",[8715]],["NJcy",[1034]],["njcy",[1114]],["nlarr",[8602]],["nlArr",[8653]],["nldr",[8229]],["nlE",[8806,824]],["nle",[8816]],["nleftarrow",[8602]],["nLeftarrow",[8653]],["nleftrightarrow",[8622]],["nLeftrightarrow",[8654]],["nleq",[8816]],["nleqq",[8806,824]],["nleqslant",[10877,824]],["nles",[10877,824]],["nless",[8814]],["nLl",[8920,824]],["nlsim",[8820]],["nLt",[8810,8402]],["nlt",[8814]],["nltri",[8938]],["nltrie",[8940]],["nLtv",[8810,824]],["nmid",[8740]],["NoBreak",[8288]],["NonBreakingSpace",[160]],["nopf",[120159]],["Nopf",[8469]],["Not",[10988]],["not",[172]],["NotCongruent",[8802]],["NotCupCap",[8813]],["NotDoubleVerticalBar",[8742]],["NotElement",[8713]],["NotEqual",[8800]],["NotEqualTilde",[8770,824]],["NotExists",[8708]],["NotGreater",[8815]],["NotGreaterEqual",[8817]],["NotGreaterFullEqual",[8807,824]],["NotGreaterGreater",[8811,824]],["NotGreaterLess",[8825]],["NotGreaterSlantEqual",[10878,824]],["NotGreaterTilde",[8821]],["NotHumpDownHump",[8782,824]],["NotHumpEqual",[8783,824]],["notin",[8713]],["notindot",[8949,824]],["notinE",[8953,824]],["notinva",[8713]],["notinvb",[8951]],["notinvc",[8950]],["NotLeftTriangleBar",[10703,824]],["NotLeftTriangle",[8938]],["NotLeftTriangleEqual",[8940]],["NotLess",[8814]],["NotLessEqual",[8816]],["NotLessGreater",[8824]],["NotLessLess",[8810,824]],["NotLessSlantEqual",[10877,824]],["NotLessTilde",[8820]],["NotNestedGreaterGreater",[10914,824]],["NotNestedLessLess",[10913,824]],["notni",[8716]],["notniva",[8716]],["notnivb",[8958]],["notnivc",[8957]],["NotPrecedes",[8832]],["NotPrecedesEqual",[10927,824]],["NotPrecedesSlantEqual",[8928]],["NotReverseElement",[8716]],["NotRightTriangleBar",[10704,824]],["NotRightTriangle",[8939]],["NotRightTriangleEqual",[8941]],["NotSquareSubset",[8847,824]],["NotSquareSubsetEqual",[8930]],["NotSquareSuperset",[8848,824]],["NotSquareSupersetEqual",[8931]],["NotSubset",[8834,8402]],["NotSubsetEqual",[8840]],["NotSucceeds",[8833]],["NotSucceedsEqual",[10928,824]],["NotSucceedsSlantEqual",[8929]],["NotSucceedsTilde",[8831,824]],["NotSuperset",[8835,8402]],["NotSupersetEqual",[8841]],["NotTilde",[8769]],["NotTildeEqual",[8772]],["NotTildeFullEqual",[8775]],["NotTildeTilde",[8777]],["NotVerticalBar",[8740]],["nparallel",[8742]],["npar",[8742]],["nparsl",[11005,8421]],["npart",[8706,824]],["npolint",[10772]],["npr",[8832]],["nprcue",[8928]],["nprec",[8832]],["npreceq",[10927,824]],["npre",[10927,824]],["nrarrc",[10547,824]],["nrarr",[8603]],["nrArr",[8655]],["nrarrw",[8605,824]],["nrightarrow",[8603]],["nRightarrow",[8655]],["nrtri",[8939]],["nrtrie",[8941]],["nsc",[8833]],["nsccue",[8929]],["nsce",[10928,824]],["Nscr",[119977]],["nscr",[120003]],["nshortmid",[8740]],["nshortparallel",[8742]],["nsim",[8769]],["nsime",[8772]],["nsimeq",[8772]],["nsmid",[8740]],["nspar",[8742]],["nsqsube",[8930]],["nsqsupe",[8931]],["nsub",[8836]],["nsubE",[10949,824]],["nsube",[8840]],["nsubset",[8834,8402]],["nsubseteq",[8840]],["nsubseteqq",[10949,824]],["nsucc",[8833]],["nsucceq",[10928,824]],["nsup",[8837]],["nsupE",[10950,824]],["nsupe",[8841]],["nsupset",[8835,8402]],["nsupseteq",[8841]],["nsupseteqq",[10950,824]],["ntgl",[8825]],["Ntilde",[209]],["ntilde",[241]],["ntlg",[8824]],["ntriangleleft",[8938]],["ntrianglelefteq",[8940]],["ntriangleright",[8939]],["ntrianglerighteq",[8941]],["Nu",[925]],["nu",[957]],["num",[35]],["numero",[8470]],["numsp",[8199]],["nvap",[8781,8402]],["nvdash",[8876]],["nvDash",[8877]],["nVdash",[8878]],["nVDash",[8879]],["nvge",[8805,8402]],["nvgt",[62,8402]],["nvHarr",[10500]],["nvinfin",[10718]],["nvlArr",[10498]],["nvle",[8804,8402]],["nvlt",[60,8402]],["nvltrie",[8884,8402]],["nvrArr",[10499]],["nvrtrie",[8885,8402]],["nvsim",[8764,8402]],["nwarhk",[10531]],["nwarr",[8598]],["nwArr",[8662]],["nwarrow",[8598]],["nwnear",[10535]],["Oacute",[211]],["oacute",[243]],["oast",[8859]],["Ocirc",[212]],["ocirc",[244]],["ocir",[8858]],["Ocy",[1054]],["ocy",[1086]],["odash",[8861]],["Odblac",[336]],["odblac",[337]],["odiv",[10808]],["odot",[8857]],["odsold",[10684]],["OElig",[338]],["oelig",[339]],["ofcir",[10687]],["Ofr",[120082]],["ofr",[120108]],["ogon",[731]],["Ograve",[210]],["ograve",[242]],["ogt",[10689]],["ohbar",[10677]],["ohm",[937]],["oint",[8750]],["olarr",[8634]],["olcir",[10686]],["olcross",[10683]],["oline",[8254]],["olt",[10688]],["Omacr",[332]],["omacr",[333]],["Omega",[937]],["omega",[969]],["Omicron",[927]],["omicron",[959]],["omid",[10678]],["ominus",[8854]],["Oopf",[120134]],["oopf",[120160]],["opar",[10679]],["OpenCurlyDoubleQuote",[8220]],["OpenCurlyQuote",[8216]],["operp",[10681]],["oplus",[8853]],["orarr",[8635]],["Or",[10836]],["or",[8744]],["ord",[10845]],["order",[8500]],["orderof",[8500]],["ordf",[170]],["ordm",[186]],["origof",[8886]],["oror",[10838]],["orslope",[10839]],["orv",[10843]],["oS",[9416]],["Oscr",[119978]],["oscr",[8500]],["Oslash",[216]],["oslash",[248]],["osol",[8856]],["Otilde",[213]],["otilde",[245]],["otimesas",[10806]],["Otimes",[10807]],["otimes",[8855]],["Ouml",[214]],["ouml",[246]],["ovbar",[9021]],["OverBar",[8254]],["OverBrace",[9182]],["OverBracket",[9140]],["OverParenthesis",[9180]],["para",[182]],["parallel",[8741]],["par",[8741]],["parsim",[10995]],["parsl",[11005]],["part",[8706]],["PartialD",[8706]],["Pcy",[1055]],["pcy",[1087]],["percnt",[37]],["period",[46]],["permil",[8240]],["perp",[8869]],["pertenk",[8241]],["Pfr",[120083]],["pfr",[120109]],["Phi",[934]],["phi",[966]],["phiv",[981]],["phmmat",[8499]],["phone",[9742]],["Pi",[928]],["pi",[960]],["pitchfork",[8916]],["piv",[982]],["planck",[8463]],["planckh",[8462]],["plankv",[8463]],["plusacir",[10787]],["plusb",[8862]],["pluscir",[10786]],["plus",[43]],["plusdo",[8724]],["plusdu",[10789]],["pluse",[10866]],["PlusMinus",[177]],["plusmn",[177]],["plussim",[10790]],["plustwo",[10791]],["pm",[177]],["Poincareplane",[8460]],["pointint",[10773]],["popf",[120161]],["Popf",[8473]],["pound",[163]],["prap",[10935]],["Pr",[10939]],["pr",[8826]],["prcue",[8828]],["precapprox",[10935]],["prec",[8826]],["preccurlyeq",[8828]],["Precedes",[8826]],["PrecedesEqual",[10927]],["PrecedesSlantEqual",[8828]],["PrecedesTilde",[8830]],["preceq",[10927]],["precnapprox",[10937]],["precneqq",[10933]],["precnsim",[8936]],["pre",[10927]],["prE",[10931]],["precsim",[8830]],["prime",[8242]],["Prime",[8243]],["primes",[8473]],["prnap",[10937]],["prnE",[10933]],["prnsim",[8936]],["prod",[8719]],["Product",[8719]],["profalar",[9006]],["profline",[8978]],["profsurf",[8979]],["prop",[8733]],["Proportional",[8733]],["Proportion",[8759]],["propto",[8733]],["prsim",[8830]],["prurel",[8880]],["Pscr",[119979]],["pscr",[120005]],["Psi",[936]],["psi",[968]],["puncsp",[8200]],["Qfr",[120084]],["qfr",[120110]],["qint",[10764]],["qopf",[120162]],["Qopf",[8474]],["qprime",[8279]],["Qscr",[119980]],["qscr",[120006]],["quaternions",[8461]],["quatint",[10774]],["quest",[63]],["questeq",[8799]],["quot",[34]],["QUOT",[34]],["rAarr",[8667]],["race",[8765,817]],["Racute",[340]],["racute",[341]],["radic",[8730]],["raemptyv",[10675]],["rang",[10217]],["Rang",[10219]],["rangd",[10642]],["range",[10661]],["rangle",[10217]],["raquo",[187]],["rarrap",[10613]],["rarrb",[8677]],["rarrbfs",[10528]],["rarrc",[10547]],["rarr",[8594]],["Rarr",[8608]],["rArr",[8658]],["rarrfs",[10526]],["rarrhk",[8618]],["rarrlp",[8620]],["rarrpl",[10565]],["rarrsim",[10612]],["Rarrtl",[10518]],["rarrtl",[8611]],["rarrw",[8605]],["ratail",[10522]],["rAtail",[10524]],["ratio",[8758]],["rationals",[8474]],["rbarr",[10509]],["rBarr",[10511]],["RBarr",[10512]],["rbbrk",[10099]],["rbrace",[125]],["rbrack",[93]],["rbrke",[10636]],["rbrksld",[10638]],["rbrkslu",[10640]],["Rcaron",[344]],["rcaron",[345]],["Rcedil",[342]],["rcedil",[343]],["rceil",[8969]],["rcub",[125]],["Rcy",[1056]],["rcy",[1088]],["rdca",[10551]],["rdldhar",[10601]],["rdquo",[8221]],["rdquor",[8221]],["CloseCurlyDoubleQuote",[8221]],["rdsh",[8627]],["real",[8476]],["realine",[8475]],["realpart",[8476]],["reals",[8477]],["Re",[8476]],["rect",[9645]],["reg",[174]],["REG",[174]],["ReverseElement",[8715]],["ReverseEquilibrium",[8651]],["ReverseUpEquilibrium",[10607]],["rfisht",[10621]],["rfloor",[8971]],["rfr",[120111]],["Rfr",[8476]],["rHar",[10596]],["rhard",[8641]],["rharu",[8640]],["rharul",[10604]],["Rho",[929]],["rho",[961]],["rhov",[1009]],["RightAngleBracket",[10217]],["RightArrowBar",[8677]],["rightarrow",[8594]],["RightArrow",[8594]],["Rightarrow",[8658]],["RightArrowLeftArrow",[8644]],["rightarrowtail",[8611]],["RightCeiling",[8969]],["RightDoubleBracket",[10215]],["RightDownTeeVector",[10589]],["RightDownVectorBar",[10581]],["RightDownVector",[8642]],["RightFloor",[8971]],["rightharpoondown",[8641]],["rightharpoonup",[8640]],["rightleftarrows",[8644]],["rightleftharpoons",[8652]],["rightrightarrows",[8649]],["rightsquigarrow",[8605]],["RightTeeArrow",[8614]],["RightTee",[8866]],["RightTeeVector",[10587]],["rightthreetimes",[8908]],["RightTriangleBar",[10704]],["RightTriangle",[8883]],["RightTriangleEqual",[8885]],["RightUpDownVector",[10575]],["RightUpTeeVector",[10588]],["RightUpVectorBar",[10580]],["RightUpVector",[8638]],["RightVectorBar",[10579]],["RightVector",[8640]],["ring",[730]],["risingdotseq",[8787]],["rlarr",[8644]],["rlhar",[8652]],["rlm",[8207]],["rmoustache",[9137]],["rmoust",[9137]],["rnmid",[10990]],["roang",[10221]],["roarr",[8702]],["robrk",[10215]],["ropar",[10630]],["ropf",[120163]],["Ropf",[8477]],["roplus",[10798]],["rotimes",[10805]],["RoundImplies",[10608]],["rpar",[41]],["rpargt",[10644]],["rppolint",[10770]],["rrarr",[8649]],["Rrightarrow",[8667]],["rsaquo",[8250]],["rscr",[120007]],["Rscr",[8475]],["rsh",[8625]],["Rsh",[8625]],["rsqb",[93]],["rsquo",[8217]],["rsquor",[8217]],["CloseCurlyQuote",[8217]],["rthree",[8908]],["rtimes",[8906]],["rtri",[9657]],["rtrie",[8885]],["rtrif",[9656]],["rtriltri",[10702]],["RuleDelayed",[10740]],["ruluhar",[10600]],["rx",[8478]],["Sacute",[346]],["sacute",[347]],["sbquo",[8218]],["scap",[10936]],["Scaron",[352]],["scaron",[353]],["Sc",[10940]],["sc",[8827]],["sccue",[8829]],["sce",[10928]],["scE",[10932]],["Scedil",[350]],["scedil",[351]],["Scirc",[348]],["scirc",[349]],["scnap",[10938]],["scnE",[10934]],["scnsim",[8937]],["scpolint",[10771]],["scsim",[8831]],["Scy",[1057]],["scy",[1089]],["sdotb",[8865]],["sdot",[8901]],["sdote",[10854]],["searhk",[10533]],["searr",[8600]],["seArr",[8664]],["searrow",[8600]],["sect",[167]],["semi",[59]],["seswar",[10537]],["setminus",[8726]],["setmn",[8726]],["sext",[10038]],["Sfr",[120086]],["sfr",[120112]],["sfrown",[8994]],["sharp",[9839]],["SHCHcy",[1065]],["shchcy",[1097]],["SHcy",[1064]],["shcy",[1096]],["ShortDownArrow",[8595]],["ShortLeftArrow",[8592]],["shortmid",[8739]],["shortparallel",[8741]],["ShortRightArrow",[8594]],["ShortUpArrow",[8593]],["shy",[173]],["Sigma",[931]],["sigma",[963]],["sigmaf",[962]],["sigmav",[962]],["sim",[8764]],["simdot",[10858]],["sime",[8771]],["simeq",[8771]],["simg",[10910]],["simgE",[10912]],["siml",[10909]],["simlE",[10911]],["simne",[8774]],["simplus",[10788]],["simrarr",[10610]],["slarr",[8592]],["SmallCircle",[8728]],["smallsetminus",[8726]],["smashp",[10803]],["smeparsl",[10724]],["smid",[8739]],["smile",[8995]],["smt",[10922]],["smte",[10924]],["smtes",[10924,65024]],["SOFTcy",[1068]],["softcy",[1100]],["solbar",[9023]],["solb",[10692]],["sol",[47]],["Sopf",[120138]],["sopf",[120164]],["spades",[9824]],["spadesuit",[9824]],["spar",[8741]],["sqcap",[8851]],["sqcaps",[8851,65024]],["sqcup",[8852]],["sqcups",[8852,65024]],["Sqrt",[8730]],["sqsub",[8847]],["sqsube",[8849]],["sqsubset",[8847]],["sqsubseteq",[8849]],["sqsup",[8848]],["sqsupe",[8850]],["sqsupset",[8848]],["sqsupseteq",[8850]],["square",[9633]],["Square",[9633]],["SquareIntersection",[8851]],["SquareSubset",[8847]],["SquareSubsetEqual",[8849]],["SquareSuperset",[8848]],["SquareSupersetEqual",[8850]],["SquareUnion",[8852]],["squarf",[9642]],["squ",[9633]],["squf",[9642]],["srarr",[8594]],["Sscr",[119982]],["sscr",[120008]],["ssetmn",[8726]],["ssmile",[8995]],["sstarf",[8902]],["Star",[8902]],["star",[9734]],["starf",[9733]],["straightepsilon",[1013]],["straightphi",[981]],["strns",[175]],["sub",[8834]],["Sub",[8912]],["subdot",[10941]],["subE",[10949]],["sube",[8838]],["subedot",[10947]],["submult",[10945]],["subnE",[10955]],["subne",[8842]],["subplus",[10943]],["subrarr",[10617]],["subset",[8834]],["Subset",[8912]],["subseteq",[8838]],["subseteqq",[10949]],["SubsetEqual",[8838]],["subsetneq",[8842]],["subsetneqq",[10955]],["subsim",[10951]],["subsub",[10965]],["subsup",[10963]],["succapprox",[10936]],["succ",[8827]],["succcurlyeq",[8829]],["Succeeds",[8827]],["SucceedsEqual",[10928]],["SucceedsSlantEqual",[8829]],["SucceedsTilde",[8831]],["succeq",[10928]],["succnapprox",[10938]],["succneqq",[10934]],["succnsim",[8937]],["succsim",[8831]],["SuchThat",[8715]],["sum",[8721]],["Sum",[8721]],["sung",[9834]],["sup1",[185]],["sup2",[178]],["sup3",[179]],["sup",[8835]],["Sup",[8913]],["supdot",[10942]],["supdsub",[10968]],["supE",[10950]],["supe",[8839]],["supedot",[10948]],["Superset",[8835]],["SupersetEqual",[8839]],["suphsol",[10185]],["suphsub",[10967]],["suplarr",[10619]],["supmult",[10946]],["supnE",[10956]],["supne",[8843]],["supplus",[10944]],["supset",[8835]],["Supset",[8913]],["supseteq",[8839]],["supseteqq",[10950]],["supsetneq",[8843]],["supsetneqq",[10956]],["supsim",[10952]],["supsub",[10964]],["supsup",[10966]],["swarhk",[10534]],["swarr",[8601]],["swArr",[8665]],["swarrow",[8601]],["swnwar",[10538]],["szlig",[223]],["Tab",[9]],["target",[8982]],["Tau",[932]],["tau",[964]],["tbrk",[9140]],["Tcaron",[356]],["tcaron",[357]],["Tcedil",[354]],["tcedil",[355]],["Tcy",[1058]],["tcy",[1090]],["tdot",[8411]],["telrec",[8981]],["Tfr",[120087]],["tfr",[120113]],["there4",[8756]],["therefore",[8756]],["Therefore",[8756]],["Theta",[920]],["theta",[952]],["thetasym",[977]],["thetav",[977]],["thickapprox",[8776]],["thicksim",[8764]],["ThickSpace",[8287,8202]],["ThinSpace",[8201]],["thinsp",[8201]],["thkap",[8776]],["thksim",[8764]],["THORN",[222]],["thorn",[254]],["tilde",[732]],["Tilde",[8764]],["TildeEqual",[8771]],["TildeFullEqual",[8773]],["TildeTilde",[8776]],["timesbar",[10801]],["timesb",[8864]],["times",[215]],["timesd",[10800]],["tint",[8749]],["toea",[10536]],["topbot",[9014]],["topcir",[10993]],["top",[8868]],["Topf",[120139]],["topf",[120165]],["topfork",[10970]],["tosa",[10537]],["tprime",[8244]],["trade",[8482]],["TRADE",[8482]],["triangle",[9653]],["triangledown",[9663]],["triangleleft",[9667]],["trianglelefteq",[8884]],["triangleq",[8796]],["triangleright",[9657]],["trianglerighteq",[8885]],["tridot",[9708]],["trie",[8796]],["triminus",[10810]],["TripleDot",[8411]],["triplus",[10809]],["trisb",[10701]],["tritime",[10811]],["trpezium",[9186]],["Tscr",[119983]],["tscr",[120009]],["TScy",[1062]],["tscy",[1094]],["TSHcy",[1035]],["tshcy",[1115]],["Tstrok",[358]],["tstrok",[359]],["twixt",[8812]],["twoheadleftarrow",[8606]],["twoheadrightarrow",[8608]],["Uacute",[218]],["uacute",[250]],["uarr",[8593]],["Uarr",[8607]],["uArr",[8657]],["Uarrocir",[10569]],["Ubrcy",[1038]],["ubrcy",[1118]],["Ubreve",[364]],["ubreve",[365]],["Ucirc",[219]],["ucirc",[251]],["Ucy",[1059]],["ucy",[1091]],["udarr",[8645]],["Udblac",[368]],["udblac",[369]],["udhar",[10606]],["ufisht",[10622]],["Ufr",[120088]],["ufr",[120114]],["Ugrave",[217]],["ugrave",[249]],["uHar",[10595]],["uharl",[8639]],["uharr",[8638]],["uhblk",[9600]],["ulcorn",[8988]],["ulcorner",[8988]],["ulcrop",[8975]],["ultri",[9720]],["Umacr",[362]],["umacr",[363]],["uml",[168]],["UnderBar",[95]],["UnderBrace",[9183]],["UnderBracket",[9141]],["UnderParenthesis",[9181]],["Union",[8899]],["UnionPlus",[8846]],["Uogon",[370]],["uogon",[371]],["Uopf",[120140]],["uopf",[120166]],["UpArrowBar",[10514]],["uparrow",[8593]],["UpArrow",[8593]],["Uparrow",[8657]],["UpArrowDownArrow",[8645]],["updownarrow",[8597]],["UpDownArrow",[8597]],["Updownarrow",[8661]],["UpEquilibrium",[10606]],["upharpoonleft",[8639]],["upharpoonright",[8638]],["uplus",[8846]],["UpperLeftArrow",[8598]],["UpperRightArrow",[8599]],["upsi",[965]],["Upsi",[978]],["upsih",[978]],["Upsilon",[933]],["upsilon",[965]],["UpTeeArrow",[8613]],["UpTee",[8869]],["upuparrows",[8648]],["urcorn",[8989]],["urcorner",[8989]],["urcrop",[8974]],["Uring",[366]],["uring",[367]],["urtri",[9721]],["Uscr",[119984]],["uscr",[120010]],["utdot",[8944]],["Utilde",[360]],["utilde",[361]],["utri",[9653]],["utrif",[9652]],["uuarr",[8648]],["Uuml",[220]],["uuml",[252]],["uwangle",[10663]],["vangrt",[10652]],["varepsilon",[1013]],["varkappa",[1008]],["varnothing",[8709]],["varphi",[981]],["varpi",[982]],["varpropto",[8733]],["varr",[8597]],["vArr",[8661]],["varrho",[1009]],["varsigma",[962]],["varsubsetneq",[8842,65024]],["varsubsetneqq",[10955,65024]],["varsupsetneq",[8843,65024]],["varsupsetneqq",[10956,65024]],["vartheta",[977]],["vartriangleleft",[8882]],["vartriangleright",[8883]],["vBar",[10984]],["Vbar",[10987]],["vBarv",[10985]],["Vcy",[1042]],["vcy",[1074]],["vdash",[8866]],["vDash",[8872]],["Vdash",[8873]],["VDash",[8875]],["Vdashl",[10982]],["veebar",[8891]],["vee",[8744]],["Vee",[8897]],["veeeq",[8794]],["vellip",[8942]],["verbar",[124]],["Verbar",[8214]],["vert",[124]],["Vert",[8214]],["VerticalBar",[8739]],["VerticalLine",[124]],["VerticalSeparator",[10072]],["VerticalTilde",[8768]],["VeryThinSpace",[8202]],["Vfr",[120089]],["vfr",[120115]],["vltri",[8882]],["vnsub",[8834,8402]],["vnsup",[8835,8402]],["Vopf",[120141]],["vopf",[120167]],["vprop",[8733]],["vrtri",[8883]],["Vscr",[119985]],["vscr",[120011]],["vsubnE",[10955,65024]],["vsubne",[8842,65024]],["vsupnE",[10956,65024]],["vsupne",[8843,65024]],["Vvdash",[8874]],["vzigzag",[10650]],["Wcirc",[372]],["wcirc",[373]],["wedbar",[10847]],["wedge",[8743]],["Wedge",[8896]],["wedgeq",[8793]],["weierp",[8472]],["Wfr",[120090]],["wfr",[120116]],["Wopf",[120142]],["wopf",[120168]],["wp",[8472]],["wr",[8768]],["wreath",[8768]],["Wscr",[119986]],["wscr",[120012]],["xcap",[8898]],["xcirc",[9711]],["xcup",[8899]],["xdtri",[9661]],["Xfr",[120091]],["xfr",[120117]],["xharr",[10231]],["xhArr",[10234]],["Xi",[926]],["xi",[958]],["xlarr",[10229]],["xlArr",[10232]],["xmap",[10236]],["xnis",[8955]],["xodot",[10752]],["Xopf",[120143]],["xopf",[120169]],["xoplus",[10753]],["xotime",[10754]],["xrarr",[10230]],["xrArr",[10233]],["Xscr",[119987]],["xscr",[120013]],["xsqcup",[10758]],["xuplus",[10756]],["xutri",[9651]],["xvee",[8897]],["xwedge",[8896]],["Yacute",[221]],["yacute",[253]],["YAcy",[1071]],["yacy",[1103]],["Ycirc",[374]],["ycirc",[375]],["Ycy",[1067]],["ycy",[1099]],["yen",[165]],["Yfr",[120092]],["yfr",[120118]],["YIcy",[1031]],["yicy",[1111]],["Yopf",[120144]],["yopf",[120170]],["Yscr",[119988]],["yscr",[120014]],["YUcy",[1070]],["yucy",[1102]],["yuml",[255]],["Yuml",[376]],["Zacute",[377]],["zacute",[378]],["Zcaron",[381]],["zcaron",[382]],["Zcy",[1047]],["zcy",[1079]],["Zdot",[379]],["zdot",[380]],["zeetrf",[8488]],["ZeroWidthSpace",[8203]],["Zeta",[918]],["zeta",[950]],["zfr",[120119]],["Zfr",[8488]],["ZHcy",[1046]],["zhcy",[1078]],["zigrarr",[8669]],["zopf",[120171]],["Zopf",[8484]],["Zscr",[119989]],["zscr",[120015]],["zwj",[8205]],["zwnj",[8204]]],a={},o={};!function(e,t){var r=n.length;for(;r--;){var a=n[r],o=a[0],i=a[1],s=i[0],l=s<32||s>126||62===s||60===s||38===s||34===s||39===s,u=void 0;if(l&&(u=t[s]=t[s]||{}),i[1]){var c=i[1];e[o]=String.fromCharCode(s)+String.fromCharCode(c),l&&(u[c]=o)}else e[o]=String.fromCharCode(s),l&&(u[""]=o)}}(a,o);var i=function(){function e(){}return e.prototype.decode=function(e){return e&&e.length?e.replace(/&(#?[\w\d]+);?/g,(function(e,t){var r;if("#"===t.charAt(0)){var n="x"===t.charAt(1)?parseInt(t.substr(2).toLowerCase(),16):parseInt(t.substr(1));isNaN(n)||n<-32768||n>65535||(r=String.fromCharCode(n))}else r=a[t];return r||e})):""},e.decode=function(t){return(new e).decode(t)},e.prototype.encode=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var a=o[e.charCodeAt(n)];if(a){var i=a[e.charCodeAt(n+1)];if(i?n++:i=a[""],i){r+="&"+i+";",n++;continue}}r+=e.charAt(n),n++}return r},e.encode=function(t){return(new e).encode(t)},e.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var a=e.charCodeAt(n),i=o[a];if(i){var s=i[e.charCodeAt(n+1)];if(s?n++:s=i[""],s){r+="&"+s+";",n++;continue}}r+=a<32||a>126?"&#"+a+";":e.charAt(n),n++}return r},e.encodeNonUTF=function(t){return(new e).encodeNonUTF(t)},e.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var a=e.charCodeAt(n);a<=255?r+=e[n++]:(r+="&#"+a+";",n++)}return r},e.encodeNonASCII=function(t){return(new e).encodeNonASCII(t)},e}();t.Html5Entities=i},"./node_modules/html-entities/lib/index.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r("./node_modules/html-entities/lib/xml-entities.js");t.XmlEntities=n.XmlEntities;var a=r("./node_modules/html-entities/lib/html4-entities.js");t.Html4Entities=a.Html4Entities;var o=r("./node_modules/html-entities/lib/html5-entities.js");t.Html5Entities=o.Html5Entities,t.AllHtmlEntities=o.Html5Entities},"./node_modules/html-entities/lib/xml-entities.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n={"&lt":"<","&gt":">","&quot":'"',"&apos":"'","&amp":"&","&lt;":"<","&gt;":">","&quot;":'"',"&apos;":"'","&amp;":"&"},a={60:"lt",62:"gt",34:"quot",39:"apos",38:"amp"},o={"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&apos;","&":"&amp;"},i=function(){function e(){}return e.prototype.encode=function(e){return e&&e.length?e.replace(/[<>"'&]/g,(function(e){return o[e]})):""},e.encode=function(t){return(new e).encode(t)},e.prototype.decode=function(e){return e&&e.length?e.replace(/&#?[0-9a-zA-Z]+;?/g,(function(e){if("#"===e.charAt(1)){var t="x"===e.charAt(2).toLowerCase()?parseInt(e.substr(3),16):parseInt(e.substr(2));return isNaN(t)||t<-32768||t>65535?"":String.fromCharCode(t)}return n[e]||e})):""},e.decode=function(t){return(new e).decode(t)},e.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=e.charCodeAt(n),i=a[o];i?(r+="&"+i+";",n++):(r+=o<32||o>126?"&#"+o+";":e.charAt(n),n++)}return r},e.encodeNonUTF=function(t){return(new e).encodeNonUTF(t)},e.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var a=e.charCodeAt(n);a<=255?r+=e[n++]:(r+="&#"+a+";",n++)}return r},e.encodeNonASCII=function(t){return(new e).encodeNonASCII(t)},e}();t.XmlEntities=i},"./node_modules/loglevel/lib/loglevel.js":function(e,t,r){var n,a;!function(o,i){"use strict";void 0===(a="function"==typeof(n=function(){var e=function(){},t="undefined",r=typeof window!==t&&typeof window.navigator!==t&&/Trident\/|MSIE /.test(window.navigator.userAgent),n=["trace","debug","info","warn","error"];function a(e,t){var r=e[t];if("function"==typeof r.bind)return r.bind(e);try{return Function.prototype.bind.call(r,e)}catch(t){return function(){return Function.prototype.apply.apply(r,[e,arguments])}}}function o(){console.log&&(console.log.apply?console.log.apply(console,arguments):Function.prototype.apply.apply(console.log,[console,arguments])),console.trace&&console.trace()}function i(n){return"debug"===n&&(n="log"),typeof console!==t&&("trace"===n&&r?o:void 0!==console[n]?a(console,n):void 0!==console.log?a(console,"log"):e)}function s(t,r){for(var a=0;a<n.length;a++){var o=n[a];this[o]=a<t?e:this.methodFactory(o,t,r)}this.log=this.debug}function l(e,r,n){return function(){typeof console!==t&&(s.call(this,r,n),this[e].apply(this,arguments))}}function u(e,t,r){return i(e)||l.apply(this,arguments)}function c(e,r,a){var o,i=this,l="loglevel";function c(e){var r=(n[e]||"silent").toUpperCase();if(typeof window!==t&&l){try{return void(window.localStorage[l]=r)}catch(e){}try{window.document.cookie=encodeURIComponent(l)+"="+r+";"}catch(e){}}}function d(){var e;if(typeof window!==t&&l){try{e=window.localStorage[l]}catch(e){}if(typeof e===t)try{var r=window.document.cookie,n=r.indexOf(encodeURIComponent(l)+"=");-1!==n&&(e=/^([^;]+)/.exec(r.slice(n))[1])}catch(e){}return void 0===i.levels[e]&&(e=void 0),e}}"string"==typeof e?l+=":"+e:"symbol"==typeof e&&(l=void 0),i.name=e,i.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5},i.methodFactory=a||u,i.getLevel=function(){return o},i.setLevel=function(r,n){if("string"==typeof r&&void 0!==i.levels[r.toUpperCase()]&&(r=i.levels[r.toUpperCase()]),!("number"==typeof r&&r>=0&&r<=i.levels.SILENT))throw"log.setLevel() called with invalid level: "+r;if(o=r,!1!==n&&c(r),s.call(i,r,e),typeof console===t&&r<i.levels.SILENT)return"No console available for logging"},i.setDefaultLevel=function(e){d()||i.setLevel(e,!1)},i.enableAll=function(e){i.setLevel(i.levels.TRACE,e)},i.disableAll=function(e){i.setLevel(i.levels.SILENT,e)};var p=d();null==p&&(p=null==r?"WARN":r),i.setLevel(p,!1)}var d=new c,p={};d.getLogger=function(e){if("symbol"!=typeof e&&"string"!=typeof e||""===e)throw new TypeError("You must supply a name when creating a logger.");var t=p[e];return t||(t=p[e]=new c(e,d.getLevel(),d.methodFactory)),t};var f=typeof window!==t?window.log:void 0;return d.noConflict=function(){return typeof window!==t&&window.log===d&&(window.log=f),d},d.getLoggers=function(){return p},d.default=d,d})?n.call(t,r,t,e):n)||(e.exports=a)}()},"./node_modules/node-libs-browser/node_modules/punycode/punycode.js":function(e,t,r){(function(e,n){var a;!function(o){t&&t.nodeType,e&&e.nodeType;var i="object"==typeof n&&n;i.global!==i&&i.window!==i&&i.self;var s,l=2147483647,u=36,c=/^xn--/,d=/[^\x20-\x7E]/,p=/[\x2E\u3002\uFF0E\uFF61]/g,f={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},h=Math.floor,m=String.fromCharCode;function g(e){throw new RangeError(f[e])}function v(e,t){for(var r=e.length,n=[];r--;)n[r]=t(e[r]);return n}function b(e,t){var r=e.split("@"),n="";return r.length>1&&(n=r[0]+"@",e=r[1]),n+v((e=e.replace(p,".")).split("."),t).join(".")}function y(e){for(var t,r,n=[],a=0,o=e.length;a<o;)(t=e.charCodeAt(a++))>=55296&&t<=56319&&a<o?56320==(64512&(r=e.charCodeAt(a++)))?n.push(((1023&t)<<10)+(1023&r)+65536):(n.push(t),a--):n.push(t);return n}function w(e){return v(e,(function(e){var t="";return e>65535&&(t+=m((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+=m(e)})).join("")}function S(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function C(e,t,r){var n=0;for(e=r?h(e/700):e>>1,e+=h(e/t);e>455;n+=u)e=h(e/35);return h(n+36*e/(e+38))}function A(e){var t,r,n,a,o,i,s,c,d,p,f,m=[],v=e.length,b=0,y=128,S=72;for((r=e.lastIndexOf("-"))<0&&(r=0),n=0;n<r;++n)e.charCodeAt(n)>=128&&g("not-basic"),m.push(e.charCodeAt(n));for(a=r>0?r+1:0;a<v;){for(o=b,i=1,s=u;a>=v&&g("invalid-input"),((c=(f=e.charCodeAt(a++))-48<10?f-22:f-65<26?f-65:f-97<26?f-97:u)>=u||c>h((l-b)/i))&&g("overflow"),b+=c*i,!(c<(d=s<=S?1:s>=S+26?26:s-S));s+=u)i>h(l/(p=u-d))&&g("overflow"),i*=p;S=C(b-o,t=m.length+1,0==o),h(b/t)>l-y&&g("overflow"),y+=h(b/t),b%=t,m.splice(b++,0,y)}return w(m)}function E(e){var t,r,n,a,o,i,s,c,d,p,f,v,b,w,A,E=[];for(v=(e=y(e)).length,t=128,r=0,o=72,i=0;i<v;++i)(f=e[i])<128&&E.push(m(f));for(n=a=E.length,a&&E.push("-");n<v;){for(s=l,i=0;i<v;++i)(f=e[i])>=t&&f<s&&(s=f);for(s-t>h((l-r)/(b=n+1))&&g("overflow"),r+=(s-t)*b,t=s,i=0;i<v;++i)if((f=e[i])<t&&++r>l&&g("overflow"),f==t){for(c=r,d=u;!(c<(p=d<=o?1:d>=o+26?26:d-o));d+=u)A=c-p,w=u-p,E.push(m(S(p+A%w,0))),c=h(A/w);E.push(m(S(c,0))),o=C(r,b,n==a),r=0,++n}++r,++t}return E.join("")}s={version:"1.4.1",ucs2:{decode:y,encode:w},decode:A,encode:E,toASCII:function(e){return b(e,(function(e){return d.test(e)?"xn--"+E(e):e}))},toUnicode:function(e){return b(e,(function(e){return c.test(e)?A(e.slice(4).toLowerCase()):e}))}},void 0===(a=function(){return s}.call(t,r,t,e))||(e.exports=a)}()}).call(this,r("./node_modules/webpack/buildin/module.js")(e),r("./node_modules/webpack/buildin/global.js"))},"./node_modules/querystring-es3/decode.js":function(e,t,r){"use strict";function n(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,t,r,o){t=t||"&",r=r||"=";var i={};if("string"!=typeof e||0===e.length)return i;var s=/\+/g;e=e.split(t);var l=1e3;o&&"number"==typeof o.maxKeys&&(l=o.maxKeys);var u=e.length;l>0&&u>l&&(u=l);for(var c=0;c<u;++c){var d,p,f,h,m=e[c].replace(s,"%20"),g=m.indexOf(r);g>=0?(d=m.substr(0,g),p=m.substr(g+1)):(d=m,p=""),f=decodeURIComponent(d),h=decodeURIComponent(p),n(i,f)?a(i[f])?i[f].push(h):i[f]=[i[f],h]:i[f]=h}return i};var a=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)}},"./node_modules/querystring-es3/encode.js":function(e,t,r){"use strict";var n=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};e.exports=function(e,t,r,s){return t=t||"&",r=r||"=",null===e&&(e=void 0),"object"==typeof e?o(i(e),(function(i){var s=encodeURIComponent(n(i))+r;return a(e[i])?o(e[i],(function(e){return s+encodeURIComponent(n(e))})).join(t):s+encodeURIComponent(n(e[i]))})).join(t):s?encodeURIComponent(n(s))+r+encodeURIComponent(n(e)):""};var a=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};function o(e,t){if(e.map)return e.map(t);for(var r=[],n=0;n<e.length;n++)r.push(t(e[n],n));return r}var i=Object.keys||function(e){var t=[];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.push(r);return t}},"./node_modules/querystring-es3/index.js":function(e,t,r){"use strict";t.decode=t.parse=r("./node_modules/querystring-es3/decode.js"),t.encode=t.stringify=r("./node_modules/querystring-es3/encode.js")},"./node_modules/sockjs-client/dist/sockjs.js":function(e,t,r){(function(t){var r;e.exports=function(){function e(t,r,n){function a(i,s){if(!r[i]){if(!t[i]){if(o)return o(i,!0);var l=new Error("Cannot find module '"+i+"'");throw l.code="MODULE_NOT_FOUND",l}var u=r[i]={exports:{}};t[i][0].call(u.exports,(function(e){return a(t[i][1][e]||e)}),u,u.exports,e,t,r,n)}return r[i].exports}for(var o=!1,i=0;i<n.length;i++)a(n[i]);return a}return e}()({1:[function(e,r,n){(function(t){"use strict";var n=e("./transport-list");r.exports=e("./main")(n),"_sockjs_onload"in t&&setTimeout(t._sockjs_onload,1)}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./main":14,"./transport-list":16}],2:[function(e,t,r){"use strict";var n=e("inherits"),a=e("./event");function o(){a.call(this),this.initEvent("close",!1,!1),this.wasClean=!1,this.code=0,this.reason=""}n(o,a),t.exports=o},{"./event":4,inherits:57}],3:[function(e,t,r){"use strict";var n=e("inherits"),a=e("./eventtarget");function o(){a.call(this)}n(o,a),o.prototype.removeAllListeners=function(e){e?delete this._listeners[e]:this._listeners={}},o.prototype.once=function(e,t){var r=this,n=!1;function a(){r.removeListener(e,a),n||(n=!0,t.apply(this,arguments))}this.on(e,a)},o.prototype.emit=function(){var e=arguments[0],t=this._listeners[e];if(t){for(var r=arguments.length,n=new Array(r-1),a=1;a<r;a++)n[a-1]=arguments[a];for(var o=0;o<t.length;o++)t[o].apply(this,n)}},o.prototype.on=o.prototype.addListener=a.prototype.addEventListener,o.prototype.removeListener=a.prototype.removeEventListener,t.exports.EventEmitter=o},{"./eventtarget":5,inherits:57}],4:[function(e,t,r){"use strict";function n(e){this.type=e}n.prototype.initEvent=function(e,t,r){return this.type=e,this.bubbles=t,this.cancelable=r,this.timeStamp=+new Date,this},n.prototype.stopPropagation=function(){},n.prototype.preventDefault=function(){},n.CAPTURING_PHASE=1,n.AT_TARGET=2,n.BUBBLING_PHASE=3,t.exports=n},{}],5:[function(e,t,r){"use strict";function n(){this._listeners={}}n.prototype.addEventListener=function(e,t){e in this._listeners||(this._listeners[e]=[]);var r=this._listeners[e];-1===r.indexOf(t)&&(r=r.concat([t])),this._listeners[e]=r},n.prototype.removeEventListener=function(e,t){var r=this._listeners[e];if(r){var n=r.indexOf(t);-1===n||(r.length>1?this._listeners[e]=r.slice(0,n).concat(r.slice(n+1)):delete this._listeners[e])}},n.prototype.dispatchEvent=function(){var e=arguments[0],t=e.type,r=1===arguments.length?[e]:Array.apply(null,arguments);if(this["on"+t]&&this["on"+t].apply(this,r),t in this._listeners)for(var n=this._listeners[t],a=0;a<n.length;a++)n[a].apply(this,r)},t.exports=n},{}],6:[function(e,t,r){"use strict";var n=e("inherits"),a=e("./event");function o(e){a.call(this),this.initEvent("message",!1,!1),this.data=e}n(o,a),t.exports=o},{"./event":4,inherits:57}],7:[function(e,t,r){"use strict";var n=e("json3"),a=e("./utils/iframe");function o(e){this._transport=e,e.on("message",this._transportMessage.bind(this)),e.on("close",this._transportClose.bind(this))}o.prototype._transportClose=function(e,t){a.postMessage("c",n.stringify([e,t]))},o.prototype._transportMessage=function(e){a.postMessage("t",e)},o.prototype._send=function(e){this._transport.send(e)},o.prototype._close=function(){this._transport.close(),this._transport.removeAllListeners()},t.exports=o},{"./utils/iframe":47,json3:58}],8:[function(e,t,r){(function(r){"use strict";var n=e("./utils/url"),a=e("./utils/event"),o=e("json3"),i=e("./facade"),s=e("./info-iframe-receiver"),l=e("./utils/iframe"),u=e("./location"),c=function(){};"production"!==r.env.NODE_ENV&&(c=e("debug")("sockjs-client:iframe-bootstrap")),t.exports=function(e,t){var r,d={};t.forEach((function(e){e.facadeTransport&&(d[e.facadeTransport.transportName]=e.facadeTransport)})),d[s.transportName]=s,e.bootstrap_iframe=function(){var t;l.currentWindowId=u.hash.slice(1);var s=function(a){if(a.source===parent&&(void 0===r&&(r=a.origin),a.origin===r)){var s;try{s=o.parse(a.data)}catch(e){return void c("bad json",a.data)}if(s.windowId===l.currentWindowId)switch(s.type){case"s":var p;try{p=o.parse(s.data)}catch(e){c("bad json",s.data);break}var f=p[0],h=p[1],m=p[2],g=p[3];if(c(f,h,m,g),f!==e.version)throw new Error('Incompatible SockJS! Main site uses: "'+f+'", the iframe: "'+e.version+'".');if(!n.isOriginEqual(m,u.href)||!n.isOriginEqual(g,u.href))throw new Error("Can't connect to different domain from within an iframe. ("+u.href+", "+m+", "+g+")");t=new i(new d[h](m,g));break;case"m":t._send(s.data);break;case"c":t&&t._close(),t=null}}};a.attachEvent("message",s),l.postMessage("s")}}}).call(this,{env:{}})},{"./facade":7,"./info-iframe-receiver":10,"./location":13,"./utils/event":46,"./utils/iframe":47,"./utils/url":52,debug:55,json3:58}],9:[function(e,t,r){(function(r){"use strict";var n=e("events").EventEmitter,a=e("inherits"),o=e("json3"),i=e("./utils/object"),s=function(){};function l(e,t){n.call(this);var r=this,a=+new Date;this.xo=new t("GET",e),this.xo.once("finish",(function(e,t){var n,l;if(200===e){if(l=+new Date-a,t)try{n=o.parse(t)}catch(e){s("bad json",t)}i.isObject(n)||(n={})}r.emit("finish",n,l),r.removeAllListeners()}))}"production"!==r.env.NODE_ENV&&(s=e("debug")("sockjs-client:info-ajax")),a(l,n),l.prototype.close=function(){this.removeAllListeners(),this.xo.close()},t.exports=l}).call(this,{env:{}})},{"./utils/object":49,debug:55,events:3,inherits:57,json3:58}],10:[function(e,t,r){"use strict";var n=e("inherits"),a=e("events").EventEmitter,o=e("json3"),i=e("./transport/sender/xhr-local"),s=e("./info-ajax");function l(e){var t=this;a.call(this),this.ir=new s(e,i),this.ir.once("finish",(function(e,r){t.ir=null,t.emit("message",o.stringify([e,r]))}))}n(l,a),l.transportName="iframe-info-receiver",l.prototype.close=function(){this.ir&&(this.ir.close(),this.ir=null),this.removeAllListeners()},t.exports=l},{"./info-ajax":9,"./transport/sender/xhr-local":37,events:3,inherits:57,json3:58}],11:[function(e,r,n){(function(t,n){"use strict";var a=e("events").EventEmitter,o=e("inherits"),i=e("json3"),s=e("./utils/event"),l=e("./transport/iframe"),u=e("./info-iframe-receiver"),c=function(){};function d(e,t){var r=this;a.call(this);var o=function(){var n=r.ifr=new l(u.transportName,t,e);n.once("message",(function(e){if(e){var t;try{t=i.parse(e)}catch(t){return c("bad json",e),r.emit("finish"),void r.close()}var n=t[0],a=t[1];r.emit("finish",n,a)}r.close()})),n.once("close",(function(){r.emit("finish"),r.close()}))};n.document.body?o():s.attachEvent("load",o)}"production"!==t.env.NODE_ENV&&(c=e("debug")("sockjs-client:info-iframe")),o(d,a),d.enabled=function(){return l.enabled()},d.prototype.close=function(){this.ifr&&this.ifr.close(),this.removeAllListeners(),this.ifr=null},r.exports=d}).call(this,{env:{}},void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./info-iframe-receiver":10,"./transport/iframe":22,"./utils/event":46,debug:55,events:3,inherits:57,json3:58}],12:[function(e,t,r){(function(r){"use strict";var n=e("events").EventEmitter,a=e("inherits"),o=e("./utils/url"),i=e("./transport/sender/xdr"),s=e("./transport/sender/xhr-cors"),l=e("./transport/sender/xhr-local"),u=e("./transport/sender/xhr-fake"),c=e("./info-iframe"),d=e("./info-ajax"),p=function(){};function f(e,t){p(e);var r=this;n.call(this),setTimeout((function(){r.doXhr(e,t)}),0)}"production"!==r.env.NODE_ENV&&(p=e("debug")("sockjs-client:info-receiver")),a(f,n),f._getReceiver=function(e,t,r){return r.sameOrigin?new d(t,l):s.enabled?new d(t,s):i.enabled&&r.sameScheme?new d(t,i):c.enabled()?new c(e,t):new d(t,u)},f.prototype.doXhr=function(e,t){var r=this,n=o.addPath(e,"/info");p("doXhr",n),this.xo=f._getReceiver(e,n,t),this.timeoutRef=setTimeout((function(){p("timeout"),r._cleanup(!1),r.emit("finish")}),f.timeout),this.xo.once("finish",(function(e,t){p("finish",e,t),r._cleanup(!0),r.emit("finish",e,t)}))},f.prototype._cleanup=function(e){p("_cleanup"),clearTimeout(this.timeoutRef),this.timeoutRef=null,!e&&this.xo&&this.xo.close(),this.xo=null},f.prototype.close=function(){p("close"),this.removeAllListeners(),this._cleanup(!1)},f.timeout=8e3,t.exports=f}).call(this,{env:{}})},{"./info-ajax":9,"./info-iframe":11,"./transport/sender/xdr":34,"./transport/sender/xhr-cors":35,"./transport/sender/xhr-fake":36,"./transport/sender/xhr-local":37,"./utils/url":52,debug:55,events:3,inherits:57}],13:[function(e,r,n){(function(e){"use strict";r.exports=e.location||{origin:"http://localhost:80",protocol:"http:",host:"localhost",port:80,href:"http://localhost/",hash:""}}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],14:[function(e,r,n){(function(t,n){"use strict";e("./shims");var a,o=e("url-parse"),i=e("inherits"),s=e("json3"),l=e("./utils/random"),u=e("./utils/escape"),c=e("./utils/url"),d=e("./utils/event"),p=e("./utils/transport"),f=e("./utils/object"),h=e("./utils/browser"),m=e("./utils/log"),g=e("./event/event"),v=e("./event/eventtarget"),b=e("./location"),y=e("./event/close"),w=e("./event/trans-message"),S=e("./info-receiver"),C=function(){};function A(e,t,r){if(!(this instanceof A))return new A(e,t,r);if(arguments.length<1)throw new TypeError("Failed to construct 'SockJS: 1 argument required, but only 0 present");v.call(this),this.readyState=A.CONNECTING,this.extensions="",this.protocol="",(r=r||{}).protocols_whitelist&&m.warn("'protocols_whitelist' is DEPRECATED. Use 'transports' instead."),this._transportsWhitelist=r.transports,this._transportOptions=r.transportOptions||{},this._timeout=r.timeout||0;var n=r.sessionId||8;if("function"==typeof n)this._generateSessionId=n;else{if("number"!=typeof n)throw new TypeError("If sessionId is used in the options, it needs to be a number or a function.");this._generateSessionId=function(){return l.string(n)}}this._server=r.server||l.numberString(1e3);var a=new o(e);if(!a.host||!a.protocol)throw new SyntaxError("The URL '"+e+"' is invalid");if(a.hash)throw new SyntaxError("The URL must not contain a fragment");if("http:"!==a.protocol&&"https:"!==a.protocol)throw new SyntaxError("The URL's scheme must be either 'http:' or 'https:'. '"+a.protocol+"' is not allowed.");var i="https:"===a.protocol;if("https:"===b.protocol&&!i)throw new Error("SecurityError: An insecure SockJS connection may not be initiated from a page loaded over HTTPS");t?Array.isArray(t)||(t=[t]):t=[];var s=t.sort();s.forEach((function(e,t){if(!e)throw new SyntaxError("The protocols entry '"+e+"' is invalid.");if(t<s.length-1&&e===s[t+1])throw new SyntaxError("The protocols entry '"+e+"' is duplicated.")}));var u=c.getOrigin(b.href);this._origin=u?u.toLowerCase():null,a.set("pathname",a.pathname.replace(/\/+$/,"")),this.url=a.href,C("using url",this.url),this._urlInfo={nullOrigin:!h.hasDomain(),sameOrigin:c.isOriginEqual(this.url,b.href),sameScheme:c.isSchemeEqual(this.url,b.href)},this._ir=new S(this.url,this._urlInfo),this._ir.once("finish",this._receiveInfo.bind(this))}function E(e){return 1e3===e||e>=3e3&&e<=4999}"production"!==t.env.NODE_ENV&&(C=e("debug")("sockjs-client:main")),i(A,v),A.prototype.close=function(e,t){if(e&&!E(e))throw new Error("InvalidAccessError: Invalid code");if(t&&t.length>123)throw new SyntaxError("reason argument has an invalid length");if(this.readyState!==A.CLOSING&&this.readyState!==A.CLOSED){var r=!0;this._close(e||1e3,t||"Normal closure",r)}},A.prototype.send=function(e){if("string"!=typeof e&&(e=""+e),this.readyState===A.CONNECTING)throw new Error("InvalidStateError: The connection has not been established yet");this.readyState===A.OPEN&&this._transport.send(u.quote(e))},A.version=e("./version"),A.CONNECTING=0,A.OPEN=1,A.CLOSING=2,A.CLOSED=3,A.prototype._receiveInfo=function(e,t){if(C("_receiveInfo",t),this._ir=null,e){this._rto=this.countRTO(t),this._transUrl=e.base_url?e.base_url:this.url,e=f.extend(e,this._urlInfo),C("info",e);var r=a.filterToEnabled(this._transportsWhitelist,e);this._transports=r.main,C(this._transports.length+" enabled transports"),this._connect()}else this._close(1002,"Cannot connect to server")},A.prototype._connect=function(){for(var e=this._transports.shift();e;e=this._transports.shift()){if(C("attempt",e.transportName),e.needBody&&(!n.document.body||void 0!==n.document.readyState&&"complete"!==n.document.readyState&&"interactive"!==n.document.readyState))return C("waiting for body"),this._transports.unshift(e),void d.attachEvent("load",this._connect.bind(this));var t=Math.max(this._timeout,this._rto*e.roundTrips||5e3);this._transportTimeoutId=setTimeout(this._transportTimeout.bind(this),t),C("using timeout",t);var r=c.addPath(this._transUrl,"/"+this._server+"/"+this._generateSessionId()),a=this._transportOptions[e.transportName];C("transport url",r);var o=new e(r,this._transUrl,a);return o.on("message",this._transportMessage.bind(this)),o.once("close",this._transportClose.bind(this)),o.transportName=e.transportName,void(this._transport=o)}this._close(2e3,"All transports failed",!1)},A.prototype._transportTimeout=function(){C("_transportTimeout"),this.readyState===A.CONNECTING&&(this._transport&&this._transport.close(),this._transportClose(2007,"Transport timed out"))},A.prototype._transportMessage=function(e){C("_transportMessage",e);var t,r=this,n=e.slice(0,1),a=e.slice(1);switch(n){case"o":return void this._open();case"h":return this.dispatchEvent(new g("heartbeat")),void C("heartbeat",this.transport)}if(a)try{t=s.parse(a)}catch(e){C("bad json",a)}if(void 0!==t)switch(n){case"a":Array.isArray(t)&&t.forEach((function(e){C("message",r.transport,e),r.dispatchEvent(new w(e))}));break;case"m":C("message",this.transport,t),this.dispatchEvent(new w(t));break;case"c":Array.isArray(t)&&2===t.length&&this._close(t[0],t[1],!0)}else C("empty payload",a)},A.prototype._transportClose=function(e,t){C("_transportClose",this.transport,e,t),this._transport&&(this._transport.removeAllListeners(),this._transport=null,this.transport=null),E(e)||2e3===e||this.readyState!==A.CONNECTING?this._close(e,t):this._connect()},A.prototype._open=function(){C("_open",this._transport&&this._transport.transportName,this.readyState),this.readyState===A.CONNECTING?(this._transportTimeoutId&&(clearTimeout(this._transportTimeoutId),this._transportTimeoutId=null),this.readyState=A.OPEN,this.transport=this._transport.transportName,this.dispatchEvent(new g("open")),C("connected",this.transport)):this._close(1006,"Server lost session")},A.prototype._close=function(e,t,r){C("_close",this.transport,e,t,r,this.readyState);var n=!1;if(this._ir&&(n=!0,this._ir.close(),this._ir=null),this._transport&&(this._transport.close(),this._transport=null,this.transport=null),this.readyState===A.CLOSED)throw new Error("InvalidStateError: SockJS has already been closed");this.readyState=A.CLOSING,setTimeout(function(){this.readyState=A.CLOSED,n&&this.dispatchEvent(new g("error"));var a=new y("close");a.wasClean=r||!1,a.code=e||1e3,a.reason=t,this.dispatchEvent(a),this.onmessage=this.onclose=this.onerror=null,C("disconnected")}.bind(this),0)},A.prototype.countRTO=function(e){return e>100?4*e:300+e},r.exports=function(t){return a=p(t),e("./iframe-bootstrap")(A,t),A}}).call(this,{env:{}},void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./event/close":2,"./event/event":4,"./event/eventtarget":5,"./event/trans-message":6,"./iframe-bootstrap":8,"./info-receiver":12,"./location":13,"./shims":15,"./utils/browser":44,"./utils/escape":45,"./utils/event":46,"./utils/log":48,"./utils/object":49,"./utils/random":50,"./utils/transport":51,"./utils/url":52,"./version":53,debug:55,inherits:57,json3:58,"url-parse":61}],15:[function(e,t,r){"use strict";var n,a=Array.prototype,o=Object.prototype,i=Function.prototype,s=String.prototype,l=a.slice,u=o.toString,c=function(e){return"[object Function]"===o.toString.call(e)},d=function(e){return"[object Array]"===u.call(e)},p=function(e){return"[object String]"===u.call(e)},f=Object.defineProperty&&function(){try{return Object.defineProperty({},"x",{}),!0}catch(e){return!1}}();n=f?function(e,t,r,n){!n&&t in e||Object.defineProperty(e,t,{configurable:!0,enumerable:!1,writable:!0,value:r})}:function(e,t,r,n){!n&&t in e||(e[t]=r)};var h=function(e,t,r){for(var a in t)o.hasOwnProperty.call(t,a)&&n(e,a,t[a],r)},m=function(e){if(null==e)throw new TypeError("can't convert "+e+" to object");return Object(e)};function g(e){var t=+e;return t!=t?t=0:0!==t&&t!==1/0&&t!==-1/0&&(t=(t>0||-1)*Math.floor(Math.abs(t))),t}function v(e){return e>>>0}function b(){}h(i,{bind:function(e){var t=this;if(!c(t))throw new TypeError("Function.prototype.bind called on incompatible "+t);for(var r=l.call(arguments,1),n=function(){if(this instanceof s){var n=t.apply(this,r.concat(l.call(arguments)));return Object(n)===n?n:this}return t.apply(e,r.concat(l.call(arguments)))},a=Math.max(0,t.length-r.length),o=[],i=0;i<a;i++)o.push("$"+i);var s=Function("binder","return function ("+o.join(",")+"){ return binder.apply(this, arguments); }")(n);return t.prototype&&(b.prototype=t.prototype,s.prototype=new b,b.prototype=null),s}}),h(Array,{isArray:d});var y,w,S,C=Object("a"),A="a"!==C[0]||!(0 in C);h(a,{forEach:function(e){var t=m(this),r=A&&p(this)?this.split(""):t,n=arguments[1],a=-1,o=r.length>>>0;if(!c(e))throw new TypeError;for(;++a<o;)a in r&&e.call(n,r[a],a,t)}},(y=a.forEach,w=!0,S=!0,y&&(y.call("foo",(function(e,t,r){"object"!=typeof r&&(w=!1)})),y.call([1],(function(){S="string"==typeof this}),"x")),!(y&&w&&S)));var E=Array.prototype.indexOf&&-1!==[0,1].indexOf(1,2);h(a,{indexOf:function(e){var t=A&&p(this)?this.split(""):m(this),r=t.length>>>0;if(!r)return-1;var n=0;for(arguments.length>1&&(n=g(arguments[1])),n=n>=0?n:Math.max(0,r+n);n<r;n++)if(n in t&&t[n]===e)return n;return-1}},E);var M,T=s.split;2!=="ab".split(/(?:ab)*/).length||4!==".".split(/(.?)(.?)/).length||"t"==="tesst".split(/(s)*/)[1]||4!=="test".split(/(?:)/,-1).length||"".split(/.?/).length||".".split(/()()/).length>1?(M=void 0===/()??/.exec("")[1],s.split=function(e,t){var r=this;if(void 0===e&&0===t)return[];if("[object RegExp]"!==u.call(e))return T.call(this,e,t);var n,o,i,s,l=[],c=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.extended?"x":"")+(e.sticky?"y":""),d=0;for(e=new RegExp(e.source,c+"g"),r+="",M||(n=new RegExp("^"+e.source+"$(?!\\s)",c)),t=void 0===t?-1>>>0:v(t);(o=e.exec(r))&&!((i=o.index+o[0].length)>d&&(l.push(r.slice(d,o.index)),!M&&o.length>1&&o[0].replace(n,(function(){for(var e=1;e<arguments.length-2;e++)void 0===arguments[e]&&(o[e]=void 0)})),o.length>1&&o.index<r.length&&a.push.apply(l,o.slice(1)),s=o[0].length,d=i,l.length>=t));)e.lastIndex===o.index&&e.lastIndex++;return d===r.length?!s&&e.test("")||l.push(""):l.push(r.slice(d)),l.length>t?l.slice(0,t):l}):"0".split(void 0,0).length&&(s.split=function(e,t){return void 0===e&&0===t?[]:T.call(this,e,t)});var N=s.substr,L="".substr&&"b"!=="0b".substr(-1);h(s,{substr:function(e,t){return N.call(this,e<0&&(e=this.length+e)<0?0:e,t)}},L)},{}],16:[function(e,t,r){"use strict";t.exports=[e("./transport/websocket"),e("./transport/xhr-streaming"),e("./transport/xdr-streaming"),e("./transport/eventsource"),e("./transport/lib/iframe-wrap")(e("./transport/eventsource")),e("./transport/htmlfile"),e("./transport/lib/iframe-wrap")(e("./transport/htmlfile")),e("./transport/xhr-polling"),e("./transport/xdr-polling"),e("./transport/lib/iframe-wrap")(e("./transport/xhr-polling")),e("./transport/jsonp-polling")]},{"./transport/eventsource":20,"./transport/htmlfile":21,"./transport/jsonp-polling":23,"./transport/lib/iframe-wrap":26,"./transport/websocket":38,"./transport/xdr-polling":39,"./transport/xdr-streaming":40,"./transport/xhr-polling":41,"./transport/xhr-streaming":42}],17:[function(e,r,n){(function(t,n){"use strict";var a=e("events").EventEmitter,o=e("inherits"),i=e("../../utils/event"),s=e("../../utils/url"),l=n.XMLHttpRequest,u=function(){};function c(e,t,r,n){u(e,t);var o=this;a.call(this),setTimeout((function(){o._start(e,t,r,n)}),0)}"production"!==t.env.NODE_ENV&&(u=e("debug")("sockjs-client:browser:xhr")),o(c,a),c.prototype._start=function(e,t,r,n){var a=this;try{this.xhr=new l}catch(e){}if(!this.xhr)return u("no xhr"),this.emit("finish",0,"no xhr support"),void this._cleanup();t=s.addQuery(t,"t="+ +new Date),this.unloadRef=i.unloadAdd((function(){u("unload cleanup"),a._cleanup(!0)}));try{this.xhr.open(e,t,!0),this.timeout&&"timeout"in this.xhr&&(this.xhr.timeout=this.timeout,this.xhr.ontimeout=function(){u("xhr timeout"),a.emit("finish",0,""),a._cleanup(!1)})}catch(e){return u("exception",e),this.emit("finish",0,""),void this._cleanup(!1)}if(n&&n.noCredentials||!c.supportsCORS||(u("withCredentials"),this.xhr.withCredentials=!0),n&&n.headers)for(var o in n.headers)this.xhr.setRequestHeader(o,n.headers[o]);this.xhr.onreadystatechange=function(){if(a.xhr){var e,t,r=a.xhr;switch(u("readyState",r.readyState),r.readyState){case 3:try{t=r.status,e=r.responseText}catch(e){}u("status",t),1223===t&&(t=204),200===t&&e&&e.length>0&&(u("chunk"),a.emit("chunk",t,e));break;case 4:t=r.status,u("status",t),1223===t&&(t=204),12005!==t&&12029!==t||(t=0),u("finish",t,r.responseText),a.emit("finish",t,r.responseText),a._cleanup(!1)}}};try{a.xhr.send(r)}catch(e){a.emit("finish",0,""),a._cleanup(!1)}},c.prototype._cleanup=function(e){if(u("cleanup"),this.xhr){if(this.removeAllListeners(),i.unloadDel(this.unloadRef),this.xhr.onreadystatechange=function(){},this.xhr.ontimeout&&(this.xhr.ontimeout=null),e)try{this.xhr.abort()}catch(e){}this.unloadRef=this.xhr=null}},c.prototype.close=function(){u("close"),this._cleanup(!0)},c.enabled=!!l;var d=["Active"].concat("Object").join("X");!c.enabled&&d in n&&(u("overriding xmlhttprequest"),l=function(){try{return new n[d]("Microsoft.XMLHTTP")}catch(e){return null}},c.enabled=!!new l);var p=!1;try{p="withCredentials"in new l}catch(e){}c.supportsCORS=p,r.exports=c}).call(this,{env:{}},void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/event":46,"../../utils/url":52,debug:55,events:3,inherits:57}],18:[function(e,r,n){(function(e){r.exports=e.EventSource}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],19:[function(e,r,n){(function(e){"use strict";var t=e.WebSocket||e.MozWebSocket;r.exports=t?function(e){return new t(e)}:void 0}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],20:[function(e,t,r){"use strict";var n=e("inherits"),a=e("./lib/ajax-based"),o=e("./receiver/eventsource"),i=e("./sender/xhr-cors"),s=e("eventsource");function l(e){if(!l.enabled())throw new Error("Transport created when disabled");a.call(this,e,"/eventsource",o,i)}n(l,a),l.enabled=function(){return!!s},l.transportName="eventsource",l.roundTrips=2,t.exports=l},{"./lib/ajax-based":24,"./receiver/eventsource":29,"./sender/xhr-cors":35,eventsource:18,inherits:57}],21:[function(e,t,r){"use strict";var n=e("inherits"),a=e("./receiver/htmlfile"),o=e("./sender/xhr-local"),i=e("./lib/ajax-based");function s(e){if(!a.enabled)throw new Error("Transport created when disabled");i.call(this,e,"/htmlfile",a,o)}n(s,i),s.enabled=function(e){return a.enabled&&e.sameOrigin},s.transportName="htmlfile",s.roundTrips=2,t.exports=s},{"./lib/ajax-based":24,"./receiver/htmlfile":30,"./sender/xhr-local":37,inherits:57}],22:[function(e,t,r){(function(r){"use strict";var n=e("inherits"),a=e("json3"),o=e("events").EventEmitter,i=e("../version"),s=e("../utils/url"),l=e("../utils/iframe"),u=e("../utils/event"),c=e("../utils/random"),d=function(){};function p(e,t,r){if(!p.enabled())throw new Error("Transport created when disabled");o.call(this);var n=this;this.origin=s.getOrigin(r),this.baseUrl=r,this.transUrl=t,this.transport=e,this.windowId=c.string(8);var a=s.addPath(r,"/iframe.html")+"#"+this.windowId;d(e,t,a),this.iframeObj=l.createIframe(a,(function(e){d("err callback"),n.emit("close",1006,"Unable to load an iframe ("+e+")"),n.close()})),this.onmessageCallback=this._message.bind(this),u.attachEvent("message",this.onmessageCallback)}"production"!==r.env.NODE_ENV&&(d=e("debug")("sockjs-client:transport:iframe")),n(p,o),p.prototype.close=function(){if(d("close"),this.removeAllListeners(),this.iframeObj){u.detachEvent("message",this.onmessageCallback);try{this.postMessage("c")}catch(e){}this.iframeObj.cleanup(),this.iframeObj=null,this.onmessageCallback=this.iframeObj=null}},p.prototype._message=function(e){if(d("message",e.data),s.isOriginEqual(e.origin,this.origin)){var t;try{t=a.parse(e.data)}catch(t){return void d("bad json",e.data)}if(t.windowId===this.windowId)switch(t.type){case"s":this.iframeObj.loaded(),this.postMessage("s",a.stringify([i,this.transport,this.transUrl,this.baseUrl]));break;case"t":this.emit("message",t.data);break;case"c":var r;try{r=a.parse(t.data)}catch(e){return void d("bad json",t.data)}this.emit("close",r[0],r[1]),this.close()}else d("mismatched window id",t.windowId,this.windowId)}else d("not same origin",e.origin,this.origin)},p.prototype.postMessage=function(e,t){d("postMessage",e,t),this.iframeObj.post(a.stringify({windowId:this.windowId,type:e,data:t||""}),this.origin)},p.prototype.send=function(e){d("send",e),this.postMessage("m",e)},p.enabled=function(){return l.iframeEnabled},p.transportName="iframe",p.roundTrips=2,t.exports=p}).call(this,{env:{}})},{"../utils/event":46,"../utils/iframe":47,"../utils/random":50,"../utils/url":52,"../version":53,debug:55,events:3,inherits:57,json3:58}],23:[function(e,r,n){(function(t){"use strict";var n=e("inherits"),a=e("./lib/sender-receiver"),o=e("./receiver/jsonp"),i=e("./sender/jsonp");function s(e){if(!s.enabled())throw new Error("Transport created when disabled");a.call(this,e,"/jsonp",i,o)}n(s,a),s.enabled=function(){return!!t.document},s.transportName="jsonp-polling",s.roundTrips=1,s.needBody=!0,r.exports=s}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./lib/sender-receiver":28,"./receiver/jsonp":31,"./sender/jsonp":33,inherits:57}],24:[function(e,t,r){(function(r){"use strict";var n=e("inherits"),a=e("../../utils/url"),o=e("./sender-receiver"),i=function(){};function s(e){return function(t,r,n){i("create ajax sender",t,r);var o={};"string"==typeof r&&(o.headers={"Content-type":"text/plain"});var s=a.addPath(t,"/xhr_send"),l=new e("POST",s,r,o);return l.once("finish",(function(e){if(i("finish",e),l=null,200!==e&&204!==e)return n(new Error("http status "+e));n()})),function(){i("abort"),l.close(),l=null;var e=new Error("Aborted");e.code=1e3,n(e)}}}function l(e,t,r,n){o.call(this,e,t,s(n),r,n)}"production"!==r.env.NODE_ENV&&(i=e("debug")("sockjs-client:ajax-based")),n(l,o),t.exports=l}).call(this,{env:{}})},{"../../utils/url":52,"./sender-receiver":28,debug:55,inherits:57}],25:[function(e,t,r){(function(r){"use strict";var n=e("inherits"),a=e("events").EventEmitter,o=function(){};function i(e,t){o(e),a.call(this),this.sendBuffer=[],this.sender=t,this.url=e}"production"!==r.env.NODE_ENV&&(o=e("debug")("sockjs-client:buffered-sender")),n(i,a),i.prototype.send=function(e){o("send",e),this.sendBuffer.push(e),this.sendStop||this.sendSchedule()},i.prototype.sendScheduleWait=function(){o("sendScheduleWait");var e,t=this;this.sendStop=function(){o("sendStop"),t.sendStop=null,clearTimeout(e)},e=setTimeout((function(){o("timeout"),t.sendStop=null,t.sendSchedule()}),25)},i.prototype.sendSchedule=function(){o("sendSchedule",this.sendBuffer.length);var e=this;if(this.sendBuffer.length>0){var t="["+this.sendBuffer.join(",")+"]";this.sendStop=this.sender(this.url,t,(function(t){e.sendStop=null,t?(o("error",t),e.emit("close",t.code||1006,"Sending error: "+t),e.close()):e.sendScheduleWait()})),this.sendBuffer=[]}},i.prototype._cleanup=function(){o("_cleanup"),this.removeAllListeners()},i.prototype.close=function(){o("close"),this._cleanup(),this.sendStop&&(this.sendStop(),this.sendStop=null)},t.exports=i}).call(this,{env:{}})},{debug:55,events:3,inherits:57}],26:[function(e,r,n){(function(t){"use strict";var n=e("inherits"),a=e("../iframe"),o=e("../../utils/object");r.exports=function(e){function r(t,r){a.call(this,e.transportName,t,r)}return n(r,a),r.enabled=function(r,n){if(!t.document)return!1;var i=o.extend({},n);return i.sameOrigin=!0,e.enabled(i)&&a.enabled()},r.transportName="iframe-"+e.transportName,r.needBody=!0,r.roundTrips=a.roundTrips+e.roundTrips-1,r.facadeTransport=e,r}}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/object":49,"../iframe":22,inherits:57}],27:[function(e,t,r){(function(r){"use strict";var n=e("inherits"),a=e("events").EventEmitter,o=function(){};function i(e,t,r){o(t),a.call(this),this.Receiver=e,this.receiveUrl=t,this.AjaxObject=r,this._scheduleReceiver()}"production"!==r.env.NODE_ENV&&(o=e("debug")("sockjs-client:polling")),n(i,a),i.prototype._scheduleReceiver=function(){o("_scheduleReceiver");var e=this,t=this.poll=new this.Receiver(this.receiveUrl,this.AjaxObject);t.on("message",(function(t){o("message",t),e.emit("message",t)})),t.once("close",(function(r,n){o("close",r,n,e.pollIsClosing),e.poll=t=null,e.pollIsClosing||("network"===n?e._scheduleReceiver():(e.emit("close",r||1006,n),e.removeAllListeners()))}))},i.prototype.abort=function(){o("abort"),this.removeAllListeners(),this.pollIsClosing=!0,this.poll&&this.poll.abort()},t.exports=i}).call(this,{env:{}})},{debug:55,events:3,inherits:57}],28:[function(e,t,r){(function(r){"use strict";var n=e("inherits"),a=e("../../utils/url"),o=e("./buffered-sender"),i=e("./polling"),s=function(){};function l(e,t,r,n,l){var u=a.addPath(e,t);s(u);var c=this;o.call(this,e,r),this.poll=new i(n,u,l),this.poll.on("message",(function(e){s("poll message",e),c.emit("message",e)})),this.poll.once("close",(function(e,t){s("poll close",e,t),c.poll=null,c.emit("close",e,t),c.close()}))}"production"!==r.env.NODE_ENV&&(s=e("debug")("sockjs-client:sender-receiver")),n(l,o),l.prototype.close=function(){o.prototype.close.call(this),s("close"),this.removeAllListeners(),this.poll&&(this.poll.abort(),this.poll=null)},t.exports=l}).call(this,{env:{}})},{"../../utils/url":52,"./buffered-sender":25,"./polling":27,debug:55,inherits:57}],29:[function(e,t,r){(function(r){"use strict";var n=e("inherits"),a=e("events").EventEmitter,o=e("eventsource"),i=function(){};function s(e){i(e),a.call(this);var t=this,r=this.es=new o(e);r.onmessage=function(e){i("message",e.data),t.emit("message",decodeURI(e.data))},r.onerror=function(e){i("error",r.readyState,e);var n=2!==r.readyState?"network":"permanent";t._cleanup(),t._close(n)}}"production"!==r.env.NODE_ENV&&(i=e("debug")("sockjs-client:receiver:eventsource")),n(s,a),s.prototype.abort=function(){i("abort"),this._cleanup(),this._close("user")},s.prototype._cleanup=function(){i("cleanup");var e=this.es;e&&(e.onmessage=e.onerror=null,e.close(),this.es=null)},s.prototype._close=function(e){i("close",e);var t=this;setTimeout((function(){t.emit("close",null,e),t.removeAllListeners()}),200)},t.exports=s}).call(this,{env:{}})},{debug:55,events:3,eventsource:18,inherits:57}],30:[function(e,r,n){(function(t,n){"use strict";var a=e("inherits"),o=e("../../utils/iframe"),i=e("../../utils/url"),s=e("events").EventEmitter,l=e("../../utils/random"),u=function(){};function c(e){u(e),s.call(this);var t=this;o.polluteGlobalNamespace(),this.id="a"+l.string(6),e=i.addQuery(e,"c="+decodeURIComponent(o.WPrefix+"."+this.id)),u("using htmlfile",c.htmlfileEnabled);var r=c.htmlfileEnabled?o.createHtmlfile:o.createIframe;n[o.WPrefix][this.id]={start:function(){u("start"),t.iframeObj.loaded()},message:function(e){u("message",e),t.emit("message",e)},stop:function(){u("stop"),t._cleanup(),t._close("network")}},this.iframeObj=r(e,(function(){u("callback"),t._cleanup(),t._close("permanent")}))}"production"!==t.env.NODE_ENV&&(u=e("debug")("sockjs-client:receiver:htmlfile")),a(c,s),c.prototype.abort=function(){u("abort"),this._cleanup(),this._close("user")},c.prototype._cleanup=function(){u("_cleanup"),this.iframeObj&&(this.iframeObj.cleanup(),this.iframeObj=null),delete n[o.WPrefix][this.id]},c.prototype._close=function(e){u("_close",e),this.emit("close",null,e),this.removeAllListeners()},c.htmlfileEnabled=!1;var d=["Active"].concat("Object").join("X");if(d in n)try{c.htmlfileEnabled=!!new n[d]("htmlfile")}catch(e){}c.enabled=c.htmlfileEnabled||o.iframeEnabled,r.exports=c}).call(this,{env:{}},void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,debug:55,events:3,inherits:57}],31:[function(e,r,n){(function(t,n){"use strict";var a=e("../../utils/iframe"),o=e("../../utils/random"),i=e("../../utils/browser"),s=e("../../utils/url"),l=e("inherits"),u=e("events").EventEmitter,c=function(){};function d(e){c(e);var t=this;u.call(this),a.polluteGlobalNamespace(),this.id="a"+o.string(6);var r=s.addQuery(e,"c="+encodeURIComponent(a.WPrefix+"."+this.id));n[a.WPrefix][this.id]=this._callback.bind(this),this._createScript(r),this.timeoutId=setTimeout((function(){c("timeout"),t._abort(new Error("JSONP script loaded abnormally (timeout)"))}),d.timeout)}"production"!==t.env.NODE_ENV&&(c=e("debug")("sockjs-client:receiver:jsonp")),l(d,u),d.prototype.abort=function(){if(c("abort"),n[a.WPrefix][this.id]){var e=new Error("JSONP user aborted read");e.code=1e3,this._abort(e)}},d.timeout=35e3,d.scriptErrorTimeout=1e3,d.prototype._callback=function(e){c("_callback",e),this._cleanup(),this.aborting||(e&&(c("message",e),this.emit("message",e)),this.emit("close",null,"network"),this.removeAllListeners())},d.prototype._abort=function(e){c("_abort",e),this._cleanup(),this.aborting=!0,this.emit("close",e.code,e.message),this.removeAllListeners()},d.prototype._cleanup=function(){if(c("_cleanup"),clearTimeout(this.timeoutId),this.script2&&(this.script2.parentNode.removeChild(this.script2),this.script2=null),this.script){var e=this.script;e.parentNode.removeChild(e),e.onreadystatechange=e.onerror=e.onload=e.onclick=null,this.script=null}delete n[a.WPrefix][this.id]},d.prototype._scriptError=function(){c("_scriptError");var e=this;this.errorTimer||(this.errorTimer=setTimeout((function(){e.loadedOkay||e._abort(new Error("JSONP script loaded abnormally (onerror)"))}),d.scriptErrorTimeout))},d.prototype._createScript=function(e){c("_createScript",e);var t,r=this,a=this.script=n.document.createElement("script");if(a.id="a"+o.string(8),a.src=e,a.type="text/javascript",a.charset="UTF-8",a.onerror=this._scriptError.bind(this),a.onload=function(){c("onload"),r._abort(new Error("JSONP script loaded abnormally (onload)"))},a.onreadystatechange=function(){if(c("onreadystatechange",a.readyState),/loaded|closed/.test(a.readyState)){if(a&&a.htmlFor&&a.onclick){r.loadedOkay=!0;try{a.onclick()}catch(e){}}a&&r._abort(new Error("JSONP script loaded abnormally (onreadystatechange)"))}},void 0===a.async&&n.document.attachEvent)if(i.isOpera())(t=this.script2=n.document.createElement("script")).text="try{var a = document.getElementById('"+a.id+"'); if(a)a.onerror();}catch(x){};",a.async=t.async=!1;else{try{a.htmlFor=a.id,a.event="onclick"}catch(e){}a.async=!0}void 0!==a.async&&(a.async=!0);var s=n.document.getElementsByTagName("head")[0];s.insertBefore(a,s.firstChild),t&&s.insertBefore(t,s.firstChild)},r.exports=d}).call(this,{env:{}},void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/browser":44,"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,debug:55,events:3,inherits:57}],32:[function(e,t,r){(function(r){"use strict";var n=e("inherits"),a=e("events").EventEmitter,o=function(){};function i(e,t){o(e),a.call(this);var r=this;this.bufferPosition=0,this.xo=new t("POST",e,null),this.xo.on("chunk",this._chunkHandler.bind(this)),this.xo.once("finish",(function(e,t){o("finish",e,t),r._chunkHandler(e,t),r.xo=null;var n=200===e?"network":"permanent";o("close",n),r.emit("close",null,n),r._cleanup()}))}"production"!==r.env.NODE_ENV&&(o=e("debug")("sockjs-client:receiver:xhr")),n(i,a),i.prototype._chunkHandler=function(e,t){if(o("_chunkHandler",e),200===e&&t)for(var r=-1;;this.bufferPosition+=r+1){var n=t.slice(this.bufferPosition);if(-1===(r=n.indexOf("\n")))break;var a=n.slice(0,r);a&&(o("message",a),this.emit("message",a))}},i.prototype._cleanup=function(){o("_cleanup"),this.removeAllListeners()},i.prototype.abort=function(){o("abort"),this.xo&&(this.xo.close(),o("close"),this.emit("close",null,"user"),this.xo=null),this._cleanup()},t.exports=i}).call(this,{env:{}})},{debug:55,events:3,inherits:57}],33:[function(e,r,n){(function(t,n){"use strict";var a,o,i=e("../../utils/random"),s=e("../../utils/url"),l=function(){};function u(e){l("createIframe",e);try{return n.document.createElement('<iframe name="'+e+'">')}catch(r){var t=n.document.createElement("iframe");return t.name=e,t}}function c(){l("createForm"),(a=n.document.createElement("form")).style.display="none",a.style.position="absolute",a.method="POST",a.enctype="application/x-www-form-urlencoded",a.acceptCharset="UTF-8",(o=n.document.createElement("textarea")).name="d",a.appendChild(o),n.document.body.appendChild(a)}"production"!==t.env.NODE_ENV&&(l=e("debug")("sockjs-client:sender:jsonp")),r.exports=function(e,t,r){l(e,t),a||c();var n="a"+i.string(8);a.target=n,a.action=s.addQuery(s.addPath(e,"/jsonp_send"),"i="+n);var d=u(n);d.id=n,d.style.display="none",a.appendChild(d);try{o.value=t}catch(e){}a.submit();var p=function(e){l("completed",n,e),d.onerror&&(d.onreadystatechange=d.onerror=d.onload=null,setTimeout((function(){l("cleaning up",n),d.parentNode.removeChild(d),d=null}),500),o.value="",r(e))};return d.onerror=function(){l("onerror",n),p()},d.onload=function(){l("onload",n),p()},d.onreadystatechange=function(e){l("onreadystatechange",n,d.readyState,e),"complete"===d.readyState&&p()},function(){l("aborted",n),p(new Error("Aborted"))}}}).call(this,{env:{}},void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/random":50,"../../utils/url":52,debug:55}],34:[function(e,r,n){(function(t,n){"use strict";var a=e("events").EventEmitter,o=e("inherits"),i=e("../../utils/event"),s=e("../../utils/browser"),l=e("../../utils/url"),u=function(){};function c(e,t,r){u(e,t);var n=this;a.call(this),setTimeout((function(){n._start(e,t,r)}),0)}"production"!==t.env.NODE_ENV&&(u=e("debug")("sockjs-client:sender:xdr")),o(c,a),c.prototype._start=function(e,t,r){u("_start");var a=this,o=new n.XDomainRequest;t=l.addQuery(t,"t="+ +new Date),o.onerror=function(){u("onerror"),a._error()},o.ontimeout=function(){u("ontimeout"),a._error()},o.onprogress=function(){u("progress",o.responseText),a.emit("chunk",200,o.responseText)},o.onload=function(){u("load"),a.emit("finish",200,o.responseText),a._cleanup(!1)},this.xdr=o,this.unloadRef=i.unloadAdd((function(){a._cleanup(!0)}));try{this.xdr.open(e,t),this.timeout&&(this.xdr.timeout=this.timeout),this.xdr.send(r)}catch(e){this._error()}},c.prototype._error=function(){this.emit("finish",0,""),this._cleanup(!1)},c.prototype._cleanup=function(e){if(u("cleanup",e),this.xdr){if(this.removeAllListeners(),i.unloadDel(this.unloadRef),this.xdr.ontimeout=this.xdr.onerror=this.xdr.onprogress=this.xdr.onload=null,e)try{this.xdr.abort()}catch(e){}this.unloadRef=this.xdr=null}},c.prototype.close=function(){u("close"),this._cleanup(!0)},c.enabled=!(!n.XDomainRequest||!s.hasDomain()),r.exports=c}).call(this,{env:{}},void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/browser":44,"../../utils/event":46,"../../utils/url":52,debug:55,events:3,inherits:57}],35:[function(e,t,r){"use strict";var n=e("inherits"),a=e("../driver/xhr");function o(e,t,r,n){a.call(this,e,t,r,n)}n(o,a),o.enabled=a.enabled&&a.supportsCORS,t.exports=o},{"../driver/xhr":17,inherits:57}],36:[function(e,t,r){"use strict";var n=e("events").EventEmitter;function a(){var e=this;n.call(this),this.to=setTimeout((function(){e.emit("finish",200,"{}")}),a.timeout)}e("inherits")(a,n),a.prototype.close=function(){clearTimeout(this.to)},a.timeout=2e3,t.exports=a},{events:3,inherits:57}],37:[function(e,t,r){"use strict";var n=e("inherits"),a=e("../driver/xhr");function o(e,t,r){a.call(this,e,t,r,{noCredentials:!0})}n(o,a),o.enabled=a.enabled,t.exports=o},{"../driver/xhr":17,inherits:57}],38:[function(e,t,r){(function(r){"use strict";var n=e("../utils/event"),a=e("../utils/url"),o=e("inherits"),i=e("events").EventEmitter,s=e("./driver/websocket"),l=function(){};function u(e,t,r){if(!u.enabled())throw new Error("Transport created when disabled");i.call(this),l("constructor",e);var o=this,c=a.addPath(e,"/websocket");c="https"===c.slice(0,5)?"wss"+c.slice(5):"ws"+c.slice(4),this.url=c,this.ws=new s(this.url,[],r),this.ws.onmessage=function(e){l("message event",e.data),o.emit("message",e.data)},this.unloadRef=n.unloadAdd((function(){l("unload"),o.ws.close()})),this.ws.onclose=function(e){l("close event",e.code,e.reason),o.emit("close",e.code,e.reason),o._cleanup()},this.ws.onerror=function(e){l("error event",e),o.emit("close",1006,"WebSocket connection broken"),o._cleanup()}}"production"!==r.env.NODE_ENV&&(l=e("debug")("sockjs-client:websocket")),o(u,i),u.prototype.send=function(e){var t="["+e+"]";l("send",t),this.ws.send(t)},u.prototype.close=function(){l("close");var e=this.ws;this._cleanup(),e&&e.close()},u.prototype._cleanup=function(){l("_cleanup");var e=this.ws;e&&(e.onmessage=e.onclose=e.onerror=null),n.unloadDel(this.unloadRef),this.unloadRef=this.ws=null,this.removeAllListeners()},u.enabled=function(){return l("enabled"),!!s},u.transportName="websocket",u.roundTrips=2,t.exports=u}).call(this,{env:{}})},{"../utils/event":46,"../utils/url":52,"./driver/websocket":19,debug:55,events:3,inherits:57}],39:[function(e,t,r){"use strict";var n=e("inherits"),a=e("./lib/ajax-based"),o=e("./xdr-streaming"),i=e("./receiver/xhr"),s=e("./sender/xdr");function l(e){if(!s.enabled)throw new Error("Transport created when disabled");a.call(this,e,"/xhr",i,s)}n(l,a),l.enabled=o.enabled,l.transportName="xdr-polling",l.roundTrips=2,t.exports=l},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,"./xdr-streaming":40,inherits:57}],40:[function(e,t,r){"use strict";var n=e("inherits"),a=e("./lib/ajax-based"),o=e("./receiver/xhr"),i=e("./sender/xdr");function s(e){if(!i.enabled)throw new Error("Transport created when disabled");a.call(this,e,"/xhr_streaming",o,i)}n(s,a),s.enabled=function(e){return!e.cookie_needed&&!e.nullOrigin&&i.enabled&&e.sameScheme},s.transportName="xdr-streaming",s.roundTrips=2,t.exports=s},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,inherits:57}],41:[function(e,t,r){"use strict";var n=e("inherits"),a=e("./lib/ajax-based"),o=e("./receiver/xhr"),i=e("./sender/xhr-cors"),s=e("./sender/xhr-local");function l(e){if(!s.enabled&&!i.enabled)throw new Error("Transport created when disabled");a.call(this,e,"/xhr",o,i)}n(l,a),l.enabled=function(e){return!e.nullOrigin&&(!(!s.enabled||!e.sameOrigin)||i.enabled)},l.transportName="xhr-polling",l.roundTrips=2,t.exports=l},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,inherits:57}],42:[function(e,r,n){(function(t){"use strict";var n=e("inherits"),a=e("./lib/ajax-based"),o=e("./receiver/xhr"),i=e("./sender/xhr-cors"),s=e("./sender/xhr-local"),l=e("../utils/browser");function u(e){if(!s.enabled&&!i.enabled)throw new Error("Transport created when disabled");a.call(this,e,"/xhr_streaming",o,i)}n(u,a),u.enabled=function(e){return!e.nullOrigin&&!l.isOpera()&&i.enabled},u.transportName="xhr-streaming",u.roundTrips=2,u.needBody=!!t.document,r.exports=u}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../utils/browser":44,"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,inherits:57}],43:[function(e,r,n){(function(e){"use strict";e.crypto&&e.crypto.getRandomValues?r.exports.randomBytes=function(t){var r=new Uint8Array(t);return e.crypto.getRandomValues(r),r}:r.exports.randomBytes=function(e){for(var t=new Array(e),r=0;r<e;r++)t[r]=Math.floor(256*Math.random());return t}}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],44:[function(e,r,n){(function(e){"use strict";r.exports={isOpera:function(){return e.navigator&&/opera/i.test(e.navigator.userAgent)},isKonqueror:function(){return e.navigator&&/konqueror/i.test(e.navigator.userAgent)},hasDomain:function(){if(!e.document)return!0;try{return!!e.document.domain}catch(e){return!1}}}}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],45:[function(e,t,r){"use strict";var n,a=e("json3"),o=/[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g,i=function(e){var t,r={},n=[];for(t=0;t<65536;t++)n.push(String.fromCharCode(t));return e.lastIndex=0,n.join("").replace(e,(function(e){return r[e]="\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4),""})),e.lastIndex=0,r};t.exports={quote:function(e){var t=a.stringify(e);return o.lastIndex=0,o.test(t)?(n||(n=i(o)),t.replace(o,(function(e){return n[e]}))):t}}},{json3:58}],46:[function(e,r,n){(function(t){"use strict";var n=e("./random"),a={},o=!1,i=t.chrome&&t.chrome.app&&t.chrome.app.runtime;r.exports={attachEvent:function(e,r){void 0!==t.addEventListener?t.addEventListener(e,r,!1):t.document&&t.attachEvent&&(t.document.attachEvent("on"+e,r),t.attachEvent("on"+e,r))},detachEvent:function(e,r){void 0!==t.addEventListener?t.removeEventListener(e,r,!1):t.document&&t.detachEvent&&(t.document.detachEvent("on"+e,r),t.detachEvent("on"+e,r))},unloadAdd:function(e){if(i)return null;var t=n.string(8);return a[t]=e,o&&setTimeout(this.triggerUnloadCallbacks,0),t},unloadDel:function(e){e in a&&delete a[e]},triggerUnloadCallbacks:function(){for(var e in a)a[e](),delete a[e]}};var s=function(){o||(o=!0,r.exports.triggerUnloadCallbacks())};i||r.exports.attachEvent("unload",s)}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./random":50}],47:[function(e,r,n){(function(t,n){"use strict";var a=e("./event"),o=e("json3"),i=e("./browser"),s=function(){};"production"!==t.env.NODE_ENV&&(s=e("debug")("sockjs-client:utils:iframe")),r.exports={WPrefix:"_jp",currentWindowId:null,polluteGlobalNamespace:function(){r.exports.WPrefix in n||(n[r.exports.WPrefix]={})},postMessage:function(e,t){n.parent!==n?n.parent.postMessage(o.stringify({windowId:r.exports.currentWindowId,type:e,data:t||""}),"*"):s("Cannot postMessage, no parent window.",e,t)},createIframe:function(e,t){var r,o,i=n.document.createElement("iframe"),l=function(){s("unattach"),clearTimeout(r);try{i.onload=null}catch(e){}i.onerror=null},u=function(){s("cleanup"),i&&(l(),setTimeout((function(){i&&i.parentNode.removeChild(i),i=null}),0),a.unloadDel(o))},c=function(e){s("onerror",e),i&&(u(),t(e))},d=function(e,t){s("post",e,t),setTimeout((function(){try{i&&i.contentWindow&&i.contentWindow.postMessage(e,t)}catch(e){}}),0)};return i.src=e,i.style.display="none",i.style.position="absolute",i.onerror=function(){c("onerror")},i.onload=function(){s("onload"),clearTimeout(r),r=setTimeout((function(){c("onload timeout")}),2e3)},n.document.body.appendChild(i),r=setTimeout((function(){c("timeout")}),15e3),o=a.unloadAdd(u),{post:d,cleanup:u,loaded:l}},createHtmlfile:function(e,t){var o,i,l,u=["Active"].concat("Object").join("X"),c=new n[u]("htmlfile"),d=function(){clearTimeout(o),l.onerror=null},p=function(){c&&(d(),a.unloadDel(i),l.parentNode.removeChild(l),l=c=null,CollectGarbage())},f=function(e){s("onerror",e),c&&(p(),t(e))},h=function(e,t){try{setTimeout((function(){l&&l.contentWindow&&l.contentWindow.postMessage(e,t)}),0)}catch(e){}};c.open(),c.write('<html><script>document.domain="'+n.document.domain+'";<\/script></html>'),c.close(),c.parentWindow[r.exports.WPrefix]=n[r.exports.WPrefix];var m=c.createElement("div");return c.body.appendChild(m),l=c.createElement("iframe"),m.appendChild(l),l.src=e,l.onerror=function(){f("onerror")},o=setTimeout((function(){f("timeout")}),15e3),i=a.unloadAdd(p),{post:h,cleanup:p,loaded:d}}},r.exports.iframeEnabled=!1,n.document&&(r.exports.iframeEnabled=("function"==typeof n.postMessage||"object"==typeof n.postMessage)&&!i.isKonqueror())}).call(this,{env:{}},void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./browser":44,"./event":46,debug:55,json3:58}],48:[function(e,r,n){(function(e){"use strict";var t={};["log","debug","warn"].forEach((function(r){var n;try{n=e.console&&e.console[r]&&e.console[r].apply}catch(e){}t[r]=n?function(){return e.console[r].apply(e.console,arguments)}:"log"===r?function(){}:t.log})),r.exports=t}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],49:[function(e,t,r){"use strict";t.exports={isObject:function(e){var t=typeof e;return"function"===t||"object"===t&&!!e},extend:function(e){if(!this.isObject(e))return e;for(var t,r,n=1,a=arguments.length;n<a;n++)for(r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}}},{}],50:[function(e,t,r){"use strict";var n=e("crypto"),a="abcdefghijklmnopqrstuvwxyz012345";t.exports={string:function(e){for(var t=a.length,r=n.randomBytes(e),o=[],i=0;i<e;i++)o.push(a.substr(r[i]%t,1));return o.join("")},number:function(e){return Math.floor(Math.random()*e)},numberString:function(e){var t=(""+(e-1)).length;return(new Array(t+1).join("0")+this.number(e)).slice(-t)}}},{crypto:43}],51:[function(e,t,r){(function(r){"use strict";var n=function(){};"production"!==r.env.NODE_ENV&&(n=e("debug")("sockjs-client:utils:transport")),t.exports=function(e){return{filterToEnabled:function(t,r){var a={main:[],facade:[]};return t?"string"==typeof t&&(t=[t]):t=[],e.forEach((function(e){e&&("websocket"!==e.transportName||!1!==r.websocket?t.length&&-1===t.indexOf(e.transportName)?n("not in whitelist",e.transportName):e.enabled(r)?(n("enabled",e.transportName),a.main.push(e),e.facadeTransport&&a.facade.push(e.facadeTransport)):n("disabled",e.transportName):n("disabled from server","websocket"))})),a}}}}).call(this,{env:{}})},{debug:55}],52:[function(e,t,r){(function(r){"use strict";var n=e("url-parse"),a=function(){};"production"!==r.env.NODE_ENV&&(a=e("debug")("sockjs-client:utils:url")),t.exports={getOrigin:function(e){if(!e)return null;var t=new n(e);if("file:"===t.protocol)return null;var r=t.port;return r||(r="https:"===t.protocol?"443":"80"),t.protocol+"//"+t.hostname+":"+r},isOriginEqual:function(e,t){var r=this.getOrigin(e)===this.getOrigin(t);return a("same",e,t,r),r},isSchemeEqual:function(e,t){return e.split(":")[0]===t.split(":")[0]},addPath:function(e,t){var r=e.split("?");return r[0]+t+(r[1]?"?"+r[1]:"")},addQuery:function(e,t){return e+(-1===e.indexOf("?")?"?"+t:"&"+t)}}}).call(this,{env:{}})},{debug:55,"url-parse":61}],53:[function(e,t,r){t.exports="1.4.0"},{}],54:[function(e,t,r){var n=1e3,a=60*n,o=60*a,i=24*o,s=7*i,l=365.25*i;function u(e){if(!((e=String(e)).length>100)){var t=/^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(t){var r=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return r*l;case"weeks":case"week":case"w":return r*s;case"days":case"day":case"d":return r*i;case"hours":case"hour":case"hrs":case"hr":case"h":return r*o;case"minutes":case"minute":case"mins":case"min":case"m":return r*a;case"seconds":case"second":case"secs":case"sec":case"s":return r*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r;default:return}}}}function c(e){var t=Math.abs(e);return t>=i?Math.round(e/i)+"d":t>=o?Math.round(e/o)+"h":t>=a?Math.round(e/a)+"m":t>=n?Math.round(e/n)+"s":e+"ms"}function d(e){var t=Math.abs(e);return t>=i?p(e,t,i,"day"):t>=o?p(e,t,o,"hour"):t>=a?p(e,t,a,"minute"):t>=n?p(e,t,n,"second"):e+" ms"}function p(e,t,r,n){var a=t>=1.5*r;return Math.round(e/r)+" "+n+(a?"s":"")}t.exports=function(e,t){t=t||{};var r=typeof e;if("string"===r&&e.length>0)return u(e);if("number"===r&&!1===isNaN(e))return t.long?d(e):c(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},{}],55:[function(e,t,r){(function(n){"use strict";function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))}function i(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),this.useColors){var r="color: "+this.color;e.splice(1,0,r,"color: inherit");var n=0,a=0;e[0].replace(/%[a-zA-Z%]/g,(function(e){"%%"!==e&&(n++,"%c"===e&&(a=n))})),e.splice(a,0,r)}}function s(){var e;return"object"===("undefined"==typeof console?"undefined":a(console))&&console.log&&(e=console).log.apply(e,arguments)}function l(e){try{e?r.storage.setItem("debug",e):r.storage.removeItem("debug")}catch(e){}}function u(){var e;try{e=r.storage.getItem("debug")}catch(e){}return!e&&void 0!==n&&"env"in n&&(e=n.env.DEBUG),e}function c(){try{return localStorage}catch(e){}}r.log=s,r.formatArgs=i,r.save=l,r.load=u,r.useColors=o,r.storage=c(),r.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=e("./common")(r),t.exports.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}}).call(this,{env:{}})},{"./common":56}],56:[function(e,t,r){"use strict";function n(t){function r(e){for(var t=0,r=0;r<e.length;r++)t=(t<<5)-t+e.charCodeAt(r),t|=0;return n.colors[Math.abs(t)%n.colors.length]}function n(e){var t;function i(){for(var e=arguments.length,r=new Array(e),a=0;a<e;a++)r[a]=arguments[a];if(i.enabled){var o=i,s=Number(new Date),l=s-(t||s);o.diff=l,o.prev=t,o.curr=s,t=s,r[0]=n.coerce(r[0]),"string"!=typeof r[0]&&r.unshift("%O");var u=0;r[0]=r[0].replace(/%([a-zA-Z%])/g,(function(e,t){if("%%"===e)return e;u++;var a=n.formatters[t];if("function"==typeof a){var i=r[u];e=a.call(o,i),r.splice(u,1),u--}return e})),n.formatArgs.call(o,r),(o.log||n.log).apply(o,r)}}return i.namespace=e,i.enabled=n.enabled(e),i.useColors=n.useColors(),i.color=r(e),i.destroy=a,i.extend=o,"function"==typeof n.init&&n.init(i),n.instances.push(i),i}function a(){var e=n.instances.indexOf(this);return-1!==e&&(n.instances.splice(e,1),!0)}function o(e,t){return n(this.namespace+(void 0===t?":":t)+e)}function i(e){var t;n.save(e),n.names=[],n.skips=[];var r=("string"==typeof e?e:"").split(/[\s,]+/),a=r.length;for(t=0;t<a;t++)r[t]&&("-"===(e=r[t].replace(/\*/g,".*?"))[0]?n.skips.push(new RegExp("^"+e.substr(1)+"$")):n.names.push(new RegExp("^"+e+"$")));for(t=0;t<n.instances.length;t++){var o=n.instances[t];o.enabled=n.enabled(o.namespace)}}function s(){n.enable("")}function l(e){if("*"===e[e.length-1])return!0;var t,r;for(t=0,r=n.skips.length;t<r;t++)if(n.skips[t].test(e))return!1;for(t=0,r=n.names.length;t<r;t++)if(n.names[t].test(e))return!0;return!1}function u(e){return e instanceof Error?e.stack||e.message:e}return n.debug=n,n.default=n,n.coerce=u,n.disable=s,n.enable=i,n.enabled=l,n.humanize=e("ms"),Object.keys(t).forEach((function(e){n[e]=t[e]})),n.instances=[],n.names=[],n.skips=[],n.formatters={},n.selectColor=r,n.enable(n.load()),n}t.exports=n},{ms:54}],57:[function(e,t,r){"function"==typeof Object.create?t.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(e,t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}},{}],58:[function(e,n,a){(function(e){(function(){var t="function"==typeof r&&r.amd,o={function:!0,object:!0},i=o[typeof a]&&a&&!a.nodeType&&a,s=o[typeof window]&&window||this,l=i&&o[typeof n]&&n&&!n.nodeType&&"object"==typeof e&&e;function u(e,t){e||(e=s.Object()),t||(t=s.Object());var r=e.Number||s.Number,n=e.String||s.String,a=e.Object||s.Object,i=e.Date||s.Date,l=e.SyntaxError||s.SyntaxError,c=e.TypeError||s.TypeError,d=e.Math||s.Math,p=e.JSON||s.JSON;"object"==typeof p&&p&&(t.stringify=p.stringify,t.parse=p.parse);var f,h,m,g=a.prototype,v=g.toString,b=new i(-0xc782b5b800cec);try{b=-109252==b.getUTCFullYear()&&0===b.getUTCMonth()&&1===b.getUTCDate()&&10==b.getUTCHours()&&37==b.getUTCMinutes()&&6==b.getUTCSeconds()&&708==b.getUTCMilliseconds()}catch(e){}function y(e){if(y[e]!==m)return y[e];var a;if("bug-string-char-index"==e)a="a"!="a"[0];else if("json"==e)a=y("json-stringify")&&y("json-parse");else{var o,s='{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';if("json-stringify"==e){var l=t.stringify,u="function"==typeof l&&b;if(u){(o=function(){return 1}).toJSON=o;try{u="0"===l(0)&&"0"===l(new r)&&'""'==l(new n)&&l(v)===m&&l(m)===m&&l()===m&&"1"===l(o)&&"[1]"==l([o])&&"[null]"==l([m])&&"null"==l(null)&&"[null,null,null]"==l([m,v,null])&&l({a:[o,!0,!1,null,"\0\b\n\f\r\t"]})==s&&"1"===l(null,o)&&"[\n 1,\n 2\n]"==l([1,2],null,1)&&'"-271821-04-20T00:00:00.000Z"'==l(new i(-864e13))&&'"+275760-09-13T00:00:00.000Z"'==l(new i(864e13))&&'"-000001-01-01T00:00:00.000Z"'==l(new i(-621987552e5))&&'"1969-12-31T23:59:59.999Z"'==l(new i(-1))}catch(e){u=!1}}a=u}if("json-parse"==e){var c=t.parse;if("function"==typeof c)try{if(0===c("0")&&!c(!1)){var d=5==(o=c(s)).a.length&&1===o.a[0];if(d){try{d=!c('"\t"')}catch(e){}if(d)try{d=1!==c("01")}catch(e){}if(d)try{d=1!==c("1.")}catch(e){}}}}catch(e){d=!1}a=d}}return y[e]=!!a}if(!y("json")){var w="[object Function]",S="[object Date]",C="[object Number]",A="[object String]",E="[object Array]",M="[object Boolean]",T=y("bug-string-char-index");if(!b)var N=d.floor,L=[0,31,59,90,120,151,181,212,243,273,304,334],k=function(e,t){return L[t]+365*(e-1970)+N((e-1969+(t=+(t>1)))/4)-N((e-1901+t)/100)+N((e-1601+t)/400)};if((f=g.hasOwnProperty)||(f=function(e){var t,r={};return(r.__proto__=null,r.__proto__={toString:1},r).toString!=v?f=function(e){var t=this.__proto__,r=e in(this.__proto__=null,this);return this.__proto__=t,r}:(t=r.constructor,f=function(e){var r=(this.constructor||t).prototype;return e in this&&!(e in r&&this[e]===r[e])}),r=null,f.call(this,e)}),h=function(e,t){var r,n,a,i=0;for(a in(r=function(){this.valueOf=0}).prototype.valueOf=0,n=new r)f.call(n,a)&&i++;return r=n=null,i?h=2==i?function(e,t){var r,n={},a=v.call(e)==w;for(r in e)a&&"prototype"==r||f.call(n,r)||!(n[r]=1)||!f.call(e,r)||t(r)}:function(e,t){var r,n,a=v.call(e)==w;for(r in e)a&&"prototype"==r||!f.call(e,r)||(n="constructor"===r)||t(r);(n||f.call(e,r="constructor"))&&t(r)}:(n=["valueOf","toString","toLocaleString","propertyIsEnumerable","isPrototypeOf","hasOwnProperty","constructor"],h=function(e,t){var r,a,i=v.call(e)==w,s=!i&&"function"!=typeof e.constructor&&o[typeof e.hasOwnProperty]&&e.hasOwnProperty||f;for(r in e)i&&"prototype"==r||!s.call(e,r)||t(r);for(a=n.length;r=n[--a];s.call(e,r)&&t(r));}),h(e,t)},!y("json-stringify")){var x={92:"\\\\",34:'\\"',8:"\\b",12:"\\f",10:"\\n",13:"\\r",9:"\\t"},G="000000",B=function(e,t){return(G+(t||0)).slice(-e)},I="\\u00",R=function(e){for(var t='"',r=0,n=e.length,a=!T||n>10,o=a&&(T?e.split(""):e);r<n;r++){var i=e.charCodeAt(r);switch(i){case 8:case 9:case 10:case 12:case 13:case 34:case 92:t+=x[i];break;default:if(i<32){t+=I+B(2,i.toString(16));break}t+=a?o[r]:e.charAt(r)}}return t+'"'},O=function(e,t,r,n,a,o,i){var s,l,u,d,p,g,b,y,w,T,L,x,G,I,_,P;try{s=t[e]}catch(e){}if("object"==typeof s&&s)if((l=v.call(s))!=S||f.call(s,"toJSON"))"function"==typeof s.toJSON&&(l!=C&&l!=A&&l!=E||f.call(s,"toJSON"))&&(s=s.toJSON(e));else if(s>-1/0&&s<1/0){if(k){for(p=N(s/864e5),u=N(p/365.2425)+1970-1;k(u+1,0)<=p;u++);for(d=N((p-k(u,0))/30.42);k(u,d+1)<=p;d++);p=1+p-k(u,d),b=N((g=(s%864e5+864e5)%864e5)/36e5)%24,y=N(g/6e4)%60,w=N(g/1e3)%60,T=g%1e3}else u=s.getUTCFullYear(),d=s.getUTCMonth(),p=s.getUTCDate(),b=s.getUTCHours(),y=s.getUTCMinutes(),w=s.getUTCSeconds(),T=s.getUTCMilliseconds();s=(u<=0||u>=1e4?(u<0?"-":"+")+B(6,u<0?-u:u):B(4,u))+"-"+B(2,d+1)+"-"+B(2,p)+"T"+B(2,b)+":"+B(2,y)+":"+B(2,w)+"."+B(3,T)+"Z"}else s=null;if(r&&(s=r.call(t,e,s)),null===s)return"null";if((l=v.call(s))==M)return""+s;if(l==C)return s>-1/0&&s<1/0?""+s:"null";if(l==A)return R(""+s);if("object"==typeof s){for(I=i.length;I--;)if(i[I]===s)throw c();if(i.push(s),L=[],_=o,o+=a,l==E){for(G=0,I=s.length;G<I;G++)x=O(G,s,r,n,a,o,i),L.push(x===m?"null":x);P=L.length?a?"[\n"+o+L.join(",\n"+o)+"\n"+_+"]":"["+L.join(",")+"]":"[]"}else h(n||s,(function(e){var t=O(e,s,r,n,a,o,i);t!==m&&L.push(R(e)+":"+(a?" ":"")+t)})),P=L.length?a?"{\n"+o+L.join(",\n"+o)+"\n"+_+"}":"{"+L.join(",")+"}":"{}";return i.pop(),P}};t.stringify=function(e,t,r){var n,a,i,s;if(o[typeof t]&&t)if((s=v.call(t))==w)a=t;else if(s==E){i={};for(var l,u=0,c=t.length;u<c;l=t[u++],((s=v.call(l))==A||s==C)&&(i[l]=1));}if(r)if((s=v.call(r))==C){if((r-=r%1)>0)for(n="",r>10&&(r=10);n.length<r;n+=" ");}else s==A&&(n=r.length<=10?r:r.slice(0,10));return O("",((l={})[""]=e,l),a,i,n,"",[])}}if(!y("json-parse")){var _,P,j=n.fromCharCode,D={92:"\\",34:'"',47:"/",98:"\b",116:"\t",110:"\n",102:"\f",114:"\r"},q=function(){throw _=P=null,l()},U=function(){for(var e,t,r,n,a,o=P,i=o.length;_<i;)switch(a=o.charCodeAt(_)){case 9:case 10:case 13:case 32:_++;break;case 123:case 125:case 91:case 93:case 58:case 44:return e=T?o.charAt(_):o[_],_++,e;case 34:for(e="@",_++;_<i;)if((a=o.charCodeAt(_))<32)q();else if(92==a)switch(a=o.charCodeAt(++_)){case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:e+=D[a],_++;break;case 117:for(t=++_,r=_+4;_<r;_++)(a=o.charCodeAt(_))>=48&&a<=57||a>=97&&a<=102||a>=65&&a<=70||q();e+=j("0x"+o.slice(t,_));break;default:q()}else{if(34==a)break;for(a=o.charCodeAt(_),t=_;a>=32&&92!=a&&34!=a;)a=o.charCodeAt(++_);e+=o.slice(t,_)}if(34==o.charCodeAt(_))return _++,e;q();default:if(t=_,45==a&&(n=!0,a=o.charCodeAt(++_)),a>=48&&a<=57){for(48==a&&(a=o.charCodeAt(_+1))>=48&&a<=57&&q(),n=!1;_<i&&(a=o.charCodeAt(_))>=48&&a<=57;_++);if(46==o.charCodeAt(_)){for(r=++_;r<i&&(a=o.charCodeAt(r))>=48&&a<=57;r++);r==_&&q(),_=r}if(101==(a=o.charCodeAt(_))||69==a){for(43!=(a=o.charCodeAt(++_))&&45!=a||_++,r=_;r<i&&(a=o.charCodeAt(r))>=48&&a<=57;r++);r==_&&q(),_=r}return+o.slice(t,_)}if(n&&q(),"true"==o.slice(_,_+4))return _+=4,!0;if("false"==o.slice(_,_+5))return _+=5,!1;if("null"==o.slice(_,_+4))return _+=4,null;q()}return"$"},F=function(e){var t,r;if("$"==e&&q(),"string"==typeof e){if("@"==(T?e.charAt(0):e[0]))return e.slice(1);if("["==e){for(t=[];"]"!=(e=U());r||(r=!0))r&&(","==e?"]"==(e=U())&&q():q()),","==e&&q(),t.push(F(e));return t}if("{"==e){for(t={};"}"!=(e=U());r||(r=!0))r&&(","==e?"}"==(e=U())&&q():q()),","!=e&&"string"==typeof e&&"@"==(T?e.charAt(0):e[0])&&":"==U()||q(),t[e.slice(1)]=F(U());return t}q()}return e},K=function(e,t,r){var n=H(e,t,r);n===m?delete e[t]:e[t]=n},H=function(e,t,r){var n,a=e[t];if("object"==typeof a&&a)if(v.call(a)==E)for(n=a.length;n--;)K(a,n,r);else h(a,(function(e){K(a,e,r)}));return r.call(e,t,a)};t.parse=function(e,t){var r,n;return _=0,P=""+e,r=F(U()),"$"!=U()&&q(),_=P=null,t&&v.call(t)==w?H(((n={})[""]=r,n),"",t):r}}}return t.runInContext=u,t}if(!l||l.global!==l&&l.window!==l&&l.self!==l||(s=l),i&&!t)u(s,i);else{var c=s.JSON,d=s.JSON3,p=!1,f=u(s,s.JSON3={noConflict:function(){return p||(p=!0,s.JSON=c,s.JSON3=d,c=d=null),f}});s.JSON={parse:f.parse,stringify:f.stringify}}t&&r((function(){return f}))}).call(this)}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],59:[function(e,t,r){"use strict";var n=Object.prototype.hasOwnProperty;function a(e){return decodeURIComponent(e.replace(/\+/g," "))}function o(e){for(var t,r=/([^=?&]+)=?([^&]*)/g,n={};t=r.exec(e);){var o=a(t[1]),i=a(t[2]);o in n||(n[o]=i)}return n}function i(e,t){t=t||"";var r=[];for(var a in"string"!=typeof t&&(t="?"),e)n.call(e,a)&&r.push(encodeURIComponent(a)+"="+encodeURIComponent(e[a]));return r.length?t+r.join("&"):""}r.stringify=i,r.parse=o},{}],60:[function(e,t,r){"use strict";t.exports=function(e,t){if(t=t.split(":")[0],!(e=+e))return!1;switch(t){case"http":case"ws":return 80!==e;case"https":case"wss":return 443!==e;case"ftp":return 21!==e;case"gopher":return 70!==e;case"file":return!1}return 0!==e}},{}],61:[function(e,r,n){(function(t){"use strict";var n=e("requires-port"),a=e("querystringify"),o=/^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i,i=/^[A-Za-z][A-Za-z0-9+-.]*:\/\//,s=[["#","hash"],["?","query"],function(e){return e.replace("\\","/")},["/","pathname"],["@","auth",1],[NaN,"host",void 0,1,1],[/:(\d+)$/,"port",void 0,1],[NaN,"hostname",void 0,1,1]],l={hash:1,query:1};function u(e){var r,n=t&&t.location||{},a={},o=typeof(e=e||n);if("blob:"===e.protocol)a=new p(unescape(e.pathname),{});else if("string"===o)for(r in a=new p(e,{}),l)delete a[r];else if("object"===o){for(r in e)r in l||(a[r]=e[r]);void 0===a.slashes&&(a.slashes=i.test(e.href))}return a}function c(e){var t=o.exec(e);return{protocol:t[1]?t[1].toLowerCase():"",slashes:!!t[2],rest:t[3]}}function d(e,t){for(var r=(t||"/").split("/").slice(0,-1).concat(e.split("/")),n=r.length,a=r[n-1],o=!1,i=0;n--;)"."===r[n]?r.splice(n,1):".."===r[n]?(r.splice(n,1),i++):i&&(0===n&&(o=!0),r.splice(n,1),i--);return o&&r.unshift(""),"."!==a&&".."!==a||r.push(""),r.join("/")}function p(e,t,r){if(!(this instanceof p))return new p(e,t,r);var o,i,l,f,h,m,g=s.slice(),v=typeof t,b=this,y=0;for("object"!==v&&"string"!==v&&(r=t,t=null),r&&"function"!=typeof r&&(r=a.parse),t=u(t),o=!(i=c(e||"")).protocol&&!i.slashes,b.slashes=i.slashes||o&&t.slashes,b.protocol=i.protocol||t.protocol||"",e=i.rest,i.slashes||(g[3]=[/(.*)/,"pathname"]);y<g.length;y++)"function"!=typeof(f=g[y])?(l=f[0],m=f[1],l!=l?b[m]=e:"string"==typeof l?~(h=e.indexOf(l))&&("number"==typeof f[2]?(b[m]=e.slice(0,h),e=e.slice(h+f[2])):(b[m]=e.slice(h),e=e.slice(0,h))):(h=l.exec(e))&&(b[m]=h[1],e=e.slice(0,h.index)),b[m]=b[m]||o&&f[3]&&t[m]||"",f[4]&&(b[m]=b[m].toLowerCase())):e=f(e);r&&(b.query=r(b.query)),o&&t.slashes&&"/"!==b.pathname.charAt(0)&&(""!==b.pathname||""!==t.pathname)&&(b.pathname=d(b.pathname,t.pathname)),n(b.port,b.protocol)||(b.host=b.hostname,b.port=""),b.username=b.password="",b.auth&&(f=b.auth.split(":"),b.username=f[0]||"",b.password=f[1]||""),b.origin=b.protocol&&b.host&&"file:"!==b.protocol?b.protocol+"//"+b.host:"null",b.href=b.toString()}function f(e,t,r){var o=this;switch(e){case"query":"string"==typeof t&&t.length&&(t=(r||a.parse)(t)),o[e]=t;break;case"port":o[e]=t,n(t,o.protocol)?t&&(o.host=o.hostname+":"+t):(o.host=o.hostname,o[e]="");break;case"hostname":o[e]=t,o.port&&(t+=":"+o.port),o.host=t;break;case"host":o[e]=t,/:\d+$/.test(t)?(t=t.split(":"),o.port=t.pop(),o.hostname=t.join(":")):(o.hostname=t,o.port="");break;case"protocol":o.protocol=t.toLowerCase(),o.slashes=!r;break;case"pathname":case"hash":if(t){var i="pathname"===e?"/":"#";o[e]=t.charAt(0)!==i?i+t:t}else o[e]=t;break;default:o[e]=t}for(var l=0;l<s.length;l++){var u=s[l];u[4]&&(o[u[1]]=o[u[1]].toLowerCase())}return o.origin=o.protocol&&o.host&&"file:"!==o.protocol?o.protocol+"//"+o.host:"null",o.href=o.toString(),o}function h(e){e&&"function"==typeof e||(e=a.stringify);var t,r=this,n=r.protocol;n&&":"!==n.charAt(n.length-1)&&(n+=":");var o=n+(r.slashes?"//":"");return r.username&&(o+=r.username,r.password&&(o+=":"+r.password),o+="@"),o+=r.host+r.pathname,(t="object"==typeof r.query?e(r.query):r.query)&&(o+="?"!==t.charAt(0)?"?"+t:t),r.hash&&(o+=r.hash),o}p.prototype={set:f,toString:h},p.extractProtocol=c,p.location=u,p.qs=a,r.exports=p}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{querystringify:59,"requires-port":60}]},{},[1])(1)}).call(this,r("./node_modules/webpack/buildin/global.js"))},"./node_modules/url/url.js":function(e,t,r){"use strict";var n=r("./node_modules/node-libs-browser/node_modules/punycode/punycode.js"),a=r("./node_modules/url/util.js");function o(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}t.parse=y,t.resolve=function(e,t){return y(e,!1,!0).resolve(t)},t.resolveObject=function(e,t){return e?y(e,!1,!0).resolveObject(t):t},t.format=function(e){a.isString(e)&&(e=y(e));return e instanceof o?e.format():o.prototype.format.call(e)},t.Url=o;var i=/^([a-z0-9.+-]+:)/i,s=/:[0-9]*$/,l=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,u=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),c=["'"].concat(u),d=["%","/","?",";","#"].concat(c),p=["/","?","#"],f=/^[+a-z0-9A-Z_-]{0,63}$/,h=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,m={javascript:!0,"javascript:":!0},g={javascript:!0,"javascript:":!0},v={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},b=r("./node_modules/querystring-es3/index.js");function y(e,t,r){if(e&&a.isObject(e)&&e instanceof o)return e;var n=new o;return n.parse(e,t,r),n}o.prototype.parse=function(e,t,r){if(!a.isString(e))throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var o=e.indexOf("?"),s=-1!==o&&o<e.indexOf("#")?"?":"#",u=e.split(s);u[0]=u[0].replace(/\\/g,"/");var y=e=u.join(s);if(y=y.trim(),!r&&1===e.split("#").length){var w=l.exec(y);if(w)return this.path=y,this.href=y,this.pathname=w[1],w[2]?(this.search=w[2],this.query=t?b.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var S=i.exec(y);if(S){var C=(S=S[0]).toLowerCase();this.protocol=C,y=y.substr(S.length)}if(r||S||y.match(/^\/\/[^@\/]+@[^@\/]+/)){var A="//"===y.substr(0,2);!A||S&&g[S]||(y=y.substr(2),this.slashes=!0)}if(!g[S]&&(A||S&&!v[S])){for(var E,M,T=-1,N=0;N<p.length;N++){-1!==(L=y.indexOf(p[N]))&&(-1===T||L<T)&&(T=L)}-1!==(M=-1===T?y.lastIndexOf("@"):y.lastIndexOf("@",T))&&(E=y.slice(0,M),y=y.slice(M+1),this.auth=decodeURIComponent(E)),T=-1;for(N=0;N<d.length;N++){var L;-1!==(L=y.indexOf(d[N]))&&(-1===T||L<T)&&(T=L)}-1===T&&(T=y.length),this.host=y.slice(0,T),y=y.slice(T),this.parseHost(),this.hostname=this.hostname||"";var k="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!k)for(var x=this.hostname.split(/\./),G=(N=0,x.length);N<G;N++){var B=x[N];if(B&&!B.match(f)){for(var I="",R=0,O=B.length;R<O;R++)B.charCodeAt(R)>127?I+="x":I+=B[R];if(!I.match(f)){var _=x.slice(0,N),P=x.slice(N+1),j=B.match(h);j&&(_.push(j[1]),P.unshift(j[2])),P.length&&(y="/"+P.join(".")+y),this.hostname=_.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),k||(this.hostname=n.toASCII(this.hostname));var D=this.port?":"+this.port:"",q=this.hostname||"";this.host=q+D,this.href+=this.host,k&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==y[0]&&(y="/"+y))}if(!m[C])for(N=0,G=c.length;N<G;N++){var U=c[N];if(-1!==y.indexOf(U)){var F=encodeURIComponent(U);F===U&&(F=escape(U)),y=y.split(U).join(F)}}var K=y.indexOf("#");-1!==K&&(this.hash=y.substr(K),y=y.slice(0,K));var H=y.indexOf("?");if(-1!==H?(this.search=y.substr(H),this.query=y.substr(H+1),t&&(this.query=b.parse(this.query)),y=y.slice(0,H)):t&&(this.search="",this.query={}),y&&(this.pathname=y),v[C]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){D=this.pathname||"";var V=this.search||"";this.path=D+V}return this.href=this.format(),this},o.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",r=this.pathname||"",n=this.hash||"",o=!1,i="";this.host?o=e+this.host:this.hostname&&(o=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(o+=":"+this.port)),this.query&&a.isObject(this.query)&&Object.keys(this.query).length&&(i=b.stringify(this.query));var s=this.search||i&&"?"+i||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||v[t])&&!1!==o?(o="//"+(o||""),r&&"/"!==r.charAt(0)&&(r="/"+r)):o||(o=""),n&&"#"!==n.charAt(0)&&(n="#"+n),s&&"?"!==s.charAt(0)&&(s="?"+s),t+o+(r=r.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(s=s.replace("#","%23"))+n},o.prototype.resolve=function(e){return this.resolveObject(y(e,!1,!0)).format()},o.prototype.resolveObject=function(e){if(a.isString(e)){var t=new o;t.parse(e,!1,!0),e=t}for(var r=new o,n=Object.keys(this),i=0;i<n.length;i++){var s=n[i];r[s]=this[s]}if(r.hash=e.hash,""===e.href)return r.href=r.format(),r;if(e.slashes&&!e.protocol){for(var l=Object.keys(e),u=0;u<l.length;u++){var c=l[u];"protocol"!==c&&(r[c]=e[c])}return v[r.protocol]&&r.hostname&&!r.pathname&&(r.path=r.pathname="/"),r.href=r.format(),r}if(e.protocol&&e.protocol!==r.protocol){if(!v[e.protocol]){for(var d=Object.keys(e),p=0;p<d.length;p++){var f=d[p];r[f]=e[f]}return r.href=r.format(),r}if(r.protocol=e.protocol,e.host||g[e.protocol])r.pathname=e.pathname;else{for(var h=(e.pathname||"").split("/");h.length&&!(e.host=h.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==h[0]&&h.unshift(""),h.length<2&&h.unshift(""),r.pathname=h.join("/")}if(r.search=e.search,r.query=e.query,r.host=e.host||"",r.auth=e.auth,r.hostname=e.hostname||e.host,r.port=e.port,r.pathname||r.search){var m=r.pathname||"",b=r.search||"";r.path=m+b}return r.slashes=r.slashes||e.slashes,r.href=r.format(),r}var y=r.pathname&&"/"===r.pathname.charAt(0),w=e.host||e.pathname&&"/"===e.pathname.charAt(0),S=w||y||r.host&&e.pathname,C=S,A=r.pathname&&r.pathname.split("/")||[],E=(h=e.pathname&&e.pathname.split("/")||[],r.protocol&&!v[r.protocol]);if(E&&(r.hostname="",r.port=null,r.host&&(""===A[0]?A[0]=r.host:A.unshift(r.host)),r.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===h[0]?h[0]=e.host:h.unshift(e.host)),e.host=null),S=S&&(""===h[0]||""===A[0])),w)r.host=e.host||""===e.host?e.host:r.host,r.hostname=e.hostname||""===e.hostname?e.hostname:r.hostname,r.search=e.search,r.query=e.query,A=h;else if(h.length)A||(A=[]),A.pop(),A=A.concat(h),r.search=e.search,r.query=e.query;else if(!a.isNullOrUndefined(e.search)){if(E)r.hostname=r.host=A.shift(),(k=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=k.shift(),r.host=r.hostname=k.shift());return r.search=e.search,r.query=e.query,a.isNull(r.pathname)&&a.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.href=r.format(),r}if(!A.length)return r.pathname=null,r.search?r.path="/"+r.search:r.path=null,r.href=r.format(),r;for(var M=A.slice(-1)[0],T=(r.host||e.host||A.length>1)&&("."===M||".."===M)||""===M,N=0,L=A.length;L>=0;L--)"."===(M=A[L])?A.splice(L,1):".."===M?(A.splice(L,1),N++):N&&(A.splice(L,1),N--);if(!S&&!C)for(;N--;N)A.unshift("..");!S||""===A[0]||A[0]&&"/"===A[0].charAt(0)||A.unshift(""),T&&"/"!==A.join("/").substr(-1)&&A.push("");var k,x=""===A[0]||A[0]&&"/"===A[0].charAt(0);E&&(r.hostname=r.host=x?"":A.length?A.shift():"",(k=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=k.shift(),r.host=r.hostname=k.shift()));return(S=S||r.host&&A.length)&&!x&&A.unshift(""),A.length?r.pathname=A.join("/"):(r.pathname=null,r.path=null),a.isNull(r.pathname)&&a.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.auth=e.auth||r.auth,r.slashes=r.slashes||e.slashes,r.href=r.format(),r},o.prototype.parseHost=function(){var e=this.host,t=s.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},"./node_modules/url/util.js":function(e,t,r){"use strict";e.exports={isString:function(e){return"string"==typeof e},isObject:function(e){return"object"==typeof e&&null!==e},isNull:function(e){return null===e},isNullOrUndefined:function(e){return null==e}}},"./node_modules/webpack-dev-server/client/clients/BaseClient.js":function(e,t,r){"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,r,a;return t=e,a=[{key:"getClientPath",value:function(e){throw new Error("Client needs implementation")}}],(r=null)&&n(t.prototype,r),a&&n(t,a),e}()},"./node_modules/webpack-dev-server/client/clients/SockJSClient.js":function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function o(e,t){return(o=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function i(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=l(e);if(t){var a=l(this).constructor;r=Reflect.construct(n,arguments,a)}else r=n.apply(this,arguments);return s(this,r)}}function s(e,t){return!t||"object"!==n(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var u=r("./node_modules/sockjs-client/dist/sockjs.js"),c=r("./node_modules/webpack-dev-server/client/clients/BaseClient.js");e.exports=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&o(e,t)}(l,e);var t,r,n,s=i(l);function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=s.call(this)).sock=new u(e),t.sock.onerror=function(e){},t}return t=l,n=[{key:"getClientPath",value:function(e){return"./node_modules/webpack-dev-server/client/clients/SockJSClient.js"}}],(r=[{key:"onOpen",value:function(e){this.sock.onopen=e}},{key:"onClose",value:function(e){this.sock.onclose=e}},{key:"onMessage",value:function(e){this.sock.onmessage=function(t){e(t.data)}}}])&&a(t.prototype,r),n&&a(t,n),l}(c)},"./node_modules/webpack-dev-server/client/index.js?http://localhost:8080":function(e,t,r){"use strict";(function(e){var t=r("./node_modules/webpack-dev-server/node_modules/strip-ansi/index.js"),n=r("./node_modules/webpack-dev-server/client/socket.js"),a=r("./node_modules/webpack-dev-server/client/overlay.js"),o=r("./node_modules/webpack-dev-server/client/utils/log.js"),i=o.log,s=o.setLogLevel,l=r("./node_modules/webpack-dev-server/client/utils/sendMessage.js"),u=r("./node_modules/webpack-dev-server/client/utils/reloadApp.js"),c=r("./node_modules/webpack-dev-server/client/utils/createSocketUrl.js"),d={isUnloading:!1,currentHash:""},p={hot:!1,hotReload:!0,liveReload:!1,initial:!0,useWarningOverlay:!1,useErrorOverlay:!1,useProgress:!1},f=c(e);if(self.addEventListener("beforeunload",(function(){d.isUnloading=!0})),"undefined"!=typeof window){var h=window.location.search.toLowerCase();p.hotReload=-1===h.indexOf("hotreload=false")}n(f,{hot:function(){p.hot=!0,i.info("[WDS] Hot Module Replacement enabled.")},liveReload:function(){p.liveReload=!0,i.info("[WDS] Live Reloading enabled.")},invalid:function(){i.info("[WDS] App updated. Recompiling..."),(p.useWarningOverlay||p.useErrorOverlay)&&a.clear(),l("Invalid")},hash:function(e){d.currentHash=e},"still-ok":function(){i.info("[WDS] Nothing changed."),(p.useWarningOverlay||p.useErrorOverlay)&&a.clear(),l("StillOk")},"log-level":function(e){var t=r("./node_modules/webpack/hot sync ^\\.\\/log$");-1!==t.keys().indexOf("./log")&&t("./log").setLogLevel(e),s(e)},overlay:function(e){"undefined"!=typeof document&&("boolean"==typeof e?(p.useWarningOverlay=!1,p.useErrorOverlay=e):e&&(p.useWarningOverlay=e.warnings,p.useErrorOverlay=e.errors))},progress:function(e){"undefined"!=typeof document&&(p.useProgress=e)},"progress-update":function(e){p.useProgress&&i.info("[WDS] ".concat(e.percent,"% - ").concat(e.msg,".")),l("Progress",e)},ok:function(){if(l("Ok"),(p.useWarningOverlay||p.useErrorOverlay)&&a.clear(),p.initial)return p.initial=!1;u(p,d)},"content-changed":function(){i.info("[WDS] Content base changed. Reloading..."),self.location.reload()},warnings:function(e){i.warn("[WDS] Warnings while compiling.");var r=e.map((function(e){return t(e)}));l("Warnings",r);for(var n=0;n<r.length;n++)i.warn(r[n]);if(p.useWarningOverlay&&a.showMessage(e),p.initial)return p.initial=!1;u(p,d)},errors:function(e){i.error("[WDS] Errors while compiling. Reload prevented.");var r=e.map((function(e){return t(e)}));l("Errors",r);for(var n=0;n<r.length;n++)i.error(r[n]);p.useErrorOverlay&&a.showMessage(e),p.initial=!1},error:function(e){i.error(e)},close:function(){i.error("[WDS] Disconnected!"),l("Close")}})}).call(this,"?http://localhost:8080")},"./node_modules/webpack-dev-server/client/overlay.js":function(e,t,r){"use strict";var n=r("./node_modules/ansi-html/index.js"),a=new(0,r("./node_modules/html-entities/lib/index.js").AllHtmlEntities),o={reset:["transparent","transparent"],black:"181818",red:"E36049",green:"B3CB74",yellow:"FFD080",blue:"7CAFC2",magenta:"7FACCA",cyan:"C3C2EF",lightgrey:"EBE7E3",darkgrey:"6D7891"},i=null,s=null,l=null;function u(e){var t,r;s?e(s):(l=e,i||(t=function(){var e,t;(t=(e=i).contentDocument.createElement("div")).id="webpack-dev-server-client-overlay-div",t.style.position="fixed",t.style.boxSizing="border-box",t.style.left=0,t.style.top=0,t.style.right=0,t.style.bottom=0,t.style.width="100vw",t.style.height="100vh",t.style.backgroundColor="rgba(0, 0, 0, 0.85)",t.style.color="#E8E8E8",t.style.fontFamily="Menlo, Consolas, monospace",t.style.fontSize="large",t.style.padding="2rem",t.style.lineHeight="1.2",t.style.whiteSpace="pre-wrap",t.style.overflow="auto",e.contentDocument.body.appendChild(t),l(s=t)},(r=document.createElement("iframe")).id="webpack-dev-server-client-overlay",r.src="about:blank",r.style.position="fixed",r.style.left=0,r.style.top=0,r.style.right=0,r.style.bottom=0,r.style.width="100vw",r.style.height="100vh",r.style.border="none",r.style.zIndex=9999999999,r.onload=t,i=r,document.body.appendChild(i)))}n.setColors(o),e.exports={clear:function(){s&&(document.body.removeChild(i),s=null,i=null,l=null)},showMessage:function(e){u((function(t){t.innerHTML='<span style="color: #'.concat(o.red,'">Failed to compile.</span><br><br>').concat(n(a.encode(e[0])))}))}}},"./node_modules/webpack-dev-server/client/socket.js":function(e,t,r){"use strict";(function(t){var n=void 0!==t?t:r("./node_modules/webpack-dev-server/client/clients/SockJSClient.js"),a=0,o=null,i=function(e,t){(o=new n(e)).onOpen((function(){a=0})),o.onClose((function(){if(0===a&&t.close(),o=null,a<=10){var r=1e3*Math.pow(2,a)+100*Math.random();a+=1,setTimeout((function(){i(e,t)}),r)}})),o.onMessage((function(e){var r=JSON.parse(e);t[r.type]&&t[r.type](r.data)}))};e.exports=i}).call(this,r("./node_modules/webpack-dev-server/client/clients/SockJSClient.js"))},"./node_modules/webpack-dev-server/client/utils/createSocketUrl.js":function(e,t,r){"use strict";var n=r("./node_modules/url/url.js"),a=r("./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");e.exports=function(e,t){var r;if("string"==typeof e&&""!==e)r=n.parse(e.substr(1).replace("&","?"),!0);else{var o=a();r=n.parse(o||"/",!0,!0)}return function(e,t){var r=e.auth,a=e.query,o=e.hostname,i=e.protocol,s=e.port;s&&"0"!==s||(s=t.port);"0.0.0.0"!==o&&"::"!==o||!t.hostname||0!==t.protocol.indexOf("http")||(o=t.hostname);!o||"127.0.0.1"===o||"https:"!==t.protocol&&"0.0.0.0"!==e.hostname||(i=t.protocol);var l=a.sockHost||o,u=a.sockPath||"/sockjs-node",c=a.sockPort||s;"location"===c&&(c=t.port);return n.format({protocol:i,auth:r,hostname:l,port:c,pathname:u})}(r,t="string"==typeof t&&""!==t?n.parse(t):self.location)}},"./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":function(e,t,r){"use strict";e.exports=function(){if(document.currentScript)return document.currentScript.getAttribute("src");var e=document.scripts||[],t=e[e.length-1];if(t)return t.getAttribute("src");throw new Error("[WDS] Failed to get current script source.")}},"./node_modules/webpack-dev-server/client/utils/log.js":function(e,t,r){"use strict";var n=r("./node_modules/loglevel/lib/loglevel.js").getLogger("webpack-dev-server"),a="info";n.setDefaultLevel(a),e.exports={log:n,setLogLevel:function(e){switch(e){case a:case"warn":case"error":case"debug":case"trace":n.setLevel(e);break;case"warning":n.setLevel("warn");break;case"none":case"silent":n.disableAll();break;default:n.error("[WDS] Unknown clientLogLevel '".concat(e,"'"))}}}},"./node_modules/webpack-dev-server/client/utils/reloadApp.js":function(e,t,r){"use strict";var n=r("./node_modules/webpack-dev-server/client/utils/log.js").log;e.exports=function(e,t){var a=e.hotReload,o=e.hot,i=e.liveReload,s=t.isUnloading,l=t.currentHash;if(!s&&a)if(o)n.info("[WDS] App hot update..."),r("./node_modules/webpack/hot/emitter.js").emit("webpackHotUpdate",l),"undefined"!=typeof self&&self.window&&self.postMessage("webpackHotUpdate".concat(l),"*");else if(i)var u=self,c=self.setInterval((function(){("about:"!==u.location.protocol||(u=u.parent).parent===u)&&d(u,c)}));function d(e,t){clearInterval(t),n.info("[WDS] App updated. Reloading..."),e.location.reload()}}},"./node_modules/webpack-dev-server/client/utils/sendMessage.js":function(e,t,r){"use strict";e.exports=function(e,t){"undefined"==typeof self||"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope||self.postMessage({type:"webpack".concat(e),data:t},"*")}},"./node_modules/webpack-dev-server/node_modules/ansi-regex/index.js":function(e,t,r){"use strict";e.exports=function(){return/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-PRZcf-nqry=><]/g}},"./node_modules/webpack-dev-server/node_modules/strip-ansi/index.js":function(e,t,r){"use strict";var n=r("./node_modules/webpack-dev-server/node_modules/ansi-regex/index.js")();e.exports=function(e){return"string"==typeof e?e.replace(n,""):e}},"./node_modules/webpack/buildin/global.js":function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"==typeof window&&(r=window)}e.exports=r},"./node_modules/webpack/buildin/module.js":function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},"./node_modules/webpack/hot sync ^\\.\\/log$":function(e,t,r){var n={"./log":"./node_modules/webpack/hot/log.js"};function a(e){var t=o(e);return r(t)}function o(e){if(!r.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}a.keys=function(){return Object.keys(n)},a.resolve=o,e.exports=a,a.id="./node_modules/webpack/hot sync ^\\.\\/log$"},"./node_modules/webpack/hot/emitter.js":function(e,t,r){var n=r("./node_modules/events/events.js");e.exports=new n},"./node_modules/webpack/hot/log.js":function(e,t){var r="info";function n(){}function a(e){return"info"===r&&"info"===e||["info","warning"].indexOf(r)>=0&&"warning"===e||["info","warning","error"].indexOf(r)>=0&&"error"===e}function o(e){return function(t,r){a(t)&&e(r)}}e.exports=function(e,t){a(e)&&("info"===e?console.log(t):"warning"===e?console.warn(t):"error"===e&&console.error(t))};var i=console.group||n,s=console.groupCollapsed||n,l=console.groupEnd||n;e.exports.group=o(i),e.exports.groupCollapsed=o(s),e.exports.groupEnd=o(l),e.exports.setLogLevel=function(e){r=e},e.exports.formatError=function(e){var t=e.message,r=e.stack;return r?r.indexOf(t)<0?t+"\n"+r:r:t}},"./src/scss/app.scss":function(e,t,r){},"./src/ts/L10n.ts":function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return a}));var n=r("./src/ts/Strings.ts");class a{constructor(){throw new Error("L10n only contains static members and should not be instantiated.")}static get currentLang(){return this.lang}static setLang(e){if(!Object.keys(n.default).includes(e))throw this.lang="en",new Error("Undefined lang");this.lang=e}static getString(e){return n.default[this.lang][e]?n.default[this.lang][e]:n.default.en[e]}static getInterfaceString(e){return n.default[this.lang].interface&&n.default[this.lang].interface[e]?n.default[this.lang].interface[e]:n.default.en.interface[e]}static getCountryName(e){if(n.default[this.lang].flag){if(n.default[this.lang].flag[e])return n.default[this.lang].flag[e];if(n.default.en.flag[e])return n.default.en.flag[e]}return"FLAG_NOT_FOUND"}static getFlagCodes(){return Object.keys(n.default.en.flag)}static hasLang(e){return e in n.default}static getLangCodes(){return Object.keys(n.default)}static getLangName(e){return n.default[e]._name}static getLangVersion(e){return n.default[e]._version}}a.lang="en"},"./src/ts/Strings.ts":function(e,t,r){"use strict";r.r(t);var n=r("./src/ts/Strings/en.ts"),a=r("./src/ts/Strings/es.ts"),o=r("./src/ts/Strings/fr.ts"),i=r("./src/ts/Strings/id.ts"),s=r("./src/ts/Strings/pl.ts"),l=r("./src/ts/Strings/pt-br.ts"),u=r("./src/ts/Strings/ru.ts"),c=r("./src/ts/Strings/th.ts"),d=r("./src/ts/Strings/tr.ts"),p=r("./src/ts/Strings/zh.ts");const f={en:n.default,es:a.default,fr:o.default,id:i.default,pl:s.default,ptbr:l.default,ru:u.default,th:c.default,tr:d.default,zh:p.default};t.default=f},"./src/ts/Strings/en.ts":function(e,t,r){"use strict";r.r(t),t.default={_version:4,_name:"English",flag:{__:"",AD:"Andorra",AE:"United Arab Emirates",AF:"Afghanistan",AG:"Antigua and Barbuda",AI:"Anguilla",AL:"Albania",AM:"Armenia",AN:"Netherlands Antilles",AO:"Angola",AR:"Argentina",AS:"American Samoa",AT:"Austria",AU:"Australia",AW:"Aruba",AX:"Aland Islands",AZ:"Azerbaijan",BA:"Bosnia and Herzegovina",BB:"Barbados",BD:"Bangladesh",BE:"Belgium",BF:"Burkina Faso",BG:"Bulgaria",BH:"Bahrain",BI:"Burundi",BJ:"Benin",BL:"Saint Barthelemy",BM:"Bermuda",BN:"Brunei",BO:"Bolivia",BR:"Brazil",BS:"Bahamas",BT:"Bhutan",BW:"Botswana",BY:"Belarus",BZ:"Belize",CA:"Canada",CD:"Congo, The Democratic Republic of the",CF:"Central African Republic",CG:"Congo",CH:"Switzerland",CI:"Cote D'Ivoire",CL:"Chile",CM:"Cameroon",CN:"China",CO:"Colombia",CR:"Costa Rica",CU:"Cuba",CV:"Cabo Verde",CX:"Christmas Island",CY:"Cyprus",CZ:"Czech Republic",DE:"Germany",DJ:"Djibouti",DK:"Denmark",DM:"Dominica",DO:"Dominican Republic",DZ:"Algeria",EC:"Ecuador",EE:"Estonia",EG:"Egypt",ER:"Eritrea",ES:"Spain",ET:"Ethiopia",EU:"Europe",FI:"Finland",FJ:"Fiji",FK:"Falkland Islands (Malvinas)",FM:"Micronesia, Federated States of",FO:"Faroe Islands",FR:"France",GA:"Gabon",GB:"United Kingdom",GD:"Grenada",GE:"Georgia",GF:"French Guiana",GG:"Guernsey",GH:"Ghana",GI:"Gibraltar",GL:"Greenland",GM:"Gambia",GN:"Guinea",GP:"Guadeloupe",GQ:"Equatorial Guinea",GR:"Greece",GT:"Guatemala",GU:"Guam",GW:"Guinea-Bissau",GY:"Guyana",HK:"Hong Kong",HM:"Heard Island and McDonald Islands",HN:"Honduras",HR:"Croatia",HT:"Haiti",HU:"Hungary",ID:"Indonesia",IE:"Ireland",IL:"Israel",IM:"Isle of Man",IN:"India",IQ:"Iraq",IR:"Iran, Islamic Republic of",IS:"Iceland",IT:"Italy",JE:"Jersey",JM:"Jamaica",JO:"Jordan",JP:"Japan",KE:"Kenya",KG:"Kyrgyzstan",KH:"Cambodia",KI:"Kiribati",KM:"Comoros",KN:"Saint Kitts and Nevis",KP:"Korea, Democratic People's Republic of",KR:"South Korea",KW:"Kuwait",KY:"Cayman Islands",KZ:"Kazakhstan",LA:"Lao People's Democratic Republic",LB:"Lebanon",LC:"Saint Lucia",LI:"Liechtenstein",LK:"Sri Lanka",LR:"Liberia",LS:"Lesotho",LT:"Lithuania",LU:"Luxembourg",LV:"Latvia",LY:"Libya",MA:"Morocco",MC:"Monaco",MD:"Moldova",ME:"Montenegro",MF:"Saint Martin",MG:"Madagascar",MH:"Marshall Islands",MK:"North Macedonia",ML:"Mali",MM:"Myanmar",MN:"Mongolia",MO:"Macau",MP:"Northern Mariana Islands",MQ:"Martinique",MR:"Mauritania",MS:"Montserrat",MT:"Malta",MU:"Mauritius",MV:"Maldives",MW:"Malawi",MX:"Mexico",MY:"Malaysia",MZ:"Mozambique",NA:"Namibia",NC:"New Caledonia",NE:"Niger",NF:"Norfolk Island",NG:"Nigeria",NI:"Nicaragua",NL:"Netherlands",NO:"Norway",NP:"Nepal",NR:"Nauru",NU:"Niue",NZ:"New Zealand",OM:"Oman",PA:"Panama",PE:"Peru",PF:"French Polynesia",PG:"Papua New Guinea",PH:"Philippines",PK:"Pakistan",PL:"Poland",PM:"Saint Pierre and Miquelon",PN:"Pitcairn",PR:"Puerto Rico",PS:"Palestinian Territory Occupied",PT:"Portugal",PW:"Palau",PY:"Paraguay",QA:"Qatar",RE:"Reunion",RO:"Romania",RS:"Serbia",RU:"Russian Federation",RW:"Rwanda",SA:"Saudi Arabia",SB:"Solomon Islands",SC:"Seychelles",SD:"Sudan",SE:"Sweden",SG:"Singapore",SH:"Saint Helena",SI:"Slovenia",SJ:"Svalbard and Jan Mayen",SK:"Slovakia",SL:"Sierra Leone",SM:"San Marino",SN:"Senegal",SO:"Somalia",SR:"Suriname",ST:"Sao Tome and Principe",SV:"El Salvador",SY:"Syrian Arab Republic",SZ:"Eswatini",TC:"Turks and Caicos Islands",TD:"Chad",TG:"Togo",TH:"Thailand",TJ:"Tajikistan",TL:"Timor-Leste",TM:"Turkmenistan",TN:"Tunisia",TO:"Tonga",TR:"Turkey",TT:"Trinidad and Tobago",TV:"Tuvalu",TW:"Taiwan",TZ:"Tanzania, United Republic of",UA:"Ukraine",UG:"Uganda",US:"United States",UY:"Uruguay",UZ:"Uzbekistan",VA:"Holy See (Vatican City State)",VC:"Saint Vincent and the Grenadines",VE:"Venezuela",VG:"Virgin Islands, British",VI:"Virgin Islands, U.S.",VN:"Vietnam",VU:"Vanuatu",WS:"Samoa",YE:"Yemen",YT:"Mayotte",ZA:"South Africa",ZM:"Zambia",ZW:"Zimbabwe"},interface:{close:"Close",copy:"Copy",copied:"Copied",failed:"Failed",help:"Help",help1:"Copy and paste your markdown into the text box (or drag-and-drop).",help2:'Click "Find Flags".',help3:"Copy and paste the results into your markdown file.",feedback:"Issues or Feedback",example:"Example",config:"Settings","config-name":"Set country name in title (hover text)","config-code":"Set country code in alt (image failed to load text)","config-parsefix":"Try to apply fixes right away","config-inout":"Include input with output","config-lang":"Interface and output lanauage:","output-has-errors":"Some issues were found.","output-has-fixes":"Some modifications were made.","show-errors":"Show Issues",parse:"Find Flags",errors:"Issues","use-instead":"use instead:",line:"line"},example:'---\ntags:\n  - FWO20XX\n---\n\n# flag-wiki-osu 20XX\n\n![FWO20XX Logo](img/logo.png)\n\nThe **flag-wiki-osu** (***FWO20XX***) was a country-based double-elimination osu! tournament hosted by ![Australia][flag_AU] [peppy] https://osu.ppy.sh/users/2), ![](/wiki/shared/flag/DE.gif "Germany") [Loctav](https://osu.ppy.sh/users/71366), and ![NZ][flag_NZ] [deadbeat](https://osu.ppy.sh/users/128370). It was the first installment of the flag-wiki-osu.\n\n## Schedule\n\n| Event | Timestamp |\n| --: | :-- |\n| Registration Phase | 2018-01-01/2018-01-28 |\n| Live Drawings | 2018-01-29 (12:00 UTC) |\n\n## Prizes\n\n| Placing | Prize(s) |\n| :-: | :-- |\n| ![Gold Crown](/wiki/shared/GCrown.png "1st place") | ![](/wiki/shared/flag/AR.gif) [juankristal](https://osu.ppy.sh/users/43656) |\n| ![Silver Crown](/wiki/shared/SCrown.png "2nd place") | ![][flag_US] [ztrot](https://osu.ppy.sh/users/6347) |\n| ![Bronze Crown](/wiki/shared/BCrown.png "3rd place") | ![DE][flag_DE] [Nwolf](https://osu.ppy.sh/users/1910766) |\n\n## Organisation\n\nThe flag-wiki-osu is run by various community members by distributing the multitude of tasks into various fields of responsibility.\n\n| Position | Member(s) |\n| :-- | :-- |\n| Manager | ![][flag_US] [clayton](https://osu.ppy.sh/users/3666350) |\n| Map Selector | ![][flag_CN] [kj415j45](https://osu.ppy.sh/users/9367540) |\n| Statistician | ![US][flag_US] [Joehu](https://osu.ppy.sh/users/8549835) |\n\n## Random People\n\n|  | Country | Members |\n| :-: | :-: | :-- |\n| ![][flag_AU] | **Australia** | [peppy](https://osu.ppy.sh/users/2), [BanchoBot](https://osu.ppy.sh/users/3) |\n| ![][flag_US] | **United States** | [Toy](https://osu.ppy.sh/users/2757689), [Apraxia](https://osu.ppy.sh/users/4194445) |\n\n'}},"./src/ts/Strings/es.ts":function(e,t,r){"use strict";r.r(t),t.default={_version:4,_name:"Spanish (output only)",flag:{__:"",AD:"Andorra",AE:"Emiratos Árabes Unidos",AF:"Afganistán",AG:"Antigua y Barbuda",AI:"Anguila",AL:"Albania",AM:"Armenia",AN:"Antillas Neerlandesas",AO:"Angola",AR:"Argentina",AS:"Samoa Americana",AT:"Austria",AU:"Australia",AW:"Aruba",AX:"Islas Aland",AZ:"Azerbaiyán",BA:"Bosnia y Herzegovina",BB:"Barbados",BD:"Bangladés",BE:"Bélgica",BF:"Burkina Faso",BG:"Bulgaria",BH:"Baréin",BI:"Burundi",BJ:"Benín",BL:"San Bartolomé",BM:"Bermudas",BN:"Brunéi",BO:"Bolivia",BR:"Brasil",BS:"Bahamas",BT:"Bután",BW:"Botsuana",BY:"Bielorrusia",BZ:"Belice",CA:"Canadá",CD:"República Democrática del Congo",CF:"República Centroafricana",CG:"Congo",CH:"Suiza",CI:"Costa de Marfil",CL:"Chile",CM:"Camerún",CN:"China",CO:"Colombia",CR:"Costa Rica",CU:"Cuba",CV:"Cabo Verde",CX:"Isla de Navidad",CY:"Chipre",CZ:"República Checa",DE:"Alemania",DJ:"Yibuti",DK:"Dinamarca",DM:"Dominica",DO:"República Dominicana",DZ:"Algeria",EC:"Ecuador",EE:"Estonia",EG:"Egipto",ER:"Eritrea",ES:"España",ET:"Etiopía",EU:"Europa",FI:"Finlandia",FJ:"Fiyi",FK:"Islas Malvinas",FM:"Estados Federados de Micronesia",FO:"Islas Feroe",FR:"Francia",GA:"Gabón",GB:"Reino Unido",GD:"Granada",GE:"Georgia",GF:"Guayana Francesa",GG:"Guernsey",GH:"Ghana",GI:"Gibraltar",GL:"Groenlandia",GM:"Gambia",GN:"Guinea",GP:"Guadalupe",GQ:"Guinea Ecuatorial",GR:"Grecia",GT:"Guatemala",GU:"Guam",GW:"Guinea-Bisáu",GY:"Guyana",HK:"Hong Kong",HM:"Islas Heard y McDonald",HN:"Honduras",HR:"Croacia",HT:"Haití",HU:"Hungría",ID:"Indonesia",IE:"Irlanda",IL:"Israel",IM:"Isla de Man",IN:"India",IQ:"Irak",IR:"Irán",IS:"Islandia",IT:"Italia",JE:"Jersey",JM:"Jamaica",JO:"Jordania",JP:"Japón",KE:"Kenia",KG:"Kirguistán",KH:"Camboya",KI:"Kiribati",KM:"Comoras",KN:"San Cristóbal y Nieves",KP:"Corea",KR:"Sur Corea",KW:"Kuwait",KY:"Islas Caimán",KZ:"Kazajistán",LA:"Laos",LB:"Líbano",LC:"Santa Lucía",LI:"Liechtenstein",LK:"Sri Lanka",LR:"Liberia",LS:"Lesoto",LT:"Lituania",LU:"Luxemburgo",LV:"Letonia",LY:"Libia",MA:"Marruecos",MC:"Mónaco",MD:"Moldavia",ME:"Montenegro",MF:"San Matrín",MG:"Madagascar",MH:"Islas Marshall",MK:"República de Macedonia",ML:"Mali",MM:"Birmania",MN:"Mongolia",MO:"Macao",MP:"Islas Marianas del Norte",MQ:"Martinica",MR:"Mauritania",MS:"Montserrat",MT:"Malta",MU:"Mauricio",MV:"Maldivas",MW:"Malaui",MX:"México",MY:"Malasia",MZ:"Mozambique",NA:"Namibia",NC:"Nueva Caledonia",NE:"Níger",NF:"Isla Norfolk",NG:"Nigeria",NI:"Nicaragua",NL:"Países Bajos",NO:"Noruega",NP:"Nepal",NR:"Nauru",NU:"Niue",NZ:"Nueva Zelanda",OM:"Omán",PA:"Panamá",PE:"Perú",PF:"Polinesia Francesa",PG:"Papúa Nueva Guinea",PH:"Filipinas",PK:"Paquistán",PL:"Polonia",PM:"San Pedro y Miquelón",PN:"Pitcairn",PR:"Puerto Rico",PS:"Territorios Palestinos",PT:"Portugal",PW:"Palaos",PY:"Paraguay",QA:"Catar",RE:"Reunión",RO:"Rumanía",RS:"Serbia",RU:"Federación Rusa",RW:"Ruanda",SA:"Arabia Saudita",SB:"Islas Salomón",SC:"Seychelles",SD:"Sudán",SE:"Suecia",SG:"Singapur",SH:"Santa Helena",SI:"Eslovenia",SJ:"Svalbard y Jan Mayen",SK:"Eslovaquia",SL:"Sierra Leona",SM:"San Marino",SN:"Senegal",SO:"Somalia",SR:"Surinam",ST:"Santo Tomé y Príncipe",SV:"El Salvador",SY:"Siria",SZ:"Esuatini",TC:"Islas Turcas y Caicos",TD:"Chad",TG:"Togo",TH:"Tailandia",TJ:"Tayikistán",TL:"Timor Oriental",TM:"Turkmenistán",TN:"Túnez",TO:"Tonga",TR:"Turquía",TT:"Trinidad y Tobago",TV:"Tuvalu",TW:"Taiwán",TZ:"Tanzania",UA:"Ucrania",UG:"Uganda",US:"Estados Unidos",UY:"Uruguay",UZ:"Uzbekistán",VA:"Santa Sede",VC:"San Vicente y las Granadinas",VE:"Venezuela",VG:"Islas Vírgenes Británicas",VI:"Islas Vírgenes de los Estados Unidos",VN:"Vietnam",VU:"Vanuatu",WS:"Samoa",YE:"Yemen",YT:"Mayotte",ZA:"Sudáfrica",ZM:"Zambia",ZW:"Zimbabue"}}},"./src/ts/Strings/fr.ts":function(e,t,r){"use strict";r.r(t),t.default={_version:4,_name:"French (output only)",flag:{__:"",AD:"Andorre",AE:"Émirats arabes unis",AF:"Afghanistan",AG:"Antigua-et-Barbuda",AI:"Anguilla",AL:"Albanie",AM:"Arménie",AN:"Antilles néerlandaises",AO:"Angola",AR:"Argentine",AS:"Samoa américaines",AT:"Autriche",AU:"Australie",AW:"Aruba",AX:"Åland",AZ:"Azerbaijan",BA:"Bosnie-Herzégovine",BB:"Barbade",BD:"Bangladesh",BE:"Belgique",BF:"Burkina Faso",BG:"Bulgarie",BH:"Bahreïn",BI:"Burundi",BJ:"Benin",BL:"Saint Barthelemy",BM:"Bermudes",BN:"Brunéi Darussalam",BO:"Bolivie",BR:"Brésil",BS:"Bahamas",BT:"Bhoutan",BW:"Botswana",BY:"Biélorussie",BZ:"Belize",CA:"Canada",CD:"Congo, La République Démocratique du",CF:"République centrafricaine",CG:"Congo",CH:"Suisse",CI:"Cote D'Ivoire",CL:"Chili",CM:"Cameroun",CN:"Chine",CO:"Colombie",CR:"Costa Rica",CU:"Cuba",CV:"Cap-Vert",CX:"Île Christmas",CY:"Chypre",CZ:"Tchéquie",DE:"Allemagne",DJ:"Djibouti",DK:"Danemark",DM:"Dominique",DO:"République dominicaine",DZ:"Algérie",EC:"Equateur",EE:"Estonie",EG:"Egypte",ER:"Érythrée",ES:"Espagne",ET:"Ethiopie",EU:"Europe",FI:"Finlande",FJ:"Fiji",FK:"Îles Falkland (Malvinas)",FM:"Micronésie",FO:"Îles Féroé",FR:"France",GA:"Gabon",GB:"Royaume-Unis",GD:"Grenada",GE:"Géorgie",GF:"Guyane française",GG:"Guernsey",GH:"Ghana",GI:"Gibraltar",GL:"Groenland",GM:"Gambie",GN:"Guinée",GP:"Guadeloupe",GQ:"Guinée équatoriale",GR:"Grèce",GT:"Guatemala",GU:"Guam",GW:"Guinée-Bissau",GY:"Guyane",HK:"Hong Kong",HM:"Îles Heard et McDonald",HN:"Honduras",HR:"Croatie",HT:"Haiti",HU:"Hongrie",ID:"Indonésie",IE:"Irlande",IL:"Israel",IM:"Île de Man",IN:"Inde",IQ:"Iraq",IR:"Iran",IS:"Islande",IT:"Italie",JE:"Jersey",JM:"Jamaïque",JO:"Jordanie",JP:"Japon",KE:"Kenya",KG:"Kirghizistan",KH:"Cambodge",KI:"Kiribati",KM:"Comores",KN:"Saint-Kitts-et-Nevis",KP:"Corée du Nord",KR:"Corée du Sud",KW:"Koweït",KY:"Îles Caïmans",KZ:"Kazakhstan",LA:"Laos",LB:"Liban",LC:"Sainte-Lucie",LI:"Liechtenstein",LK:"Sri Lanka",LR:"Libéria",LS:"Lesotho",LT:"Lituanie",LU:"Luxembourg",LV:"Lettonie",LY:"Libie",MA:"Maroc",MC:"Monaco",MD:"Moldavie",ME:"Montenegro",MF:"Sain-Martin",MG:"Madagascar",MH:"Îles Marshall",MK:"Macédoine du Nord",ML:"Mali",MM:"Myanmar",MN:"Mongolie",MO:"Macao",MP:"Îles Mariannes du Nord",MQ:"Martinique",MR:"Mauritanie",MS:"Montserrat",MT:"Malte",MU:"Maurice",MV:"Maldives",MW:"Malawi",MX:"Mexique",MY:"Malaisie",MZ:"Mozambique",NA:"Namibie",NC:"Nouvelle Calédonie",NE:"Niger",NF:"Île Norfolk",NG:"Nigeria",NI:"Nicaragua",NL:"Pays-Bas",NO:"Norvège",NP:"Népal",NR:"Nauru",NU:"Niué",NZ:"Nouvelle-Zélande",OM:"Oman",PA:"Panama",PE:"Pérou",PF:"Polynésie Française",PG:"Papouasie-Nouvelle-Guinée",PH:"Philippines",PK:"Pakistan",PL:"Pologne",PM:"Saint-Pierre-et-Miquelon",PN:"Îles Pitcairn",PR:"Porto Rico",PS:"Territoires palestiniens occupés",PT:"Portugal",PW:"Palaos",PY:"Paraguay",QA:"Qatar",RE:"Reunion",RO:"Roumanie",RS:"Serbie",RU:"Russie",RW:"Rwanda",SA:"Arabie saoudite",SB:"Îles Salomon",SC:"Seychelles",SD:"Soudan",SE:"Suède",SG:"Singapour",SH:"Sainte-Hélène",SI:"Slovénie",SJ:"Svalbard et Jan Mayen",SK:"Slovaquie",SL:"Sierra Leone",SM:"Saint-Marin",SN:"Sénégal",SO:"Somalie",SR:"Suriname",ST:"Sao Tomé-et-Principe",SV:"El Salvador",SY:"Syrie",SZ:"Eswatini",TC:"Îles Turks et Caïques",TD:"Tchad",TG:"Togo",TH:"Thaïlande",TJ:"Tajikistan",TL:"Timor-Leste",TM:"Turkménistan",TN:"Tunisie",TO:"Tonga",TR:"Turquie",TT:"Republique de Trinite et Tobago",TV:"Tuvalu",TW:"Taïwan",TZ:"Tanzanie",UA:"Ukraine",UG:"Ouganda",US:"États-Unis",UY:"Uruguay",UZ:"Ouzbékistan",VA:"Vatican",VC:"Saint-Vincent et les Grenadines",VE:"Venezuela",VG:"Îles Vierges britanniques",VI:"Îles Vierges des États-Unis",VN:"Vietnam",VU:"Vanuatu",WS:"Samoa",YE:"Yémen",YT:"Mayotte",ZA:"Afrique du Sud",ZM:"Zambie",ZW:"Zimbabwe"}}},"./src/ts/Strings/id.ts":function(e,t,r){"use strict";r.r(t),t.default={_version:4,_name:"Indonesian (output only)",flag:{__:"",AD:"Andorra",AE:"Uni Emirat Arab",AF:"Afghanistan",AG:"Antigua dan Barbuda",AI:"Anguilla",AL:"Albania",AM:"Armenia",AN:"Antillen Belanda",AO:"Angola",AR:"Argentina",AS:"Samoa Amerika",AT:"Austria",AU:"Australia",AW:"Aruba",AX:"Kepulauan Aland",AZ:"Azerbaijan",BA:"Bosnia dan Herzegovina",BB:"Barbados",BD:"Bangladesh",BE:"Belgia",BF:"Burkina Faso",BG:"Bulgaria",BH:"Bahrain",BI:"Burundi",BJ:"Benin",BL:"Saint Barthelemy",BM:"Bermuda",BN:"Brunei",BO:"Bolivia",BR:"Brazil",BS:"Bahamas",BT:"Bhutan",BW:"Botswana",BY:"Belarus",BZ:"Belize",CA:"Kanada",CD:"Republik Demokratik Kongo",CF:"Republik Afrika Tengah",CG:"Kongo",CH:"Swiss",CI:"Pantai Gading",CL:"Chili",CM:"Kamerun",CN:"Tiongkok",CO:"Kolombia",CR:"Kosta Rika",CU:"Kuba",CV:"Tanjung Verde",CX:"Pulau Christmas",CY:"Siprus",CZ:"Republik Ceska",DE:"Jerman",DJ:"Djibouti",DK:"Denmark",DM:"Dominika",DO:"Republik Dominika",DZ:"Aljazair",EC:"Ekuador",EE:"Estonia",EG:"Mesir",ER:"Eritrea",ES:"Spanyol",ET:"Etiopia",EU:"Eropa",FI:"Finlandia",FJ:"Fiji",FK:"Kepulauan Falkland (Malvinas)",FM:"Federasi Mikronesia",FO:"Kepulauan Faroe",FR:"Prancis",GA:"Gabon",GB:"Britania Raya",GD:"Grenada",GE:"Georgia",GF:"Guyana Prancis",GG:"Guernsey",GH:"Ghana",GI:"Gibraltar",GL:"Greenland",GM:"Gambia",GN:"Guinea",GP:"Guadeloupe",GQ:"Guinea Ekuatorial",GR:"Yunani",GT:"Guatemala",GU:"Guam",GW:"Guinea-Bissau",GY:"Guyana",HK:"Hong Kong",HM:"Pulau Heard dan Kepulauan McDonald",HN:"Honduras",HR:"Kroasia",HT:"Haiti",HU:"Hungaria",ID:"Indonesia",IE:"Irlandia",IL:"Israel",IM:"Pulau Man",IN:"India",IQ:"Irak",IR:"Republik Islam Iran",IS:"Islandia",IT:"Italia",JE:"Jersey",JM:"Jamaika",JO:"Yordania",JP:"Jepang",KE:"Kenya",KG:"Kirgizstan",KH:"Kamboja",KI:"Kiribati",KM:"Komoro",KN:"Saint Kitts dan Nevis",KP:"Republik Rakyat Demokratik Korea",KR:"Korea Selatan",KW:"Kuwait",KY:"Kepulauan Cayman",KZ:"Kazakhstan",LA:"Laos",LB:"Líbano",LC:"Santa Lucía",LI:"Liechtenstein",LK:"Sri Lanka",LR:"Liberia",LS:"Lesoto",LT:"Lituania",LU:"Luxemburgo",LV:"Letonia",LY:"Libia",MA:"Maroko",MC:"Monaco",MD:"Moldova",ME:"Montenegro",MF:"Saint Martin",MG:"Madagaskar",MH:"Kepulauan Marshall",MK:"Makedonia Utara",ML:"Mali",MM:"Myanmar",MN:"Mongolia",MO:"Makau",MP:"Kepulauan Mariana Utara",MQ:"Martinique",MR:"Mauritania",MS:"Montserrat",MT:"Malta",MU:"Mauritius",MV:"Maladewa",MW:"Malawi",MX:"Meksiko",MY:"Malaysia",MZ:"Mozambik",NA:"Namibia",NC:"Kaleidonia Baru",NE:"Niger",NF:"Pulau Norfolk",NG:"Nigeria",NI:"Nikaragua",NL:"Belanda",NO:"Norwegia",NP:"Nepal",NR:"Nauru",NU:"Niue",NZ:"Selandia Baru",OM:"Oman",PA:"Panama",PE:"Peru",PF:"Polinesia Prancis",PG:"Papua Nugini",PH:"Filipina",PK:"Pakistan",PL:"Polandia",PM:"Saint Pierre dan Miquelon",PN:"Pitcairn",PR:"Puerto Riko",PS:"Negara Palestina",PT:"Portugal",PW:"Palau",PY:"Paraguay",QA:"Qatar",RE:"Reunion",RO:"Rumania",RS:"Serbia",RU:"Rusia",RW:"Rwanda",SA:"Arab Saudi",SB:"Kepulauan Solomon",SC:"Seychelles",SD:"Sudan",SE:"Swedia",SG:"Singapura",SH:"Saint Helena",SI:"Slovenia",SJ:"Svalbard dan Jan Mayen",SK:"Slovakia",SL:"Sierra Leone",SM:"San Marino",SN:"Senegal",SO:"Somalia",SR:"Suriname",ST:"Sao Tome dan Principe",SV:"El Salvador",SY:"Republik Arab Suriah",SZ:"Eswatini",TC:"Kepulauan Turks dan Caicos",TD:"Chad",TG:"Togo",TH:"Thailand",TJ:"Tajikistan",TL:"Timor-Leste",TM:"Turkmenistan",TN:"Tunisia",TO:"Tonga",TR:"Turki",TT:"Trinidad dan Tobago",TV:"Tuvalu",TW:"Taiwan",TZ:"Republik Kesatuan Tanzania",UA:"Ukraina",UG:"Uganda",US:"Amerika Serikat",UY:"Uruguay",UZ:"Uzbekistan",VA:"Holy See (Vatikan)",VC:"Saint Vincent dan Grenadines",VE:"Venezuela",VG:"Kepulauan Virgin Britania Raya",VI:"Kepulauan Virgin Amerika Serikat",VN:"Vietnam",VU:"Vanuatu",WS:"Samoa",YE:"Yaman",YT:"Mayotte",ZA:"Afrika Selatan",ZM:"Zambia",ZW:"Zimbabwe"}}},"./src/ts/Strings/pl.ts":function(e,t,r){"use strict";r.r(t),t.default={_version:4,_name:"Polish (output only)",flag:{__:"",AD:"Andora",AE:"Zjednoczone Emiraty Arabskie",AF:"Afganistan",AG:"Antigua i Barbuda",AI:"Anguilla",AL:"Albania",AM:"Armenia",AN:"Antyle Holenderskie",AO:"Angola",AR:"Argentyna",AS:"Samoa Amerykańskie",AT:"Austria",AU:"Australia",AW:"Aruba",AX:"Wyspy Alandzkie",AZ:"Azerbejdżan",BA:"Bośnia i Hercegowina",BB:"Barbados",BD:"Bangladesz",BE:"Belgia",BF:"Burkina Faso",BG:"Bułgaria",BH:"Bahrajn",BI:"Burundi",BJ:"Benin",BL:"Saint-Barthélemy",BM:"Bermudy",BN:"Brunei",BO:"Boliwia",BR:"Brazylia",BS:"Bahamy",BT:"Bhutan",BW:"Botswana",BY:"Białoruś",BZ:"Belize",CA:"Kanada",CD:"Demokratyczna Republika Konga",CF:"Republika Środkowoafrykańska",CG:"Kongo",CH:"Szwajcaria",CI:"Wybrzeże Kości Słoniowej",CL:"Chile",CM:"Kamerun",CN:"Chiny",CO:"Kolumbia",CR:"Kostaryka",CU:"Kuba",CV:"Wyspy Zielonego Przylądka",CX:"Wyspa Bożego Narodzenia",CY:"Cypr",CZ:"Czechy",DE:"Niemcy",DJ:"Dżibuti",DK:"Dania",DM:"Dominika",DO:"Dominikana",DZ:"Algieria",EC:"Ekwador",EE:"Estonia",EG:"Egipt",ER:"Erytrea",ES:"Hiszpania",ET:"Etiopia",EU:"Europa",FI:"Finlandia",FJ:"Fidżi",FK:"Falklandy (Malwiny)",FM:"Mikronezja",FO:"Wyspy Owcze",FR:"Francja",GA:"Gabon",GB:"Wielka Brytania",GD:"Grenada",GE:"Gruzja",GF:"Gujana Francuska",GG:"Guernsey",GH:"Ghana",GI:"Gibraltar",GL:"Grenlandia",GM:"Gambia",GN:"Gwinea",GP:"Gwadelupa",GQ:"Gwinea Równikowa",GR:"Grecja",GT:"Gwatemala",GU:"Guam",GW:"Gwinea Bissau",GY:"Gujana",HK:"Hongkong",HM:"Wyspy Heard i McDonald",HN:"Honduras",HR:"Chorwacja",HT:"Haiti",HU:"Węgry",ID:"Indonezja",IE:"Irlandia",IL:"Izrael",IM:"Wyspa Man",IN:"Indie",IQ:"Irak",IR:"Iran",IS:"Islandia",IT:"Włochy",JE:"Jersey",JM:"Jamajka",JO:"Jordania",JP:"Japonia",KE:"Kenia",KG:"Kirgistan",KH:"Kambodża",KI:"Kiribati",KM:"Komory",KN:"Saint Kitts i Nevis",KP:"Korea Północna",KR:"Korea Południowa",KW:"Kuwejt",KY:"Kajmany",KZ:"Kazachstan",LA:"Laos",LB:"Liban",LC:"Saint Lucia",LI:"Liechtenstein",LK:"Sri Lanka",LR:"Liberia",LS:"Lesotho",LT:"Litwa",LU:"Luksemburg",LV:"Łotwa",LY:"Libia",MA:"Maroko",MC:"Monako",MD:"Mołdawia",ME:"Czarnogóra",MF:"Sint Maarten",MG:"Madagaskar",MH:"Wyspy Marshalla",MK:"Macedonia Północna",ML:"Mali",MM:"Mjanma",MN:"Mongolia",MO:"Makau",MP:"Mariany Północne",MQ:"Martynika",MR:"Mauretania",MS:"Montserrat",MT:"Malta",MU:"Mauritius",MV:"Malediwy",MW:"Malawi",MX:"Meksyk",MY:"Malezja",MZ:"Mozambik",NA:"Namibia",NC:"Nowa Kaledonia",NE:"Niger",NF:"Wyspa Norfolk",NG:"Nigeria",NI:"Nikaragua",NL:"Holandia",NO:"Norwegia",NP:"Nepal",NR:"Nauru",NU:"Niue",NZ:"Nowa Zelandia",OM:"Oman",PA:"Panama",PE:"Peru",PF:"Polinezja Francuska",PG:"Papua-Nowa Gwinea",PH:"Filipiny",PK:"Pakistan",PL:"Polska",PM:"Saint Pierre i Miquelon",PN:"Pitcairn",PR:"Portoryko",PS:"Terytoria palestyńskie",PT:"Portugalia",PW:"Palau",PY:"Paragwaj",QA:"Katar",RE:"Reunion",RO:"Rumunia",RS:"Serbia",RU:"Rosja",RW:"Rwanda",SA:"Arabia Saudyjska",SB:"Wyspy Salomona",SC:"Seszele",SD:"Sudan",SE:"Szwecja",SG:"Singapur",SH:"Wyspa Świętej Heleny",SI:"Słowenia",SJ:"Svalbard i Jan Mayen",SK:"Słowacja",SL:"Sierra Leone",SM:"San Marino",SN:"Senegal",SO:"Somalia",SR:"Surinam",ST:"Wyspy Świętego Tomasza i Książęca",SV:"Salwador",SY:"Syria",SZ:"Eswatini",TC:"Turks i Caicos",TD:"Czad",TG:"Togo",TH:"Tajlandia",TJ:"Tadżykistan",TL:"Timor Wschodni",TM:"Turkmenistan",TN:"Tunezja",TO:"Tonga",TR:"Turcja",TT:"Trynidad i Tobago",TV:"Tuwalu",TW:"Tajwan",TZ:"Tanzania",UA:"Ukraina",UG:"Uganda",US:"Stany Zjednoczone",UY:"Urugwaj",UZ:"Uzbekistan",VA:"Watykan",VC:"Saint Vincent i Grenadyny",VE:"Wenezuela",VG:"Brytyjskie Wyspy Dziewicze",VI:"Wyspy Dziewicze",VN:"Wietnam",VU:"Vanuatu",WS:"Samoa",YE:"Jemen",YT:"Majotta",ZA:"Republika Południowej Afryki",ZM:"Zambia",ZW:"Zimbabwe"}}},"./src/ts/Strings/pt-br.ts":function(e,t,r){"use strict";r.r(t),t.default={_version:4,_name:"Brazilian Portuguese (output only)",flag:{__:"",AD:"Andorra",AE:"Emirados Árabes Unidos",AF:"Afganistão",AG:"Antígua e Barbuda",AI:"Anguilla",AL:"Albânia",AM:"Arménia",AN:"Antilhas Neerlandesas",AO:"Angola",AR:"Argentina",AS:"Samoa Americana",AT:"Áustria",AU:"Austrália",AW:"Aruba",AX:"Ilhas de Aland",AZ:"Azerbaijão",BA:"Bósnia e Herzegovina",BB:"Barbados",BD:"Bangladesh",BE:"Bélgica",BF:"Burkina Faso",BG:"Bulgária",BH:"Bahrain",BI:"Burundi",BJ:"Benim",BL:"São Bartolomeu",BM:"Bermudas",BN:"Brunei",BO:"Bolívia",BR:"Brasil",BS:"Bahamas",BT:"Butão",BW:"Botswana",BY:"Bielorrússia",BZ:"Belize",CA:"Canadá",CD:"Congo, República Democrática do",CF:"República Centro-Africana",CG:"Congo",CH:"Suíça",CI:"Costa do Marfim",CL:"Chile",CM:"Camarões",CN:"China",CO:"Colômbia",CR:"Costa Rica",CU:"Cuba",CV:"Cabo Verde",CX:"Ilha de Páscoa",CY:"Chipre",CZ:"República Checa",DE:"Alemanha",DJ:"Djibouti",DK:"Dinamarca",DM:"Dominica",DO:"República Dominicana",DZ:"Algeria",EC:"Equador",EE:"Estônia",EG:"Egito",ER:"Eritrea",ES:"Espanha",ET:"Etiópia",EU:"Europa",FI:"Finlândia",FJ:"Fiji",FK:"Ilhas Malvinas",FM:"Micronésia, Estados Federados da",FO:"Ilhas Faroé",FR:"França",GA:"Gabão",GB:"Reino Unido",GD:"Granada",GE:"Geórgia",GF:"Guiana Francesa",GG:"Guernsey",GH:"Gana",GI:"Gibraltar",GL:"Groenlândia",GM:"Gâmbia",GN:"Guiné",GP:"Guadalupe",GQ:"Guiné Equatorial",GR:"Grécia",GT:"Guatemala",GU:"Guam",GW:"Guiné-Bissau",GY:"Guiana",HK:"Hong Kong",HM:"Ilha Heard e Ilhas McDonald",HN:"Honduras",HR:"Croácia",HT:"Haiti",HU:"Hungria",ID:"Indonésia",IE:"Irlanda",IL:"Israel",IM:"Ilha de Man",IN:"Índia",IQ:"Iraque",IR:"Irã, República Islâmica do",IS:"Islândia",IT:"Itália",JE:"Jersey",JM:"Jamaica",JO:"Jordânia",JP:"Japão",KE:"Quênia",KG:"Quirguistão",KH:"Camboja",KI:"Quiribati",KM:"Comores",KN:"São Cristóvão e Névis",KP:"Coreia, República Popular Democrática da",KR:"Coreia do Sul",KW:"Kuwait",KY:"Ilhas Cayman",KZ:"Cazaquistão",LA:"Laos",LB:"Líbano",LC:"Santa Lúcia",LI:"Liechtenstein",LK:"Sri Lanka",LR:"Libéria",LS:"Lesoto",LT:"Lituânia",LU:"Luxemburgo",LV:"Letônia",LY:"Líbia",MA:"Marrocos",MC:"Mônaco",MD:"Moldávia",ME:"Montenegro",MF:"São Martinho",MG:"Madagascar",MH:"Ilhas Marshall",MK:"Macedônia do Norte",ML:"Mali",MM:"Myanmar",MN:"Mongólia",MO:"Macau",MP:"Ilhas Marianas do Norte",MQ:"Martinica",MR:"Mauritânia",MS:"Montserrat",MT:"Malta",MU:"Maurícia",MV:"Maldivas",MW:"Malawi",MX:"México",MY:"Malásia",MZ:"Moçambique",NA:"Namíbia",NC:"Nova Caledônia",NE:"Níger",NF:"Ilha Norfolk",NG:"Nigéria",NI:"Nicarágua",NL:"Netherlands",NO:"Noruega",NP:"Nepal",NR:"Nauru",NU:"Niue",NZ:"Nova Zelândia",OM:"Omã",PA:"Panamá",PE:"Peru",PF:"Polinésia Francesa",PG:"Papua-Nova Guiné",PH:"Filipinas",PK:"Paquistão",PL:"Polônia",PM:"Saint Pierre e Miquelon",PN:"Picárnia",PR:"Porto Rico",PS:"Territórios Palestinos",PT:"Portugal",PW:"Palau",PY:"Paraguai",QA:"Qatar",RE:"Reunião",RO:"Romênia",RS:"Sérvia",RU:"Federação Russa",RW:"Ruanda",SA:"Arábia Saudita",SB:"Ilhas Salomão",SC:"Seychelles",SD:"Sudão",SE:"Suécia",SG:"Singapura",SH:"Santa Helena",SI:"Eslovênia",SJ:"Svalbard e Jan Mayen",SK:"Eslováquia",SL:"Serra Leoa",SM:"San Marino",SN:"Senegal",SO:"Somália",SR:"Suriname",ST:"São Tomé e Príncipe",SV:"El Salvador",SY:"República Árabe Síria",SZ:"Suazilândia",TC:"Ilhas Turcas e Caicos",TD:"Chade",TG:"Togo",TH:"Tailândia",TJ:"Tajiquistão",TL:"Timor-Leste",TM:"Turcomenistão",TN:"Tunísia",TO:"Tonga",TR:"Turquia",TT:"Trinidade e Tobago",TV:"Tuvalu",TW:"Taiwan",TZ:"Tanzânia, República Unida da",UA:"Ucrânia",UG:"Uganda",US:"Estados Unidos",UY:"Uruguai",UZ:"Uzbequistão",VA:"Vaticano (Estado da Cidade do Vaticano)",VC:"São Vicente e Granadinas",VE:"Venezuela",VG:"Ilhas Virgens Britânicas",VI:"Ilhas Virgens Americanas",VN:"Vietnã",VU:"Vanuatu",WS:"Samoa",YE:"Iêmen",YT:"Mayotte",ZA:"África do Sul",ZM:"Zâmbia",ZW:"Zimbábue"}}},"./src/ts/Strings/ru.ts":function(e,t,r){"use strict";r.r(t),t.default={_version:4,_name:"Russian (output only)",flag:{__:"",AD:"Андорра",AE:"Объединённые Арабские Эмираты",AF:"Афганистан",AG:"Антигуа и Барбуда",AI:"Ангилья",AL:"Албания",AM:"Армения",AN:"Нидерландские Антильские острова",AO:"Ангола",AR:"Аргентина",AS:"Американское Самоа",AT:"Австрия",AU:"Австралия",AW:"Аруба",AX:"Аландские острова",AZ:"Азербайджан",BA:"Босния и Герцеговина",BB:"Барбадос",BD:"Бангладеш",BE:"Бельгия",BF:"Буркина-Фасо",BG:"Болгария",BH:"Бахрейн",BI:"Бурунди",BJ:"Бенин",BL:"Сен-Бартелеми",BM:"Бермудские Острова",BN:"Бруней",BO:"Боливия",BR:"Бразилия",BS:"Багамские Острова",BT:"Бутан",BW:"Ботсвана",BY:"Беларусь",BZ:"Белиз",CA:"Канада",CD:"Демократическая Республика Конго",CF:"Центральноафриканская Республика",CG:"Республика Конго",CH:"Швейцария",CI:"Кот-д’Ивуар",CL:"Чили",CM:"Камерун",CN:"Китай",CO:"Колумбия",CR:"Коста-Рика",CU:"Куба",CV:"Кабо-Верде",CX:"Остров Рождества",CY:"Республика Кипр",CZ:"Чехия",DE:"Германия",DJ:"Джибути",DK:"Дания",DM:"Доминика",DO:"Доминиканская Республика",DZ:"Алжир",EC:"Эквадор",EE:"Эстония",EG:"Египет",ER:"Эритрея",ES:"Испания",ET:"Эфиопия",EU:"Европейский союз",FI:"Финляндия",FJ:"Фиджи",FK:"Фолклендские острова",FM:"Федеративные Штаты Микронезии",FO:"Фарерские острова",FR:"Франция",GA:"Габон",GB:"Великобритания",GD:"Гренада",GE:"Грузия",GF:"Французская Гвиана",GG:"Гернси",GH:"Гана",GI:"Гибралтар",GL:"Гренландия",GM:"Гамбия",GN:"Гвинея",GP:"Гваделупа",GQ:"Экваториальная Гвинея",GR:"Греция",GT:"Гватемала",GU:"Гуам",GW:"Гвинея-Бисау",GY:"Гайана",HK:"Гонконг",HM:"Остров Херд и острова Макдональд",HN:"Гондурас",HR:"Хорватия",HT:"Гаити",HU:"Венгрия",ID:"Индонезия",IE:"Ирландия",IL:"Израиль",IM:"Остров Мэн",IN:"Индия",IQ:"Ирак",IR:"Иран",IS:"Исландия",IT:"Италия",JE:"Джерси",JM:"Ямайка",JO:"Иордания",JP:"Япония",KE:"Кения",KG:"Киргизия",KH:"Камбоджа",KI:"Кирибати",KM:"Коморы",KN:"Сент-Китс и Невис",KP:"Корейская Народно-Демократическая Республика",KR:"Республика Корея",KW:"Кувейт",KY:"Острова Кайман",KZ:"Казахстан",LA:"Лаос",LB:"Ливан",LC:"Сент-Люсия",LI:"Лихтенштейн",LK:"Шри-Ланка",LR:"Либерия",LS:"Лесото",LT:"Литва",LU:"Люксембург",LV:"Латвия",LY:"Ливия",MA:"Марокко",MC:"Монако",MD:"Республика Молдова",ME:"Черногория",MF:"Сен-Мартен",MG:"Мадагаскар",MH:"Маршалловы Острова",MK:"Северная Македония",ML:"Мали",MM:"Мьянма",MN:"Монголия",MO:"Макао",MP:"Северные Марианские Острова",MQ:"Мартиника",MR:"Мавритания",MS:"Монтсеррат",MT:"Мальта",MU:"Маврикий",MV:"Мальдивы",MW:"Малави",MX:"Мексика",MY:"Малайзия",MZ:"Мозамбик",NA:"Намибия",NC:"Новая Каледония",NE:"Нигер",NF:"Остров Норфолк",NG:"Нигерия",NI:"Никарагуа",NL:"Нидерланды",NO:"Норвегия",NP:"Непал",NR:"Науру",NU:"Ниуэ",NZ:"Новая Зеландия",OM:"Оман",PA:"Панама",PE:"Перу",PF:"Французская Полинезия",PG:"Папуа — Новая Гвинея",PH:"Филиппины",PK:"Пакистан",PL:"Польша",PM:"Сен-Пьер и Микелон",PN:"Острова Питкэрн",PR:"Пуэрто-Рико",PS:"Государство Палестина",PT:"Португалия",PW:"Палау",PY:"Парагвай",QA:"Катар",RE:"Реюньон",RO:"Румыния",RS:"Сербия",RU:"Российская Федерация",RW:"Руанда",SA:"Саудовская Аравия",SB:"Соломоновы Острова",SC:"Сейшельские Острова",SD:"Судан",SE:"Швеция",SG:"Сингапур",SH:"Острова Святой Елены, Вознесения и Тристан-да-Кунья",SI:"Словения",SJ:"Шпицберген и Ян-Майен",SK:"Словакия",SL:"Сьерра-Леоне",SM:"Сан-Марино",SN:"Сенегал",SO:"Сомали",SR:"Суринам",ST:"Сан-Томе и Принсипи",SV:"Сальвадор",SY:"Сирия",SZ:"Эсватини",TC:"Теркс и Кайкос",TD:"Чад",TG:"Того",TH:"Таиланд",TJ:"Таджикистан",TL:"Восточный Тимор",TM:"Туркменистан",TN:"Тунис",TO:"Тонга",TR:"Турция",TT:"Тринидад и Тобаго",TV:"Тувалу",TW:"Тайвань",TZ:"Танзания",UA:"Украина",UG:"Уганда",US:"Соединённые Штаты Америки",UY:"Уругвай",UZ:"Узбекистан",VA:"Ватикан",VC:"Сент-Винсент и Гренадины",VE:"Венесуэла",VG:"Виргинские Острова (Великобритания)",VI:"Виргинские Острова (США)",VN:"Вьетнам",VU:"Вануату",WS:"Самоа",YE:"Йемен",YT:"Майотта",ZA:"Южно-Африканская Республика",ZM:"Замбия",ZW:"Зимбабве"}}},"./src/ts/Strings/th.ts":function(e,t,r){"use strict";r.r(t),t.default={_version:4,_name:"Thai (output only)",flag:{__:"",AD:"อันดอร์รา",AE:"สหรัฐอาหรับเอมิเรตส์",AF:"อัฟกานิสถาน",AG:"แอนติกาและบาร์บูดา",AI:"แองกวิลลา",AL:"แอลเบเนีย",AM:"อาร์มีเนีย",AN:"เนเธอร์แลนด์แอนทิลลีส",AO:"แองโกลา",AR:"อาร์เจนตินา",AS:"อเมริกันซามัว",AT:"ออสเตรีย",AU:"ออสเตรเลีย",AW:"อารูบา",AX:"หมู่เกาะโอลันด์",AZ:"อาเซอร์ไบจาน",BA:"บอสเนียและเฮอร์เซโกวีนา",BB:"บาร์เบโดส",BD:"บังกลาเทศ",BE:"เบลเยียม",BF:"บูร์กินาฟาโซ",BG:"บัลแกเรีย",BH:"บาห์เรน",BI:"บุรุนดี",BJ:"เบนิน",BL:"แซ็ง-บาร์เตเลมี",BM:"เบอร์มิวดา",BN:"บรูไน",BO:"โบลิเวีย",BR:"บราซิล",BS:"บาฮามาส",BT:"ภูฏาน",BW:"บอตสวานา",BY:"เบลารุส",BZ:"เบลีซ",CA:"แคนาดา",CD:"สาธารณรัฐประชาธิปไตยคองโก",CF:"สาธารณรัฐแอฟริกากลาง",CG:"สาธารณรัฐคองโก",CH:"สวิตเซอร์แลนด์",CI:"โกตดิวัวร์",CL:"ชิลี",CM:"แคเมอรูน",CN:"จีน",CO:"โคลอมเบีย",CR:"คอสตาริกา",CU:"คิวบา",CV:"กาบูเวร์ดี",CX:"เกาะคริสต์มาส",CY:"ไซปรัส",CZ:"สาธารณรัฐเช็ก",DE:"เยอรมนี",DJ:"จิบูตี",DK:"เดนมาร์ก",DM:"ดอมินีกา",DO:"สาธารณรัฐโดมินิกัน",DZ:"แอลจีเรีย",EC:"เอกวาดอร์",EE:"เอสโตเนีย",EG:"อียิปต์",ER:"เอริเทรีย",ES:"สเปน",ET:"เอธิโอเปีย",EU:"ยุโรป",FI:"ฟินแลนด์",FJ:"ฟีจี",FK:"หมู่เกาะฟอล์กแลนด์",FM:"สหพันธรัฐไมโครนีเซีย",FO:"หมู่เกาะแฟโร",FR:"ฝรั่งเศส",GA:"กาบอง",GB:"สหราชอาณาจักร",GD:"เกรเนดา",GE:"จอร์เจีย",GF:"เฟรนช์เกียนา",GG:"เกิร์นซีย์",GH:"กานา",GI:"ยิบรอลตาร์",GL:"กรีนแลนด์",GM:"แกมเบีย",GN:"กินี",GP:"กัวเดอลุป",GQ:"อิเควทอเรียลกินี",GR:"กรีซ",GT:"กัวเตมาลา",GU:"กวม",GW:"กินี-บิสเซา",GY:"กายอานา",HK:"ฮ่องกง",HM:"เกาะเฮิร์ดและหมู่เกาะแมกดอนัลด์",HN:"ฮอนดูรัส",HR:"โครเอเชีย",HT:"เฮติ",HU:"ฮังการี",ID:"อินโดนีเซีย",IE:"ไอร์แลนด์",IL:"อิสราเอล",IM:"ไอล์ออฟแมน",IN:"อินเดีย",IQ:"อิรัก",IR:"สาธารณรัฐอิสลามอิหร่าน",IS:"ไอซ์แลนด์",IT:"อิตาลี",JE:"เจอร์ซีย์",JM:"จาเมกา",JO:"จอร์แดน",JP:"ญี่ปุ่น",KE:"เคนยา",KG:"คีร์กีซสถาน",KH:"กัมพูชา",KI:"คิริบาส",KM:"คอโมโรส",KN:"เซนต์คิตส์และเนวิส",KP:"เกาหลีเหนือ",KR:"เกาหลีใต้",KW:"คูเวต",KY:"หมู่เกาะเคย์แมน",KZ:"คาซัคสถาน",LA:"สาธารณรัฐประชาธิปไตยประชาชนลาว",LB:"เลบานอน",LC:"เซนต์ลูเชีย",LI:"ลิกเตนสไตน์",LK:"ศรีลังกา",LR:"ไลบีเรีย",LS:"เลโซโท",LT:"ลิทัวเนีย",LU:"ลักเซมเบิร์ก",LV:"ลัตเวีย",LY:"ลิเบีย",MA:"โมร็อกโก",MC:"โมนาโก",MD:"มอลโดวา",ME:"มอนเตเนโกร",MF:"แซ็ง-มาร์แต็ง",MG:"มาดากัสการ์",MH:"หมู่เกาะมาร์แชลล์",MK:"นอร์ทมาซิโดเนีย",ML:"มาลี",MM:"พม่า",MN:"มองโกเลีย",MO:"มาเก๊า",MP:"หมู่เกาะนอร์เทิร์นมาเรียนา",MQ:"มาร์ตีนิก",MR:"มอริเตเนีย",MS:"มอนต์เซอร์รัต",MT:"มอลตา",MU:"มอริเชียส",MV:"มัลดีฟส์",MW:"มาลาวี",MX:"เม็กซิโก",MY:"มาเลเซีย",MZ:"โมซัมบิก",NA:"นามิเบีย",NC:"นิวแคลิโดเนีย",NE:"ไนเจอร์",NF:"เกาะนอร์ฟอล์ก",NG:"ไนจีเรีย",NI:"นิการากัว",NL:"เนเธอร์แลนด์",NO:"นอร์เวย์",NP:"เนปาล",NR:"นาอูรู",NU:"นีวเว",NZ:"นิวซีแลนด์",OM:"โอมาน",PA:"ปานามา",PE:"เปรู",PF:"เฟรนช์พอลินีเชีย",PG:"ปาปัวนิวกินี",PH:"ฟิลิปปินส์",PK:"ปากีสถาน",PL:"โปแลนด์",PM:"แซ็งปีแยร์และมีเกอลง",PN:"หมู่เกาะพิตแคร์น",PR:"ปวยร์โตรีโก",PS:"ปาเลสไตน์",PT:"โปรตุเกส",PW:"ปาเลา",PY:"ปารากวัย",QA:"กาตาร์",RE:"เรอูว์นียง",RO:"โรมาเนีย",RS:"เซอร์เบีย",RU:"รัสเซีย",RW:"รวันดา",SA:"ซาอุดีอาระเบีย",SB:"หมู่เกาะโซโลมอน",SC:"เซเชลส์",SD:"ซูดาน",SE:"สวีเดน",SG:"สิงคโปร์",SH:"เซนต์เฮเลนา",SI:"สโลวีเนีย",SJ:"สฟาลบาร์และยานไมเอน",SK:"สโลวาเกีย",SL:"เซียร์ราลีโอน",SM:"ซานมารีโน",SN:"เซเนกัล",SO:"โซมาเลีย",SR:"ซูรินาม",ST:"เซาตูเมและปรินซีปี",SV:"เอลซัลวาดอร์",SY:"สาธารณรัฐอาหรับซีเรีย",SZ:"เอสวาตีนี",TC:"หมู่เกาะเติกส์และเคคอส",TD:"ชาด",TG:"โตโก",TH:"ไทย",TJ:"ทาจิกิสถาน",TL:"ติมอร์-เลสเต",TM:"เติร์กเมนิสถาน",TN:"ตูนิเซีย",TO:"ตองงา",TR:"ตุรกี",TT:"ตรินิแดดและโตเบโก",TV:"ตูวาลู",TW:"ไต้หวัน",TZ:"แทนซาเนีย",UA:"ยูเครน",UG:"ยูกันดา",US:"สหรัฐอเมริกา",UY:"อุรุกวัย",UZ:"อุซเบกิสถาน",VA:"นครรัฐวาติกัน",VC:"เซนต์วินเซนต์และเกรนาดีนส์",VE:"เวเนซุเอลา",VG:"หมู่เกาะบริติชเวอร์จิน",VI:"หมู่เกาะเวอร์จินของสหรัฐ",VN:"เวียดนาม",VU:"วานูวาตู",WS:"อเมริกันซามัว",YE:"เยเมน",YT:"มายอต",ZA:"แอฟริกาใต้",ZM:"แซมเบีย",ZW:"ซิมบับเว"}}},"./src/ts/Strings/tr.ts":function(e,t,r){"use strict";r.r(t),t.default={_version:4,_name:"Turkish (output only)",flag:{__:"",AD:"Andorra",AE:"Birleşik Arap Emirlikleri",AF:"Afganistan",AG:"Antigua ve Barbuda",AI:"Anguilla",AL:"Arnavutluk",AM:"Ermenistan",AN:"Hollanda Antilleri",AO:"Angola",AR:"Arjantin",AS:"Amerikan Samoası",AT:"Avusturya",AU:"Avustralya",AW:"Aruba",AX:"Aland Adaları",AZ:"Azerbaycan",BA:"Bosnia Hersek",BB:"Barbados",BD:"Bangladeş",BE:"Belçika",BF:"Burkina Faso",BG:"Bulgaristan",BH:"Bahreyn",BI:"Burundi",BJ:"Benin",BL:"Saint Barthelemy",BM:"Bermuda",BN:"Brunei",BO:"Bolivya",BR:"Brezilya",BS:"Bahamalar",BT:"Bhutan",BW:"Botsvana",BY:"Belarus",BZ:"Belize",CA:"Kanada",CD:"Kongo Demokratik Cumhuriyeti",CF:"Orta Afrika Cumhuriyeti",CG:"Kongo",CH:"İsviçre",CI:"Fildişi Sahili",CL:"Şili",CM:"Kamerun",CN:"Çin",CO:"Kolombiya",CR:"Kosta Rika",CU:"Küba",CV:"Yeşil Burun Adaları",CX:"Christmas Adası",CY:"Kıbrıs Cumhuriyeti",CZ:"Çek Cumhuriyeti",DE:"Almanya",DJ:"Cibuti",DK:"Danimarka",DM:"Dominika",DO:"Dominik Cumhuriyeti",DZ:"Cezayir",EC:"Ekvador",EE:"Estonya",EG:"Mısır",ER:"Eritre",ES:"İspanya",ET:"Etiyopya",EU:"Avrupa",FI:"Finlandiya",FJ:"Fiji",FK:"Falkland Adaları (Malvinalar)",FM:"Mikronezya Federal Devletleri",FO:"Faroe Adaları",FR:"Fransa",GA:"Gabon",GB:"Birleşik Krallık",GD:"Grenada",GE:"Gürcistan",GF:"Fransız Guyanası",GG:"Guernsey",GH:"Gana",GI:"Cebelitarık",GL:"Grönland",GM:"Gambiya",GN:"Gine",GP:"Guadeloupe",GQ:"Ekvatoral Gine",GR:"Yunanistan",GT:"Guatemala",GU:"Guam",GW:"Gine-Bissau",GY:"Guyana",HK:"Hong Kong",HM:"Heard Adası ve McDonald Adaları",HN:"Honduras",HR:"Hırvatistan",HT:"Haiti",HU:"Macaristan",ID:"Endonezya",IE:"İrlanda",IL:"İsrail",IM:"Man Adası",IN:"Hindistan",IQ:"Irak",IR:"İran İslam Cumhuriyeti",IS:"İzlanda",IT:"İtalya",JE:"Jersey",JM:"Jamaika",JO:"Ürdün",JP:"Japonya",KE:"Kenya",KG:"Kırgızistan",KH:"Kamboçya",KI:"Kiribati",KM:"Komorlar",KN:"Saint Kitts ve Nevis",KP:"Kore Demokratik Halk Cumhuriyeti",KR:"Güney Kore",KW:"Kuveyt",KY:"Cayman Adaları",KZ:"Kazakistan",LA:"Lao Demokratik Halk Cumhuriyeti",LB:"Lübnan",LC:"Saint Lucia",LI:"Lihtenştayn",LK:"Sri Lanka",LR:"Liberya",LS:"Lesotho",LT:"Litvanya",LU:"Lüksemburg",LV:"Letonya",LY:"Libya",MA:"Fas",MC:"Monako",MD:"Moldova",ME:"Montenegro",MF:"Saint Martin",MG:"Madagaskar",MH:"Marshall Adaları",MK:"Kuzey Makedonya",ML:"Mali",MM:"Myanmar",MN:"Moğolistan",MO:"Makao",MP:"Kuzey Mariana Adaları",MQ:"Martinik",MR:"Moritanya",MS:"Montserrat",MT:"Malta",MU:"Mauritius",MV:"Maldivler",MW:"Malavi",MX:"Meksika",MY:"Malezya",MZ:"Mozambik",NA:"Namibya",NC:"Yeni Kaledonya",NE:"Nijer",NF:"Norfolk Adaları",NG:"Nijerya",NI:"Nikaragua",NL:"Hollanda",NO:"Norveç",NP:"Nepal",NR:"Nauru",NU:"Niue",NZ:"Yeni Zelanda",OM:"Oman",PA:"Panama",PE:"Peru",PF:"Fransız Polynezyası",PG:"Papua Yeni Gine",PH:"Filipinler",PK:"Pakistan",PL:"Polonya",PM:"Saint Pierre ve Miquelon",PN:"Pitcairn",PR:"Porto Riko",PS:"Filistin",PT:"Portekiz",PW:"Palau",PY:"Paraguay",QA:"Katar",RE:"Reunion",RO:"Romanya",RS:"Sırbistan",RU:"Rusya Federasyonu",RW:"Ruanda",SA:"Suudi Arabistan",SB:"Solomon Adaları",SC:"Seyşeller",SD:"Sudan",SE:"İsveç",SG:"Singapur",SH:"Saint Helena",SI:"Slovenya",SJ:"Svalbard ve Jan Mayen",SK:"Slovakya",SL:"Sierra Leone",SM:"San Marino",SN:"Senegal",SO:"Somali",SR:"Surinam",ST:"Sao Tome ve Principe",SV:"El Salvador",SY:"Suriye Arap Cumhuriyeti",SZ:"Esvatini",TC:"Turks ve Caicos Adaları",TD:"Çad",TG:"Togo",TH:"Tayland",TJ:"Tacikistan",TL:"Timor-Leste",TM:"Türkmenistan",TN:"Tunus",TO:"Tonga",TR:"Türkiye",TT:"Trinidad ve Tobago",TV:"Tuvalu",TW:"Tayvan",TZ:"Tanzanya Birleşik Cumhuriyeti",UA:"Ukrayna",UG:"Uganda",US:"Birleşik Devletler",UY:"Uruguay",UZ:"Özbekistan",VA:"Kutsal Makam (Vatikan Şehir Devleti)",VC:"Saint Vincent ve Grenadinler",VE:"Venezuela",VG:"Britanya Virjin Adaları",VI:"A.B.D. Virjin Adaları",VN:"Vietnam",VU:"Vanuatu",WS:"Samoa",YE:"Yemen",YT:"Mayotte",ZA:"Güney Afrika",ZM:"Zambiya",ZW:"Zimbabve"}}},"./src/ts/Strings/zh.ts":function(e,t,r){"use strict";r.r(t),t.default={_version:4,_name:"Chinese (output only)",flag:{__:"",AD:"安道尔",AE:"阿联酋",AF:"阿富汗",AG:"安提瓜和巴布达",AI:"安圭拉",AL:"阿尔巴尼亚",AM:"亚美尼亚",AN:"荷属安的列斯群岛",AO:"安哥拉",AR:"阿根廷",AS:"美属萨摩亚群岛",AT:"奥地利",AU:"澳大利亚",AW:"阿鲁巴",AX:"奥兰群岛",AZ:"阿塞拜疆",BA:"波斯尼亚和黑塞哥维那",BB:"巴巴多斯",BD:"孟加拉",BE:"比利时",BF:"布基纳法索",BG:"保加利亚",BH:"巴林",BI:"布隆迪",BJ:"贝宁",BL:"圣巴泰勒米岛",BM:"百慕大",BN:"文莱",BO:"玻利维亚",BR:"巴西",BS:"巴哈马",BT:"不丹",BW:"博茨瓦纳",BY:"白俄罗斯",BZ:"伯利兹",CA:"加拿大",CD:"刚果民主共和国",CF:"中非",CG:"刚果",CH:"瑞士",CI:"科特迪瓦",CL:"智利",CM:"喀麦隆",CN:"中国",CO:"哥伦比亚",CR:"哥斯达黎加",CU:"古巴",CV:"佛得角",CX:"圣诞岛",CY:"塞浦路斯",CZ:"捷克",DE:"德国",DJ:"吉布提",DK:"丹麦",DM:"多米尼克",DO:"多米尼加",DZ:"阿尔及利亚",EC:"厄瓜多尔",EE:"爱沙尼亚",EG:"埃及",ER:"厄立特里亚",ES:"西班牙",ET:"埃塞俄比亚",EU:"欧洲",FI:"芬兰",FJ:"斐济",FK:"福克兰群岛 (马尔维纳斯)",FM:"密克罗尼西亚",FO:"法罗群岛",FR:"法国",GA:"加蓬",GB:"英国",GD:"格林纳达",GE:"格鲁吉亚",GF:"法属圭亚那",GG:"根西",GH:"加纳",GI:"直布罗陀",GL:"格陵兰岛",GM:"冈比亚",GN:"几内亚",GP:"瓜德罗普",GQ:"赤道几内亚",GR:"希腊",GT:"危地马拉",GU:"关岛",GW:"几内亚比绍",GY:"圭亚那",HK:"香港",HM:"赫德岛和麦克唐纳群岛",HN:"洪都拉斯",HR:"克罗地亚",HT:"海地",HU:"匈牙利",ID:"印度尼西亚",IE:"爱尔兰",IL:"以色列",IM:"马恩岛",IN:"印度",IQ:"伊拉克",IR:"伊朗",IS:"冰岛",IT:"意大利",JE:"泽西岛",JM:"牙买加",JO:"约旦",JP:"日本",KE:"肯尼亚",KG:"吉尔吉斯坦",KH:"柬埔寨",KI:"基里巴斯",KM:"科摩罗",KN:"圣基茨和尼维斯",KP:"朝鲜",KR:"韩国",KW:"科威特",KY:"开曼群岛",KZ:"哈萨克斯坦",LA:"老挝",LB:"黎巴嫩",LC:"圣卢西亚",LI:"列支敦士登",LK:"斯里兰卡",LR:"利比里亚",LS:"莱索托",LT:"立陶宛",LU:"卢森堡",LV:"拉脱维亚",LY:"利比亚",MA:"摩洛哥",MC:"摩纳哥",MD:"摩尔多瓦",ME:"黑山",MF:"圣马丁",MG:"马达加斯加",MH:"马绍尔群岛",MK:"北马其顿",ML:"马里",MM:"缅甸",MN:"蒙古",MO:"澳门",MP:"北马里亚纳群岛",MQ:"马提尼克",MR:"毛里塔尼亚",MS:"蒙特塞拉特岛",MT:"马耳他",MU:"毛里求斯",MV:"马尔代夫",MW:"马拉维",MX:"墨西哥",MY:"马来西亚",MZ:"莫桑比克",NA:"纳米比亚",NC:"新喀里多尼亚",NE:"尼日尔",NF:"诺福克岛",NG:"尼日利亚",NI:"尼加拉瓜",NL:"荷兰",NO:"挪威",NP:"尼泊尔",NR:"瑙鲁",NU:"纽埃",NZ:"新西兰",OM:"阿曼",PA:"巴拿马",PE:"秘鲁",PF:"法属玻利尼西亚",PG:"巴布亚新几内亚",PH:"菲律宾",PK:"巴基斯坦",PL:"波兰",PM:"圣皮埃尔岛和密克隆岛",PN:"皮特凯恩",PR:"波多黎各",PS:"巴勒斯坦领土",PT:"葡萄牙",PW:"帕劳",PY:"巴拉圭",QA:"卡塔尔",RE:"留尼汪",RO:"罗马尼亚",RS:"塞尔维亚",RU:"俄罗斯",RW:"卢旺达",SA:"沙特阿拉伯",SB:"所罗门",SC:"塞舌尔",SD:"苏丹",SE:"瑞典",SG:"新加坡",SH:"圣赫勒拿",SI:"斯洛文尼亚",SJ:"斯瓦尔巴和扬马延",SK:"斯洛伐克",SL:"塞拉利昂",SM:"圣马力诺",SN:"塞内加尔",SO:"索马里",SR:"苏里南",ST:"圣多美和普林西比",SV:"萨尔瓦多",SY:"叙利亚",SZ:"斯威士兰",TC:"特克斯和凯科斯群岛",TD:"乍得",TG:"多哥",TH:"泰国",TJ:"塔吉克斯坦",TL:"东帝汶",TM:"土库曼斯坦",TN:"突尼斯",TO:"汤加",TR:"土耳其",TT:"特立尼达和多巴哥",TV:"图瓦卢",TW:"台湾",TZ:"坦桑尼亚",UA:"乌克兰",UG:"乌干达",US:"美国",UY:"乌拉圭",UZ:"乌兹别克斯坦",VA:"梵蒂冈",VC:"圣文森特岛",VE:"委内瑞拉",VG:"英属维尔京群岛",VI:"美属维尔京群岛",VN:"越南",VU:"瓦努阿图",WS:"萨摩亚",YE:"也门",YT:"马约特",ZA:"南非",ZM:"赞比亚",ZW:"津巴布韦"}}},"./src/ts/app.ts":function(e,t,r){"use strict";r.r(t);var n,a,o=r("./src/ts/L10n.ts");const i=navigator.cookieEnabled,s=document.querySelector('[data-button="help"]'),l=document.querySelector('[data-button="example"]'),u=document.querySelector('[data-button="config"]'),c=document.querySelector("#config-country-title"),d=document.querySelector("#config-country-alt"),p=document.querySelector("#config-output-input"),f=document.querySelector("#config-parsefix"),h=document.querySelector("#config-language"),m={get countryTitle(){return c.checked},get countryAlt(){return d.checked},get outputInput(){return p.checked},get parsefix(){return f.checked},get language(){return h.value}},g=document.querySelector('[data-button="errors"]'),v=document.querySelector("#errors-list"),b=document.querySelector('[data-button="parse"]'),y=document.querySelector("#input"),w=document.querySelector("#output"),S=document.querySelector("#output-has-errors"),C=document.querySelector('[data-button="output-copy"]');let A=o.default.getLangCodes();for(let e of A){let t=document.createElement("option");t.setAttribute("value",e),t.textContent=o.default.getLangName(e),h.insertAdjacentElement("beforeend",t)}function E(){const e=[...document.body.querySelectorAll("[data-l10n]")];for(const t of e)t.dataset.l10n&&(t.textContent=o.default.getInterfaceString(t.dataset.l10n))}i&&("true"===localStorage.getItem("country-title")&&(c.checked=!0),"true"===localStorage.getItem("country-alt")&&(d.checked=!0,p.checked=!0,p.disabled=!0),"true"===localStorage.getItem("output-input")&&(p.checked=!0),"true"===localStorage.getItem("parsefix")&&(f.checked=!0));try{null===(n=h.querySelector(`option[value="${localStorage.getItem("output-language")}"]`))||void 0===n||n.setAttribute("selected","");let e=localStorage.getItem("output-language");e?o.default.setLang(e):(null===(a=h.querySelector('option[value="en"]'))||void 0===a||a.setAttribute("selected",""),o.default.setLang("en"))}finally{E()}s.removeAttribute("disabled"),l.removeAttribute("disabled"),u.removeAttribute("disabled"),b.removeAttribute("disabled"),y.removeAttribute("disabled");const M=Object.freeze(o.default.getFlagCodes());function T(e){let t=e.target,r=t.dataset.checkbox;r&&(t.checked?localStorage.setItem(r,"true"):localStorage.setItem(r,"false"))}function N(e){var t;let r=null===(t=e.target)||void 0===t?void 0:t.result;r&&(y.value=r.toString())}function L(e){return`[flag_${e}]`}d.addEventListener("change",(function(){m.countryAlt?(p.checked=!0,p.disabled=!0):m.parsefix||(p.checked=!1,p.disabled=!1)})),f.addEventListener("change",(function(){m.parsefix?(p.checked=!0,p.disabled=!0):m.countryAlt||(p.checked=!1,p.disabled=!1)})),i&&(c.addEventListener("change",T),d.addEventListener("change",T),p.addEventListener("change",T),f.addEventListener("change",T)),h.addEventListener("change",(function(e){let t=e.target;o.default.setLang(t.value),E(),i&&localStorage.setItem("output-language",t.value)})),l.addEventListener("click",(function(){l.classList.contains("menu__button--disabled")||(y.value=o.default.getString("example"))})),C.addEventListener("click",(function(){var e,t,r,n,a,o,i;if(!C.hasAttribute("disabled")){if(null===(e=C.querySelector('[data-l10n="copy"]'))||void 0===e||e.classList.remove("d-none"),null===(t=C.querySelector('[data-l10n="copied"]'))||void 0===t||t.classList.add("d-none"),null===(r=C.querySelector('[data-l10n="failed"]'))||void 0===r||r.classList.add("d-none"),"clipboard"in navigator)navigator.clipboard.writeText(w.value).then((()=>{var e,t;C.setAttribute("disabled",""),null===(e=C.querySelector('[data-l10n="copied"]'))||void 0===e||e.classList.remove("d-none"),null===(t=C.querySelector('[data-l10n="copy"]'))||void 0===t||t.classList.add("d-none")})).catch((()=>{var e,t;C.setAttribute("disabled",""),null===(e=C.querySelector('[data-l10n="failed"]'))||void 0===e||e.classList.remove("d-none"),null===(t=C.querySelector('[data-l10n="copy"]'))||void 0===t||t.classList.add("d-none")}));else try{w.select(),document.execCommand("copy"),C.setAttribute("disabled",""),null===(n=C.querySelector('[data-l10n="copied"]'))||void 0===n||n.classList.remove("d-none"),null===(a=C.querySelector('[data-l10n="copy"]'))||void 0===a||a.classList.add("d-none")}catch(e){C.setAttribute("disabled",""),null===(o=C.querySelector('[data-l10n="failed"]'))||void 0===o||o.classList.remove("d-none"),null===(i=C.querySelector('[data-l10n="copy"]'))||void 0===i||i.classList.add("d-none")}setTimeout((()=>{var e,t,r;C.removeAttribute("disabled"),null===(e=C.querySelector('[data-l10n="copy"]'))||void 0===e||e.classList.remove("d-none"),null===(t=C.querySelector('[data-l10n="copied"]'))||void 0===t||t.classList.add("d-none"),null===(r=C.querySelector('[data-l10n="failed"]'))||void 0===r||r.classList.add("d-none")}),1e3)}})),window.addEventListener("drop",(function(e){var t;let r=new FileReader;r.addEventListener("load",N),e.preventDefault();let n=null===(t=e.dataTransfer)||void 0===t?void 0:t.files[0];n&&"text/markdown"===n.type&&r.readAsText(n)})),b.addEventListener("click",(function(){for(;v.firstChild;)v.firstChild.remove();let e=y.value.split("\n"),t=new Map,r="",n=[],a=[];for(let r=0;r<e.length;r++){let i,s=/!\[([^\]]*?)\](\[flag_(.*?)\]|\(\/wiki\/shared\/flag\/(.*?)\.gif(?: ".*?")?\))/g;for(;null!=(i=s.exec(e[r]));){let e;if(e=i[3]?i[3].toUpperCase():i[4].toUpperCase(),!M.includes(e)){let t;switch(e){case"BV":t="NO";break;case"FX":t="FR";break;case"UM":t="US";break;default:t="__"}n.push([e,r+1,t]),m.parsefix&&(e=t)}a.unshift([r,i,e]);let s=L(e);if(m.countryTitle)if("__"===e)t.set(s,"/wiki/shared/flag/__.gif");else{let r=o.default.getCountryName(e);t.set(s,`/wiki/shared/flag/${e}.gif "${r||"FLAG_NOT_FOUND"}"`)}else t.set(s,`/wiki/shared/flag/${e}.gif`)}}if(a.forEach((t=>{let r;r=m.countryAlt?"__"===t[2]?"![]"+L(t[2]):`![${t[2]}]${L(t[2])}`:"![]"+L(t[2]),e[t[0]]=`${e[t[0]].substring(0,t[1].index)}${r}${e[t[0]].substring(t[1].index+t[1][0].length,e[t[0]].length)}`})),n.length>0)if(g.removeAttribute("disabled"),m.parsefix){S.textContent=o.default.getInterfaceString("output-has-fixes");for(let e=0;e<n.length;e++){let t=document.createElement("li");t.innerHTML=`${o.default.getInterfaceString("line")} ${n[e][1]}: <code>${n[e][0]}</code> &rarr; <code>${n[e][2]}</code>`,v.insertAdjacentElement("beforeend",t)}}else{S.textContent=o.default.getInterfaceString("output-has-errors");for(let e=0;e<n.length;e++){let t=document.createElement("li");t.innerHTML=`<code>${n[e][0]}</code> &mdash; ${o.default.getInterfaceString("line")} ${n[e][1]} (${o.default.getInterfaceString("use-instead")} <code>${n[e][2]}</code>)`,v.insertAdjacentElement("beforeend",t)}}else g.setAttribute("disabled",""),S.textContent="";t=new Map([...t.entries()].sort()),t.forEach(((e,t)=>{r+=`${t}: ${e}\n`})),m.outputInput?w.textContent=`${e.join("\n")}\n${r}`:w.textContent=r,$("#output-modal").modal("show")}))},0:function(e,t,r){r("./node_modules/webpack-dev-server/client/index.js?http://localhost:8080"),r("./src/ts/app.ts"),e.exports=r("./src/scss/app.scss")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,